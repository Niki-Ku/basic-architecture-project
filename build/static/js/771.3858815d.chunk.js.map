{"version":3,"file":"static/js/771.3858815d.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/tslib/tslib.es6.mjs","../node_modules/@firebase/auth/src/model/enum_maps.ts","../node_modules/@firebase/auth/src/core/errors.ts","../node_modules/@firebase/auth/src/core/util/log.ts","../node_modules/@firebase/auth/src/core/util/assert.ts","../node_modules/@firebase/auth/src/core/util/location.ts","../node_modules/@firebase/auth/src/core/util/delay.ts","../node_modules/@firebase/auth/src/core/util/navigator.ts","../node_modules/@firebase/auth/src/core/util/emulator.ts","../node_modules/@firebase/auth/src/core/util/fetch_provider.ts","../node_modules/@firebase/auth/src/api/errors.ts","../node_modules/@firebase/auth/src/api/index.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha.ts","../node_modules/@firebase/auth/src/api/authentication/recaptcha.ts","../node_modules/@firebase/auth/src/api/account_management/account.ts","../node_modules/@firebase/auth/src/core/util/time.ts","../node_modules/@firebase/auth/src/core/user/id_token_result.ts","../node_modules/@firebase/auth/src/core/user/invalidation.ts","../node_modules/@firebase/auth/src/core/user/proactive_refresh.ts","../node_modules/@firebase/auth/src/core/user/user_metadata.ts","../node_modules/@firebase/auth/src/core/user/reload.ts","../node_modules/@firebase/auth/src/api/authentication/token.ts","../node_modules/@firebase/auth/src/core/user/token_manager.ts","../node_modules/@firebase/auth/src/core/user/user_impl.ts","../node_modules/@firebase/auth/src/core/util/instantiator.ts","../node_modules/@firebase/auth/src/core/persistence/in_memory.ts","../node_modules/@firebase/auth/src/core/persistence/persistence_user_manager.ts","../node_modules/@firebase/auth/src/core/util/browser.ts","../node_modules/@firebase/auth/src/core/util/version.ts","../node_modules/@firebase/auth/src/core/auth/middleware.ts","../node_modules/@firebase/auth/src/api/password_policy/get_password_policy.ts","../node_modules/@firebase/auth/src/core/auth/password_policy_impl.ts","../node_modules/@firebase/auth/src/core/auth/auth_impl.ts","../node_modules/@firebase/auth/src/platform_browser/load_js.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_mock.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_enterprise_verifier.ts","../node_modules/@firebase/auth/src/core/auth/initialize.ts","../node_modules/@firebase/auth/src/core/auth/emulator.ts","../node_modules/@firebase/auth/src/core/credentials/auth_credential.ts","../node_modules/@firebase/auth/src/api/account_management/email_and_password.ts","../node_modules/@firebase/auth/src/api/authentication/email_and_password.ts","../node_modules/@firebase/auth/src/api/authentication/email_link.ts","../node_modules/@firebase/auth/src/core/credentials/email.ts","../node_modules/@firebase/auth/src/api/authentication/idp.ts","../node_modules/@firebase/auth/src/core/credentials/oauth.ts","../node_modules/@firebase/auth/src/api/authentication/sms.ts","../node_modules/@firebase/auth/src/core/credentials/phone.ts","../node_modules/@firebase/auth/src/core/action_code_url.ts","../node_modules/@firebase/auth/src/core/providers/email.ts","../node_modules/@firebase/auth/src/core/providers/federated.ts","../node_modules/@firebase/auth/src/core/providers/oauth.ts","../node_modules/@firebase/auth/src/core/providers/facebook.ts","../node_modules/@firebase/auth/src/core/providers/google.ts","../node_modules/@firebase/auth/src/core/providers/github.ts","../node_modules/@firebase/auth/src/core/credentials/saml.ts","../node_modules/@firebase/auth/src/core/providers/saml.ts","../node_modules/@firebase/auth/src/core/providers/twitter.ts","../node_modules/@firebase/auth/src/api/authentication/sign_up.ts","../node_modules/@firebase/auth/src/core/user/user_credential_impl.ts","../node_modules/@firebase/auth/src/core/strategies/anonymous.ts","../node_modules/@firebase/auth/src/mfa/mfa_error.ts","../node_modules/@firebase/auth/src/core/util/providers.ts","../node_modules/@firebase/auth/src/core/user/link_unlink.ts","../node_modules/@firebase/auth/src/core/user/reauthenticate.ts","../node_modules/@firebase/auth/src/core/strategies/credential.ts","../node_modules/@firebase/auth/src/api/authentication/custom_token.ts","../node_modules/@firebase/auth/src/core/strategies/custom_token.ts","../node_modules/@firebase/auth/src/mfa/mfa_info.ts","../node_modules/@firebase/auth/src/core/strategies/action_code_settings.ts","../node_modules/@firebase/auth/src/core/strategies/email_and_password.ts","../node_modules/@firebase/auth/src/core/strategies/email_link.ts","../node_modules/@firebase/auth/src/api/authentication/create_auth_uri.ts","../node_modules/@firebase/auth/src/core/strategies/email.ts","../node_modules/@firebase/auth/src/api/account_management/profile.ts","../node_modules/@firebase/auth/src/core/user/account_info.ts","../node_modules/@firebase/auth/src/core/user/additional_user_info.ts","../node_modules/@firebase/auth/src/core/index.ts","../node_modules/@firebase/auth/src/mfa/mfa_session.ts","../node_modules/@firebase/auth/src/mfa/mfa_resolver.ts","../node_modules/@firebase/auth/src/api/account_management/mfa.ts","../node_modules/@firebase/auth/src/mfa/mfa_user.ts","../node_modules/@firebase/auth/src/core/persistence/index.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/browser.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/local_storage.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/session_storage.ts","../node_modules/@firebase/auth/src/platform_browser/messagechannel/promise.ts","../node_modules/@firebase/auth/src/platform_browser/messagechannel/receiver.ts","../node_modules/@firebase/auth/src/core/util/event_id.ts","../node_modules/@firebase/auth/src/platform_browser/messagechannel/sender.ts","../node_modules/@firebase/auth/src/platform_browser/auth_window.ts","../node_modules/@firebase/auth/src/platform_browser/util/worker.ts","../node_modules/@firebase/auth/src/platform_browser/persistence/indexed_db.ts","../node_modules/@firebase/auth/src/api/authentication/mfa.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_loader.ts","../node_modules/@firebase/auth/src/platform_browser/recaptcha/recaptcha_verifier.ts","../node_modules/@firebase/auth/src/platform_browser/strategies/phone.ts","../node_modules/@firebase/auth/src/platform_browser/providers/phone.ts","../node_modules/@firebase/auth/src/core/util/resolver.ts","../node_modules/@firebase/auth/src/core/strategies/idp.ts","../node_modules/@firebase/auth/src/core/strategies/abstract_popup_redirect_operation.ts","../node_modules/@firebase/auth/src/platform_browser/strategies/popup.ts","../node_modules/@firebase/auth/src/core/strategies/redirect.ts","../node_modules/@firebase/auth/src/platform_browser/strategies/redirect.ts","../node_modules/@firebase/auth/src/core/auth/auth_event_manager.ts","../node_modules/@firebase/auth/src/api/project_config/get_project_config.ts","../node_modules/@firebase/auth/src/core/util/validate_origin.ts","../node_modules/@firebase/auth/src/platform_browser/iframe/gapi.ts","../node_modules/@firebase/auth/src/platform_browser/iframe/iframe.ts","../node_modules/@firebase/auth/src/platform_browser/util/popup.ts","../node_modules/@firebase/auth/src/core/util/handler.ts","../node_modules/@firebase/auth/src/platform_browser/popup_redirect.ts","../node_modules/@firebase/auth/src/mfa/mfa_assertion.ts","../node_modules/@firebase/auth/src/platform_browser/mfa/assertions/phone.ts","../node_modules/@firebase/auth/src/mfa/assertions/totp.ts","../node_modules/@firebase/auth/src/core/auth/firebase_internal.ts","../node_modules/@firebase/auth/src/platform_browser/index.ts","../node_modules/@firebase/auth/src/core/auth/register.ts"],"sourcesContent":["import superPropBase from \"./superPropBase.js\";\nfunction _get() {\n  return _get = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {\n    var p = superPropBase(e, t);\n    if (p) {\n      var n = Object.getOwnPropertyDescriptor(p, t);\n      return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;\n    }\n  }, _get.apply(null, arguments);\n}\nexport { _get as default };","import getPrototypeOf from \"./getPrototypeOf.js\";\nfunction _superPropBase(t, o) {\n  for (; !{}.hasOwnProperty.call(t, o) && null !== (t = getPrototypeOf(t)););\n  return t;\n}\nexport { _superPropBase as default };","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An enum of factors that may be used for multifactor authentication.\n *\n * @public\n */\nexport const FactorId = {\n  /** Phone as second factor */\n  PHONE: 'phone',\n  TOTP: 'totp'\n} as const;\n\n/**\n * Enumeration of supported providers.\n *\n * @public\n */\nexport const ProviderId = {\n  /** Facebook provider ID */\n  FACEBOOK: 'facebook.com',\n  /** GitHub provider ID */\n  GITHUB: 'github.com',\n  /** Google provider ID */\n  GOOGLE: 'google.com',\n  /** Password provider */\n  PASSWORD: 'password',\n  /** Phone provider */\n  PHONE: 'phone',\n  /** Twitter provider ID */\n  TWITTER: 'twitter.com'\n} as const;\n\n/**\n * Enumeration of supported sign-in methods.\n *\n * @public\n */\nexport const SignInMethod = {\n  /** Email link sign in method */\n  EMAIL_LINK: 'emailLink',\n  /** Email/password sign in method */\n  EMAIL_PASSWORD: 'password',\n  /** Facebook sign in method */\n  FACEBOOK: 'facebook.com',\n  /** GitHub sign in method */\n  GITHUB: 'github.com',\n  /** Google sign in method */\n  GOOGLE: 'google.com',\n  /** Phone sign in method */\n  PHONE: 'phone',\n  /** Twitter sign in method */\n  TWITTER: 'twitter.com'\n} as const;\n\n/**\n * Enumeration of supported operation types.\n *\n * @public\n */\nexport const OperationType = {\n  /** Operation involving linking an additional provider to an already signed-in user. */\n  LINK: 'link',\n  /** Operation involving using a provider to reauthenticate an already signed-in user. */\n  REAUTHENTICATE: 'reauthenticate',\n  /** Operation involving signing in a user. */\n  SIGN_IN: 'signIn'\n} as const;\n\n/**\n * An enumeration of the possible email action types.\n *\n * @public\n */\nexport const ActionCodeOperation = {\n  /** The email link sign-in action. */\n  EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n  /** The password reset action. */\n  PASSWORD_RESET: 'PASSWORD_RESET',\n  /** The email revocation action. */\n  RECOVER_EMAIL: 'RECOVER_EMAIL',\n  /** The revert second factor addition email action. */\n  REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n  /** The revert second factor addition email action. */\n  VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n  /** The email verification action. */\n  VERIFY_EMAIL: 'VERIFY_EMAIL'\n} as const;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorMap, User } from '../model/public_types';\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { AppName } from '../model/auth';\nimport { AuthCredential } from './credentials';\n\n/**\n * Enumeration of Firebase Auth error codes.\n *\n * @internal\n */\nexport const enum AuthErrorCode {\n  ADMIN_ONLY_OPERATION = 'admin-restricted-operation',\n  ARGUMENT_ERROR = 'argument-error',\n  APP_NOT_AUTHORIZED = 'app-not-authorized',\n  APP_NOT_INSTALLED = 'app-not-installed',\n  CAPTCHA_CHECK_FAILED = 'captcha-check-failed',\n  CODE_EXPIRED = 'code-expired',\n  CORDOVA_NOT_READY = 'cordova-not-ready',\n  CORS_UNSUPPORTED = 'cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE = 'credential-already-in-use',\n  CREDENTIAL_MISMATCH = 'custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH = 'dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'email-change-needs-verification',\n  EMAIL_EXISTS = 'email-already-in-use',\n  EMULATOR_CONFIG_FAILED = 'emulator-config-failed',\n  EXPIRED_OOB_CODE = 'expired-action-code',\n  EXPIRED_POPUP_REQUEST = 'cancelled-popup-request',\n  INTERNAL_ERROR = 'internal-error',\n  INVALID_API_KEY = 'invalid-api-key',\n  INVALID_APP_CREDENTIAL = 'invalid-app-credential',\n  INVALID_APP_ID = 'invalid-app-id',\n  INVALID_AUTH = 'invalid-user-token',\n  INVALID_AUTH_EVENT = 'invalid-auth-event',\n  INVALID_CERT_HASH = 'invalid-cert-hash',\n  INVALID_CODE = 'invalid-verification-code',\n  INVALID_CONTINUE_URI = 'invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION = 'invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN = 'invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'invalid-dynamic-link-domain',\n  INVALID_EMAIL = 'invalid-email',\n  INVALID_EMULATOR_SCHEME = 'invalid-emulator-scheme',\n  INVALID_CREDENTIAL = 'invalid-credential',\n  INVALID_MESSAGE_PAYLOAD = 'invalid-message-payload',\n  INVALID_MFA_SESSION = 'invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID = 'invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER = 'invalid-oauth-provider',\n  INVALID_OOB_CODE = 'invalid-action-code',\n  INVALID_ORIGIN = 'unauthorized-domain',\n  INVALID_PASSWORD = 'wrong-password',\n  INVALID_PERSISTENCE = 'invalid-persistence-type',\n  INVALID_PHONE_NUMBER = 'invalid-phone-number',\n  INVALID_PROVIDER_ID = 'invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL = 'invalid-recipient-email',\n  INVALID_SENDER = 'invalid-sender',\n  INVALID_SESSION_INFO = 'invalid-verification-id',\n  INVALID_TENANT_ID = 'invalid-tenant-id',\n  LOGIN_BLOCKED = 'login-blocked',\n  MFA_INFO_NOT_FOUND = 'multi-factor-info-not-found',\n  MFA_REQUIRED = 'multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME = 'missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL = 'missing-app-credential',\n  MISSING_AUTH_DOMAIN = 'auth-domain-config-required',\n  MISSING_CODE = 'missing-verification-code',\n  MISSING_CONTINUE_URI = 'missing-continue-uri',\n  MISSING_IFRAME_START = 'missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID = 'missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE = 'missing-or-invalid-nonce',\n  MISSING_MFA_INFO = 'missing-multi-factor-info',\n  MISSING_MFA_SESSION = 'missing-multi-factor-session',\n  MISSING_PHONE_NUMBER = 'missing-phone-number',\n  MISSING_PASSWORD = 'missing-password',\n  MISSING_SESSION_INFO = 'missing-verification-id',\n  MODULE_DESTROYED = 'app-deleted',\n  NEED_CONFIRMATION = 'account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED = 'network-request-failed',\n  NULL_USER = 'null-user',\n  NO_AUTH_EVENT = 'no-auth-event',\n  NO_SUCH_PROVIDER = 'no-such-provider',\n  OPERATION_NOT_ALLOWED = 'operation-not-allowed',\n  OPERATION_NOT_SUPPORTED = 'operation-not-supported-in-this-environment',\n  POPUP_BLOCKED = 'popup-blocked',\n  POPUP_CLOSED_BY_USER = 'popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED = 'provider-already-linked',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER = 'redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING = 'redirect-operation-pending',\n  REJECTED_CREDENTIAL = 'rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED = 'second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH = 'tenant-id-mismatch',\n  TIMEOUT = 'timeout',\n  TOKEN_EXPIRED = 'user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'too-many-requests',\n  UNAUTHORIZED_DOMAIN = 'unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR = 'unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE = 'unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION = 'unsupported-tenant-operation',\n  UNVERIFIED_EMAIL = 'unverified-email',\n  USER_CANCELLED = 'user-cancelled',\n  USER_DELETED = 'user-not-found',\n  USER_DISABLED = 'user-disabled',\n  USER_MISMATCH = 'user-mismatch',\n  USER_SIGNED_OUT = 'user-signed-out',\n  WEAK_PASSWORD = 'weak-password',\n  WEB_STORAGE_UNSUPPORTED = 'web-storage-unsupported',\n  ALREADY_INITIALIZED = 'already-initialized',\n  RECAPTCHA_NOT_ENABLED = 'recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN = 'missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN = 'invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION = 'invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE = 'missing-client-type',\n  MISSING_RECAPTCHA_VERSION = 'missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION = 'invalid-recaptcha-version',\n  INVALID_REQ_TYPE = 'invalid-req-type',\n  UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION = 'unsupported-password-policy-schema-version',\n  PASSWORD_DOES_NOT_MEET_REQUIREMENTS = 'password-does-not-meet-requirements'\n}\n\nfunction _debugErrorMap(): ErrorMap<AuthErrorCode> {\n  return {\n    [AuthErrorCode.ADMIN_ONLY_OPERATION]:\n      'This operation is restricted to administrators only.',\n    [AuthErrorCode.ARGUMENT_ERROR]: '',\n    [AuthErrorCode.APP_NOT_AUTHORIZED]:\n      \"This app, identified by the domain where it's hosted, is not \" +\n      'authorized to use Firebase Authentication with the provided API key. ' +\n      'Review your key configuration in the Google API console.',\n    [AuthErrorCode.APP_NOT_INSTALLED]:\n      'The requested mobile application corresponding to the identifier (' +\n      'Android package name or iOS bundle ID) provided is not installed on ' +\n      'this device.',\n    [AuthErrorCode.CAPTCHA_CHECK_FAILED]:\n      'The reCAPTCHA response token provided is either invalid, expired, ' +\n      'already used or the domain associated with it does not match the list ' +\n      'of whitelisted domains.',\n    [AuthErrorCode.CODE_EXPIRED]:\n      'The SMS code has expired. Please re-send the verification code to try ' +\n      'again.',\n    [AuthErrorCode.CORDOVA_NOT_READY]: 'Cordova framework is not ready.',\n    [AuthErrorCode.CORS_UNSUPPORTED]: 'This browser is not supported.',\n    [AuthErrorCode.CREDENTIAL_ALREADY_IN_USE]:\n      'This credential is already associated with a different user account.',\n    [AuthErrorCode.CREDENTIAL_MISMATCH]:\n      'The custom token corresponds to a different audience.',\n    [AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n      'This operation is sensitive and requires recent authentication. Log in ' +\n      'again before retrying this request.',\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.',\n    [AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED]:\n      'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +\n      'conditions.',\n    [AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION]:\n      'Multi-factor users must always have a verified email.',\n    [AuthErrorCode.EMAIL_EXISTS]:\n      'The email address is already in use by another account.',\n    [AuthErrorCode.EMULATOR_CONFIG_FAILED]:\n      'Auth instance has already been used to make a network call. Auth can ' +\n      'no longer be configured to use the emulator. Try calling ' +\n      '\"connectAuthEmulator()\" sooner.',\n    [AuthErrorCode.EXPIRED_OOB_CODE]: 'The action code has expired.',\n    [AuthErrorCode.EXPIRED_POPUP_REQUEST]:\n      'This operation has been cancelled due to another conflicting popup being opened.',\n    [AuthErrorCode.INTERNAL_ERROR]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_APP_CREDENTIAL]:\n      'The phone verification request contains an invalid application verifier.' +\n      ' The reCAPTCHA token response is either invalid or expired.',\n    [AuthErrorCode.INVALID_APP_ID]:\n      'The mobile app identifier is not registered for the current project.',\n    [AuthErrorCode.INVALID_AUTH]:\n      \"This user's credential isn't valid for this project. This can happen \" +\n      \"if the user's token has been tampered with, or if the user isn't for \" +\n      'the project associated with this API key.',\n    [AuthErrorCode.INVALID_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.INVALID_CODE]:\n      'The SMS verification code used to create the phone auth credential is ' +\n      'invalid. Please resend the verification code sms and be sure to use the ' +\n      'verification code provided by the user.',\n    [AuthErrorCode.INVALID_CONTINUE_URI]:\n      'The continue URL provided in the request is invalid.',\n    [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]:\n      'The following Cordova plugins must be installed to enable OAuth sign-in: ' +\n      'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +\n      'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +\n      'cordova-plugin-customurlscheme.',\n    [AuthErrorCode.INVALID_CUSTOM_TOKEN]:\n      'The custom token format is incorrect. Please check the documentation.',\n    [AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN]:\n      'The provided dynamic link domain is not configured or authorized for the current project.',\n    [AuthErrorCode.INVALID_EMAIL]: 'The email address is badly formatted.',\n    [AuthErrorCode.INVALID_EMULATOR_SCHEME]:\n      'Emulator URL must start with a valid scheme (http:// or https://).',\n    [AuthErrorCode.INVALID_API_KEY]:\n      'Your API key is invalid, please check you have copied it correctly.',\n    [AuthErrorCode.INVALID_CERT_HASH]:\n      'The SHA-1 certificate hash provided is invalid.',\n    [AuthErrorCode.INVALID_CREDENTIAL]:\n      'The supplied auth credential is incorrect, malformed or has expired.',\n    [AuthErrorCode.INVALID_MESSAGE_PAYLOAD]:\n      'The email template corresponding to this action contains invalid characters in its message. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_MFA_SESSION]:\n      'The request does not contain a valid proof of first factor successful sign-in.',\n    [AuthErrorCode.INVALID_OAUTH_PROVIDER]:\n      'EmailAuthProvider is not supported for this operation. This operation ' +\n      'only supports OAuth providers.',\n    [AuthErrorCode.INVALID_OAUTH_CLIENT_ID]:\n      'The OAuth client ID provided is either invalid or does not match the ' +\n      'specified API key.',\n    [AuthErrorCode.INVALID_ORIGIN]:\n      'This domain is not authorized for OAuth operations for your Firebase ' +\n      'project. Edit the list of authorized domains from the Firebase console.',\n    [AuthErrorCode.INVALID_OOB_CODE]:\n      'The action code is invalid. This can happen if the code is malformed, ' +\n      'expired, or has already been used.',\n    [AuthErrorCode.INVALID_PASSWORD]:\n      'The password is invalid or the user does not have a password.',\n    [AuthErrorCode.INVALID_PERSISTENCE]:\n      'The specified persistence type is invalid. It can only be local, session or none.',\n    [AuthErrorCode.INVALID_PHONE_NUMBER]:\n      'The format of the phone number provided is incorrect. Please enter the ' +\n      'phone number in a format that can be parsed into E.164 format. E.164 ' +\n      'phone numbers are written in the format [+][country code][subscriber ' +\n      'number including area code].',\n    [AuthErrorCode.INVALID_PROVIDER_ID]:\n      'The specified provider ID is invalid.',\n    [AuthErrorCode.INVALID_RECIPIENT_EMAIL]:\n      'The email corresponding to this action failed to send as the provided ' +\n      'recipient email address is invalid.',\n    [AuthErrorCode.INVALID_SENDER]:\n      'The email template corresponding to this action contains an invalid sender email or name. ' +\n      'Please fix by going to the Auth email templates section in the Firebase Console.',\n    [AuthErrorCode.INVALID_SESSION_INFO]:\n      'The verification ID used to create the phone auth credential is invalid.',\n    [AuthErrorCode.INVALID_TENANT_ID]:\n      \"The Auth instance's tenant ID is invalid.\",\n    [AuthErrorCode.LOGIN_BLOCKED]:\n      'Login blocked by user-provided method: {$originalMessage}',\n    [AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME]:\n      'An Android Package Name must be provided if the Android App is required to be installed.',\n    [AuthErrorCode.MISSING_AUTH_DOMAIN]:\n      'Be sure to include authDomain when calling firebase.initializeApp(), ' +\n      'by following the instructions in the Firebase console.',\n    [AuthErrorCode.MISSING_APP_CREDENTIAL]:\n      'The phone verification request is missing an application verifier ' +\n      'assertion. A reCAPTCHA response token needs to be provided.',\n    [AuthErrorCode.MISSING_CODE]:\n      'The phone auth credential was created with an empty SMS verification code.',\n    [AuthErrorCode.MISSING_CONTINUE_URI]:\n      'A continue URL must be provided in the request.',\n    [AuthErrorCode.MISSING_IFRAME_START]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.MISSING_IOS_BUNDLE_ID]:\n      'An iOS Bundle ID must be provided if an App Store ID is provided.',\n    [AuthErrorCode.MISSING_OR_INVALID_NONCE]:\n      'The request does not contain a valid nonce. This can occur if the ' +\n      'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +\n      'in the ID token payload.',\n    [AuthErrorCode.MISSING_PASSWORD]: 'A non-empty password must be provided',\n    [AuthErrorCode.MISSING_MFA_INFO]:\n      'No second factor identifier is provided.',\n    [AuthErrorCode.MISSING_MFA_SESSION]:\n      'The request is missing proof of first factor successful sign-in.',\n    [AuthErrorCode.MISSING_PHONE_NUMBER]:\n      'To send verification codes, provide a phone number for the recipient.',\n    [AuthErrorCode.MISSING_SESSION_INFO]:\n      'The phone auth credential was created with an empty verification ID.',\n    [AuthErrorCode.MODULE_DESTROYED]:\n      'This instance of FirebaseApp has been deleted.',\n    [AuthErrorCode.MFA_INFO_NOT_FOUND]:\n      'The user does not have a second factor matching the identifier provided.',\n    [AuthErrorCode.MFA_REQUIRED]:\n      'Proof of ownership of a second factor is required to complete sign-in.',\n    [AuthErrorCode.NEED_CONFIRMATION]:\n      'An account already exists with the same email address but different ' +\n      'sign-in credentials. Sign in using a provider associated with this ' +\n      'email address.',\n    [AuthErrorCode.NETWORK_REQUEST_FAILED]:\n      'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',\n    [AuthErrorCode.NO_AUTH_EVENT]: 'An internal AuthError has occurred.',\n    [AuthErrorCode.NO_SUCH_PROVIDER]:\n      'User was not linked to an account with the given provider.',\n    [AuthErrorCode.NULL_USER]:\n      'A null user object was provided as the argument for an operation which ' +\n      'requires a non-null user object.',\n    [AuthErrorCode.OPERATION_NOT_ALLOWED]:\n      'The given sign-in provider is disabled for this Firebase project. ' +\n      'Enable it in the Firebase console, under the sign-in method tab of the ' +\n      'Auth section.',\n    [AuthErrorCode.OPERATION_NOT_SUPPORTED]:\n      'This operation is not supported in the environment this application is ' +\n      'running on. \"location.protocol\" must be http, https or chrome-extension' +\n      ' and web storage must be enabled.',\n    [AuthErrorCode.POPUP_BLOCKED]:\n      'Unable to establish a connection with the popup. It may have been blocked by the browser.',\n    [AuthErrorCode.POPUP_CLOSED_BY_USER]:\n      'The popup has been closed by the user before finalizing the operation.',\n    [AuthErrorCode.PROVIDER_ALREADY_LINKED]:\n      'User can only be linked to one identity for the given provider.',\n    [AuthErrorCode.QUOTA_EXCEEDED]:\n      \"The project's quota for this operation has been exceeded.\",\n    [AuthErrorCode.REDIRECT_CANCELLED_BY_USER]:\n      'The redirect operation has been cancelled by the user before finalizing.',\n    [AuthErrorCode.REDIRECT_OPERATION_PENDING]:\n      'A redirect sign-in operation is already pending.',\n    [AuthErrorCode.REJECTED_CREDENTIAL]:\n      'The request contains malformed or mismatching credentials.',\n    [AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED]:\n      'The second factor is already enrolled on this account.',\n    [AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED]:\n      'The maximum allowed number of second factors on a user has been exceeded.',\n    [AuthErrorCode.TENANT_ID_MISMATCH]:\n      \"The provided tenant ID does not match the Auth instance's tenant ID\",\n    [AuthErrorCode.TIMEOUT]: 'The operation has timed out.',\n    [AuthErrorCode.TOKEN_EXPIRED]:\n      \"The user's credential is no longer valid. The user must sign in again.\",\n    [AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER]:\n      'We have blocked all requests from this device due to unusual activity. ' +\n      'Try again later.',\n    [AuthErrorCode.UNAUTHORIZED_DOMAIN]:\n      'The domain of the continue URL is not whitelisted.  Please whitelist ' +\n      'the domain in the Firebase console.',\n    [AuthErrorCode.UNSUPPORTED_FIRST_FACTOR]:\n      'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',\n    [AuthErrorCode.UNSUPPORTED_PERSISTENCE]:\n      'The current environment does not support the specified persistence type.',\n    [AuthErrorCode.UNSUPPORTED_TENANT_OPERATION]:\n      'This operation is not supported in a multi-tenant context.',\n    [AuthErrorCode.UNVERIFIED_EMAIL]:\n      'The operation requires a verified email.',\n    [AuthErrorCode.USER_CANCELLED]:\n      'The user did not grant your application the permissions it requested.',\n    [AuthErrorCode.USER_DELETED]:\n      'There is no user record corresponding to this identifier. The user may ' +\n      'have been deleted.',\n    [AuthErrorCode.USER_DISABLED]:\n      'The user account has been disabled by an administrator.',\n    [AuthErrorCode.USER_MISMATCH]:\n      'The supplied credentials do not correspond to the previously signed in user.',\n    [AuthErrorCode.USER_SIGNED_OUT]: '',\n    [AuthErrorCode.WEAK_PASSWORD]:\n      'The password must be 6 characters long or more.',\n    [AuthErrorCode.WEB_STORAGE_UNSUPPORTED]:\n      'This browser is not supported or 3rd party cookies and data may be disabled.',\n    [AuthErrorCode.ALREADY_INITIALIZED]:\n      'initializeAuth() has already been called with ' +\n      'different options. To avoid this error, call initializeAuth() with the ' +\n      'same options as when it was originally called, or call getAuth() to return the' +\n      ' already initialized instance.',\n    [AuthErrorCode.MISSING_RECAPTCHA_TOKEN]:\n      'The reCAPTCHA token is missing when sending request to the backend.',\n    [AuthErrorCode.INVALID_RECAPTCHA_TOKEN]:\n      'The reCAPTCHA token is invalid when sending request to the backend.',\n    [AuthErrorCode.INVALID_RECAPTCHA_ACTION]:\n      'The reCAPTCHA action is invalid when sending request to the backend.',\n    [AuthErrorCode.RECAPTCHA_NOT_ENABLED]:\n      'reCAPTCHA Enterprise integration is not enabled for this project.',\n    [AuthErrorCode.MISSING_CLIENT_TYPE]:\n      'The reCAPTCHA client type is missing when sending request to the backend.',\n    [AuthErrorCode.MISSING_RECAPTCHA_VERSION]:\n      'The reCAPTCHA version is missing when sending request to the backend.',\n    [AuthErrorCode.INVALID_REQ_TYPE]: 'Invalid request parameters.',\n    [AuthErrorCode.INVALID_RECAPTCHA_VERSION]:\n      'The reCAPTCHA version is invalid when sending request to the backend.',\n    [AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION]:\n      'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',\n    [AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS]:\n      'The password does not meet the requirements.'\n  };\n}\n\nexport interface ErrorMapRetriever extends AuthErrorMap {\n  (): ErrorMap<AuthErrorCode>;\n}\n\nfunction _prodErrorMap(): ErrorMap<AuthErrorCode> {\n  // We will include this one message in the prod error map since by the very\n  // nature of this error, developers will never be able to see the message\n  // using the debugErrorMap (which is installed during auth initialization).\n  return {\n    [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]:\n      'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +\n      'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +\n      'starting any other Firebase SDK.'\n  } as ErrorMap<AuthErrorCode>;\n}\n\n/**\n * A verbose error map with detailed descriptions for most error codes.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const debugErrorMap: AuthErrorMap = _debugErrorMap;\n\n/**\n * A minimal error map with all verbose error messages stripped.\n *\n * See discussion at {@link AuthErrorMap}\n *\n * @public\n */\nexport const prodErrorMap: AuthErrorMap = _prodErrorMap;\n\nexport interface NamedErrorParams {\n  appName: AppName;\n  credential?: AuthCredential;\n  email?: string;\n  phoneNumber?: string;\n  tenantId?: string;\n  user?: User;\n  _serverResponse?: object;\n}\n\n/**\n * @internal\n */\ntype GenericAuthErrorParams = {\n  [key in Exclude<\n    AuthErrorCode,\n    | AuthErrorCode.ARGUMENT_ERROR\n    | AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    | AuthErrorCode.INTERNAL_ERROR\n    | AuthErrorCode.MFA_REQUIRED\n    | AuthErrorCode.NO_AUTH_EVENT\n    | AuthErrorCode.OPERATION_NOT_SUPPORTED\n  >]: {\n    appName?: AppName;\n    email?: string;\n    phoneNumber?: string;\n    message?: string;\n  };\n};\n\n/**\n * @internal\n */\nexport interface AuthErrorParams extends GenericAuthErrorParams {\n  [AuthErrorCode.ARGUMENT_ERROR]: { appName?: AppName };\n  [AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH]: { appName?: AppName };\n  [AuthErrorCode.INTERNAL_ERROR]: { appName?: AppName };\n  [AuthErrorCode.LOGIN_BLOCKED]: {\n    appName?: AppName;\n    originalMessage?: string;\n  };\n  [AuthErrorCode.OPERATION_NOT_SUPPORTED]: { appName?: AppName };\n  [AuthErrorCode.NO_AUTH_EVENT]: { appName?: AppName };\n  [AuthErrorCode.MFA_REQUIRED]: {\n    appName: AppName;\n    _serverResponse: IdTokenMfaResponse;\n  };\n  [AuthErrorCode.INVALID_CORDOVA_CONFIGURATION]: {\n    appName: AppName;\n    missingPlugin?: string;\n  };\n}\n\nexport const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory<\n  AuthErrorCode,\n  AuthErrorParams\n>('auth', 'Firebase', _prodErrorMap());\n\n/**\n * A map of potential `Auth` error codes, for easier comparison with errors\n * thrown by the SDK.\n *\n * @remarks\n * Note that you can't tree-shake individual keys\n * in the map, so by using the map you might substantially increase your\n * bundle size.\n *\n * @public\n */\nexport const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n  ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n  ARGUMENT_ERROR: 'auth/argument-error',\n  APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n  APP_NOT_INSTALLED: 'auth/app-not-installed',\n  CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n  CODE_EXPIRED: 'auth/code-expired',\n  CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n  CORS_UNSUPPORTED: 'auth/cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n  CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n  EMAIL_EXISTS: 'auth/email-already-in-use',\n  EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n  EXPIRED_OOB_CODE: 'auth/expired-action-code',\n  EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n  INTERNAL_ERROR: 'auth/internal-error',\n  INVALID_API_KEY: 'auth/invalid-api-key',\n  INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n  INVALID_APP_ID: 'auth/invalid-app-id',\n  INVALID_AUTH: 'auth/invalid-user-token',\n  INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n  INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n  INVALID_CODE: 'auth/invalid-verification-code',\n  INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n  INVALID_EMAIL: 'auth/invalid-email',\n  INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n  INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n  INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n  INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n  INVALID_OOB_CODE: 'auth/invalid-action-code',\n  INVALID_ORIGIN: 'auth/unauthorized-domain',\n  INVALID_PASSWORD: 'auth/wrong-password',\n  INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n  INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n  INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n  INVALID_SENDER: 'auth/invalid-sender',\n  INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n  INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n  MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n  MFA_REQUIRED: 'auth/multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n  MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n  MISSING_CODE: 'auth/missing-verification-code',\n  MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n  MISSING_IFRAME_START: 'auth/missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n  MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n  MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n  MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n  MISSING_SESSION_INFO: 'auth/missing-verification-id',\n  MODULE_DESTROYED: 'auth/app-deleted',\n  NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n  NULL_USER: 'auth/null-user',\n  NO_AUTH_EVENT: 'auth/no-auth-event',\n  NO_SUCH_PROVIDER: 'auth/no-such-provider',\n  OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n  OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n  POPUP_BLOCKED: 'auth/popup-blocked',\n  POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n  QUOTA_EXCEEDED: 'auth/quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n  REJECTED_CREDENTIAL: 'auth/rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n  TIMEOUT: 'auth/timeout',\n  TOKEN_EXPIRED: 'auth/user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n  UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n  UNVERIFIED_EMAIL: 'auth/unverified-email',\n  USER_CANCELLED: 'auth/user-cancelled',\n  USER_DELETED: 'auth/user-not-found',\n  USER_DISABLED: 'auth/user-disabled',\n  USER_MISMATCH: 'auth/user-mismatch',\n  USER_SIGNED_OUT: 'auth/user-signed-out',\n  WEAK_PASSWORD: 'auth/weak-password',\n  WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n  ALREADY_INITIALIZED: 'auth/already-initialized',\n  RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n  MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n  INVALID_REQ_TYPE: 'auth/invalid-req-type'\n} as const;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SDK_VERSION } from '@firebase/app';\n\nexport { LogLevel };\n\nconst logClient = new Logger('@firebase/auth');\n\n// Helper methods are needed because variables can't be exported as read/write\nexport function _getLogLevel(): LogLevel {\n  return logClient.logLevel;\n}\n\nexport function _setLogLevel(newLevel: LogLevel): void {\n  logClient.logLevel = newLevel;\n}\n\nexport function _logDebug(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    logClient.debug(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function _logWarn(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    logClient.warn(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n\nexport function _logError(msg: string, ...args: string[]): void {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth } from '../../model/public_types';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  _DEFAULT_AUTH_ERROR_FACTORY,\n  AuthErrorCode,\n  AuthErrorParams,\n  prodErrorMap,\n  ErrorMapRetriever\n} from '../errors';\nimport { _logError } from './log';\n\ntype AuthErrorListParams<K> = K extends keyof AuthErrorParams\n  ? [AuthErrorParams[K]]\n  : [];\ntype LessAppName<K extends AuthErrorCode> = Omit<AuthErrorParams[K], 'appName'>;\n\n/**\n * Unconditionally fails, throwing a developer facing INTERNAL_ERROR\n *\n * @example\n * ```javascript\n * fail(auth, AuthErrorCode.MFA_REQUIRED);  // Error: the MFA_REQUIRED error needs more params than appName\n * fail(auth, AuthErrorCode.MFA_REQUIRED, {serverResponse});  // Compiles\n * fail(AuthErrorCode.INTERNAL_ERROR);  // Compiles; internal error does not need appName\n * fail(AuthErrorCode.USER_DELETED);  // Error: USER_DELETED requires app name\n * fail(auth, AuthErrorCode.USER_DELETED);  // Compiles; USER_DELETED _only_ needs app name\n * ```\n *\n * @param appName App name for tagging the error\n * @throws FirebaseError\n */\nexport function _fail<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): never;\nexport function _fail<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): never {\n  throw createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _createError<K extends AuthErrorCode>(\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): FirebaseError;\nexport function _createError<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  return createErrorInternal(authOrCode, ...rest);\n}\n\nexport function _errorWithCustomMessage(\n  auth: Auth,\n  code: AuthErrorCode,\n  message: string\n): FirebaseError {\n  const errorMap = {\n    ...(prodErrorMap as ErrorMapRetriever)(),\n    [code]: message\n  };\n  const factory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n    'auth',\n    'Firebase',\n    errorMap\n  );\n  return factory.create(code, {\n    appName: auth.name\n  });\n}\n\nexport function _serverAppCurrentUserOperationNotSupportedError(\n  auth: Auth\n): FirebaseError {\n  return _errorWithCustomMessage(\n    auth,\n    AuthErrorCode.OPERATION_NOT_SUPPORTED,\n    'Operations that alter the current user are not supported in conjunction with FirebaseServerApp'\n  );\n}\n\nexport function _assertInstanceOf(\n  auth: Auth,\n  object: object,\n  instance: unknown\n): void {\n  const constructorInstance = instance as { new (...args: unknown[]): unknown };\n  if (!(object instanceof constructorInstance)) {\n    if (constructorInstance.name !== object.constructor.name) {\n      _fail(auth, AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    throw _errorWithCustomMessage(\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR,\n      `Type of ${object.constructor.name} does not match expected instance.` +\n        `Did you pass a reference from a different Auth SDK?`\n    );\n  }\n}\n\nfunction createErrorInternal<K extends AuthErrorCode>(\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): FirebaseError {\n  if (typeof authOrCode !== 'string') {\n    const code = rest[0] as K;\n    const fullParams = [...rest.slice(1)] as AuthErrorListParams<K>;\n    if (fullParams[0]) {\n      fullParams[0].appName = authOrCode.name;\n    }\n\n    return (authOrCode as AuthInternal)._errorFactory.create(\n      code,\n      ...fullParams\n    );\n  }\n\n  return _DEFAULT_AUTH_ERROR_FACTORY.create(\n    authOrCode,\n    ...(rest as AuthErrorListParams<K>)\n  );\n}\n\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  code: K,\n  ...data: {} extends AuthErrorParams[K]\n    ? [AuthErrorParams[K]?]\n    : [AuthErrorParams[K]]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  auth: Auth,\n  code: K,\n  ...data: {} extends LessAppName<K> ? [LessAppName<K>?] : [LessAppName<K>]\n): asserts assertion;\nexport function _assert<K extends AuthErrorCode>(\n  assertion: unknown,\n  authOrCode: Auth | K,\n  ...rest: unknown[]\n): asserts assertion {\n  if (!assertion) {\n    throw createErrorInternal(authOrCode, ...rest);\n  }\n}\n\n// We really do want to accept literally any function type here\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype TypeExpectation = Function | string | MapType;\n\ninterface MapType extends Record<string, TypeExpectation | Optional> {}\n\nclass Optional {\n  constructor(readonly type: TypeExpectation) {}\n}\n\nexport function opt(type: TypeExpectation): Optional {\n  return new Optional(type);\n}\n\n/**\n * Asserts the runtime types of arguments. The 'expected' field can be one of\n * a class, a string (representing a \"typeof\" call), or a record map of name\n * to type. Furthermore, the opt() function can be used to mark a field as\n * optional. For example:\n *\n * function foo(auth: Auth, profile: {displayName?: string}, update = false) {\n *   assertTypes(arguments, [AuthImpl, {displayName: opt('string')}, opt('boolean')]);\n * }\n *\n * opt() can be used for any type:\n * function foo(auth?: Auth) {\n *   assertTypes(arguments, [opt(AuthImpl)]);\n * }\n *\n * The string types can be or'd together, and you can use \"null\" as well (note\n * that typeof null === 'object'; this is an edge case). For example:\n *\n * function foo(profile: {displayName?: string | null}) {\n *   assertTypes(arguments, [{displayName: opt('string|null')}]);\n * }\n *\n * @param args\n * @param expected\n */\nexport function assertTypes(\n  args: Omit<IArguments, 'callee'>,\n  ...expected: Array<TypeExpectation | Optional>\n): void {\n  if (args.length > expected.length) {\n    _fail(AuthErrorCode.ARGUMENT_ERROR, {});\n  }\n\n  for (let i = 0; i < expected.length; i++) {\n    let expect = expected[i];\n    const arg = args[i];\n\n    if (expect instanceof Optional) {\n      // If the arg is undefined, then it matches \"optional\" and we can move to\n      // the next arg\n      if (typeof arg === 'undefined') {\n        continue;\n      }\n      expect = expect.type;\n    }\n\n    if (typeof expect === 'string') {\n      // Handle the edge case for null because typeof null === 'object'\n      if (expect.includes('null') && arg === null) {\n        continue;\n      }\n\n      const required = expect.split('|');\n      _assert(required.includes(typeof arg), AuthErrorCode.ARGUMENT_ERROR, {});\n    } else if (typeof expect === 'object') {\n      // Recursively check record arguments\n      const record = arg as Record<string, unknown>;\n      const map = expect as MapType;\n      const keys = Object.keys(expect);\n\n      assertTypes(\n        keys.map(k => record[k]),\n        ...keys.map(k => map[k])\n      );\n    } else {\n      _assert(arg instanceof expect, AuthErrorCode.ARGUMENT_ERROR, {});\n    }\n  }\n}\n\n/**\n * Unconditionally fails, throwing an internal error with the given message.\n *\n * @param failure type of failure encountered\n * @throws Error\n */\nexport function debugFail(failure: string): never {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message = `INTERNAL ASSERTION FAILED: ` + failure;\n  _logError(message);\n\n  // NOTE: We don't use FirebaseError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * @param assertion\n * @param message\n */\nexport function debugAssert(\n  assertion: unknown,\n  message: string\n): asserts assertion {\n  if (!assertion) {\n    debugFail(message);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function _getCurrentUrl(): string {\n  return (typeof self !== 'undefined' && self.location?.href) || '';\n}\n\nexport function _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\nexport function _getCurrentScheme(): string | null {\n  return (typeof self !== 'undefined' && self.location?.protocol) || null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isMobileCordova, isReactNative } from '@firebase/util';\nimport { _isOnline } from './navigator';\nimport { debugAssert } from './assert';\n\nexport const enum DelayMin {\n  OFFLINE = 5000\n}\n\n/**\n * A structure to help pick between a range of long and short delay durations\n * depending on the current environment. In general, the long delay is used for\n * mobile environments whereas short delays are used for desktop environments.\n */\nexport class Delay {\n  // The default value for the offline delay timeout in ms.\n\n  private readonly isMobile: boolean;\n  constructor(\n    private readonly shortDelay: number,\n    private readonly longDelay: number\n  ) {\n    // Internal error when improperly initialized.\n    debugAssert(\n      longDelay > shortDelay,\n      'Short delay should be less than long delay!'\n    );\n    this.isMobile = isMobileCordova() || isReactNative();\n  }\n\n  get(): number {\n    if (!_isOnline()) {\n      // Pick the shorter timeout.\n      return Math.min(DelayMin.OFFLINE, this.shortDelay);\n    }\n    // If running in a mobile environment, return the long delay, otherwise\n    // return the short delay.\n    // This could be improved in the future to dynamically change based on other\n    // variables instead of just reading the current environment.\n    return this.isMobile ? this.longDelay : this.shortDelay;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isBrowserExtension } from '@firebase/util';\nimport { _isHttpOrHttps } from './location';\n\n/**\n * Determine whether the browser is working online\n */\nexport function _isOnline(): boolean {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator &&\n    'onLine' in navigator &&\n    typeof navigator.onLine === 'boolean' &&\n    // Apply only for traditional web apps and Chrome extensions.\n    // This is especially true for Cordova apps which have unreliable\n    // navigator.onLine behavior unless cordova-plugin-network-information is\n    // installed which overwrites the native navigator.onLine value and\n    // defines navigator.connection.\n    (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)\n  ) {\n    return navigator.onLine;\n  }\n  // If we can't determine the state, assume it is online.\n  return true;\n}\n\nexport function _getUserLanguage(): string | null {\n  if (typeof navigator === 'undefined') {\n    return null;\n  }\n  const navigatorLanguage: NavigatorLanguage = navigator;\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language ||\n    // Couldn't determine language.\n    null\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConfigInternal } from '../../model/auth';\nimport { debugAssert } from './assert';\n\nexport function _emulatorUrl(config: ConfigInternal, path?: string): string {\n  debugAssert(config.emulator, 'Emulator should always be set here');\n  const { url } = config.emulator;\n\n  if (!path) {\n    return url;\n  }\n\n  return `${url}${path.startsWith('/') ? path.slice(1) : path}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugFail } from './assert';\n\nexport class FetchProvider {\n  private static fetchImpl: typeof fetch | null;\n  private static headersImpl: typeof Headers | null;\n  private static responseImpl: typeof Response | null;\n\n  static initialize(\n    fetchImpl: typeof fetch,\n    headersImpl?: typeof Headers,\n    responseImpl?: typeof Response\n  ): void {\n    this.fetchImpl = fetchImpl;\n    if (headersImpl) {\n      this.headersImpl = headersImpl;\n    }\n    if (responseImpl) {\n      this.responseImpl = responseImpl;\n    }\n  }\n\n  static fetch(): typeof fetch {\n    if (this.fetchImpl) {\n      return this.fetchImpl;\n    }\n    if (typeof self !== 'undefined' && 'fetch' in self) {\n      return self.fetch;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n      return globalThis.fetch;\n    }\n    if (typeof fetch !== 'undefined') {\n      return fetch;\n    }\n    debugFail(\n      'Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static headers(): typeof Headers {\n    if (this.headersImpl) {\n      return this.headersImpl;\n    }\n    if (typeof self !== 'undefined' && 'Headers' in self) {\n      return self.Headers;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n      return globalThis.Headers;\n    }\n    if (typeof Headers !== 'undefined') {\n      return Headers;\n    }\n    debugFail(\n      'Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n\n  static response(): typeof Response {\n    if (this.responseImpl) {\n      return this.responseImpl;\n    }\n    if (typeof self !== 'undefined' && 'Response' in self) {\n      return self.Response;\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.Response) {\n      return globalThis.Response;\n    }\n    if (typeof Response !== 'undefined') {\n      return Response;\n    }\n    debugFail(\n      'Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../core/errors';\n\n/**\n * Errors that can be returned by the backend\n */\nexport const enum ServerError {\n  ADMIN_ONLY_OPERATION = 'ADMIN_ONLY_OPERATION',\n  BLOCKING_FUNCTION_ERROR_RESPONSE = 'BLOCKING_FUNCTION_ERROR_RESPONSE',\n  CAPTCHA_CHECK_FAILED = 'CAPTCHA_CHECK_FAILED',\n  CORS_UNSUPPORTED = 'CORS_UNSUPPORTED',\n  CREDENTIAL_MISMATCH = 'CREDENTIAL_MISMATCH',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN = 'CREDENTIAL_TOO_OLD_LOGIN_AGAIN',\n  DYNAMIC_LINK_NOT_ACTIVATED = 'DYNAMIC_LINK_NOT_ACTIVATED',\n  EMAIL_CHANGE_NEEDS_VERIFICATION = 'EMAIL_CHANGE_NEEDS_VERIFICATION',\n  EMAIL_EXISTS = 'EMAIL_EXISTS',\n  EMAIL_NOT_FOUND = 'EMAIL_NOT_FOUND',\n  EXPIRED_OOB_CODE = 'EXPIRED_OOB_CODE',\n  FEDERATED_USER_ID_ALREADY_LINKED = 'FEDERATED_USER_ID_ALREADY_LINKED',\n  INVALID_APP_CREDENTIAL = 'INVALID_APP_CREDENTIAL',\n  INVALID_APP_ID = 'INVALID_APP_ID',\n  INVALID_CERT_HASH = 'INVALID_CERT_HASH',\n  INVALID_CODE = 'INVALID_CODE',\n  INVALID_CONTINUE_URI = 'INVALID_CONTINUE_URI',\n  INVALID_CUSTOM_TOKEN = 'INVALID_CUSTOM_TOKEN',\n  INVALID_DYNAMIC_LINK_DOMAIN = 'INVALID_DYNAMIC_LINK_DOMAIN',\n  INVALID_EMAIL = 'INVALID_EMAIL',\n  INVALID_ID_TOKEN = 'INVALID_ID_TOKEN',\n  INVALID_IDP_RESPONSE = 'INVALID_IDP_RESPONSE',\n  INVALID_IDENTIFIER = 'INVALID_IDENTIFIER',\n  INVALID_LOGIN_CREDENTIALS = 'INVALID_LOGIN_CREDENTIALS',\n  INVALID_MESSAGE_PAYLOAD = 'INVALID_MESSAGE_PAYLOAD',\n  INVALID_MFA_PENDING_CREDENTIAL = 'INVALID_MFA_PENDING_CREDENTIAL',\n  INVALID_OAUTH_CLIENT_ID = 'INVALID_OAUTH_CLIENT_ID',\n  INVALID_OOB_CODE = 'INVALID_OOB_CODE',\n  INVALID_PASSWORD = 'INVALID_PASSWORD',\n  INVALID_PENDING_TOKEN = 'INVALID_PENDING_TOKEN',\n  INVALID_PHONE_NUMBER = 'INVALID_PHONE_NUMBER',\n  INVALID_PROVIDER_ID = 'INVALID_PROVIDER_ID',\n  INVALID_RECIPIENT_EMAIL = 'INVALID_RECIPIENT_EMAIL',\n  INVALID_SENDER = 'INVALID_SENDER',\n  INVALID_SESSION_INFO = 'INVALID_SESSION_INFO',\n  INVALID_TEMPORARY_PROOF = 'INVALID_TEMPORARY_PROOF',\n  INVALID_TENANT_ID = 'INVALID_TENANT_ID',\n  MFA_ENROLLMENT_NOT_FOUND = 'MFA_ENROLLMENT_NOT_FOUND',\n  MISSING_ANDROID_PACKAGE_NAME = 'MISSING_ANDROID_PACKAGE_NAME',\n  MISSING_APP_CREDENTIAL = 'MISSING_APP_CREDENTIAL',\n  MISSING_CODE = 'MISSING_CODE',\n  MISSING_CONTINUE_URI = 'MISSING_CONTINUE_URI',\n  MISSING_CUSTOM_TOKEN = 'MISSING_CUSTOM_TOKEN',\n  MISSING_IOS_BUNDLE_ID = 'MISSING_IOS_BUNDLE_ID',\n  MISSING_MFA_ENROLLMENT_ID = 'MISSING_MFA_ENROLLMENT_ID',\n  MISSING_MFA_PENDING_CREDENTIAL = 'MISSING_MFA_PENDING_CREDENTIAL',\n  MISSING_OOB_CODE = 'MISSING_OOB_CODE',\n  MISSING_OR_INVALID_NONCE = 'MISSING_OR_INVALID_NONCE',\n  MISSING_PASSWORD = 'MISSING_PASSWORD',\n  MISSING_REQ_TYPE = 'MISSING_REQ_TYPE',\n  MISSING_PHONE_NUMBER = 'MISSING_PHONE_NUMBER',\n  MISSING_SESSION_INFO = 'MISSING_SESSION_INFO',\n  OPERATION_NOT_ALLOWED = 'OPERATION_NOT_ALLOWED',\n  PASSWORD_LOGIN_DISABLED = 'PASSWORD_LOGIN_DISABLED',\n  QUOTA_EXCEEDED = 'QUOTA_EXCEEDED',\n  RESET_PASSWORD_EXCEED_LIMIT = 'RESET_PASSWORD_EXCEED_LIMIT',\n  REJECTED_CREDENTIAL = 'REJECTED_CREDENTIAL',\n  SECOND_FACTOR_EXISTS = 'SECOND_FACTOR_EXISTS',\n  SECOND_FACTOR_LIMIT_EXCEEDED = 'SECOND_FACTOR_LIMIT_EXCEEDED',\n  SESSION_EXPIRED = 'SESSION_EXPIRED',\n  TENANT_ID_MISMATCH = 'TENANT_ID_MISMATCH',\n  TOKEN_EXPIRED = 'TOKEN_EXPIRED',\n  TOO_MANY_ATTEMPTS_TRY_LATER = 'TOO_MANY_ATTEMPTS_TRY_LATER',\n  UNSUPPORTED_FIRST_FACTOR = 'UNSUPPORTED_FIRST_FACTOR',\n  UNSUPPORTED_TENANT_OPERATION = 'UNSUPPORTED_TENANT_OPERATION',\n  UNAUTHORIZED_DOMAIN = 'UNAUTHORIZED_DOMAIN',\n  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',\n  USER_CANCELLED = 'USER_CANCELLED',\n  USER_DISABLED = 'USER_DISABLED',\n  USER_NOT_FOUND = 'USER_NOT_FOUND',\n  WEAK_PASSWORD = 'WEAK_PASSWORD',\n  RECAPTCHA_NOT_ENABLED = 'RECAPTCHA_NOT_ENABLED',\n  MISSING_RECAPTCHA_TOKEN = 'MISSING_RECAPTCHA_TOKEN',\n  INVALID_RECAPTCHA_TOKEN = 'INVALID_RECAPTCHA_TOKEN',\n  INVALID_RECAPTCHA_ACTION = 'INVALID_RECAPTCHA_ACTION',\n  MISSING_CLIENT_TYPE = 'MISSING_CLIENT_TYPE',\n  MISSING_RECAPTCHA_VERSION = 'MISSING_RECAPTCHA_VERSION',\n  INVALID_RECAPTCHA_VERSION = 'INVALID_RECAPTCHA_VERSION',\n  INVALID_REQ_TYPE = 'INVALID_REQ_TYPE',\n  PASSWORD_DOES_NOT_MEET_REQUIREMENTS = 'PASSWORD_DOES_NOT_MEET_REQUIREMENTS'\n}\n\n/**\n * API Response in the event of an error\n */\nexport interface JsonError {\n  error: {\n    code: number;\n    message: string;\n    errors?: [\n      {\n        message: ServerError;\n        domain: string;\n        reason: string;\n      }\n    ];\n  };\n}\n\n/**\n * Type definition for a map from server errors to developer visible errors\n */\nexport declare type ServerErrorMap<ApiError extends string> = {\n  readonly [K in ApiError]: AuthErrorCode;\n};\n\n/**\n * Map from errors returned by the server to errors to developer visible errors\n */\nexport const SERVER_ERROR_MAP: Partial<ServerErrorMap<ServerError>> = {\n  // Custom token errors.\n  [ServerError.CREDENTIAL_MISMATCH]: AuthErrorCode.CREDENTIAL_MISMATCH,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CUSTOM_TOKEN]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Create Auth URI errors.\n  [ServerError.INVALID_IDENTIFIER]: AuthErrorCode.INVALID_EMAIL,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_CONTINUE_URI]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Sign in with email and password errors (some apply to sign up too).\n  [ServerError.INVALID_PASSWORD]: AuthErrorCode.INVALID_PASSWORD,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_PASSWORD]: AuthErrorCode.MISSING_PASSWORD,\n  // Thrown if Email Enumeration Protection is enabled in the project and the email or password is\n  // invalid.\n  [ServerError.INVALID_LOGIN_CREDENTIALS]: AuthErrorCode.INVALID_CREDENTIAL,\n\n  // Sign up with email and password errors.\n  [ServerError.EMAIL_EXISTS]: AuthErrorCode.EMAIL_EXISTS,\n  [ServerError.PASSWORD_LOGIN_DISABLED]: AuthErrorCode.OPERATION_NOT_ALLOWED,\n\n  // Verify assertion for sign in with credential errors:\n  [ServerError.INVALID_IDP_RESPONSE]: AuthErrorCode.INVALID_CREDENTIAL,\n  [ServerError.INVALID_PENDING_TOKEN]: AuthErrorCode.INVALID_CREDENTIAL,\n  [ServerError.FEDERATED_USER_ID_ALREADY_LINKED]:\n    AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_REQ_TYPE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Send Password reset email errors:\n  [ServerError.EMAIL_NOT_FOUND]: AuthErrorCode.USER_DELETED,\n  [ServerError.RESET_PASSWORD_EXCEED_LIMIT]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n\n  [ServerError.EXPIRED_OOB_CODE]: AuthErrorCode.EXPIRED_OOB_CODE,\n  [ServerError.INVALID_OOB_CODE]: AuthErrorCode.INVALID_OOB_CODE,\n  // This can only happen if the SDK sends a bad request.\n  [ServerError.MISSING_OOB_CODE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Operations that require ID token in request:\n  [ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN]:\n    AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN,\n  [ServerError.INVALID_ID_TOKEN]: AuthErrorCode.INVALID_AUTH,\n  [ServerError.TOKEN_EXPIRED]: AuthErrorCode.TOKEN_EXPIRED,\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.TOKEN_EXPIRED,\n\n  // Other errors.\n  [ServerError.TOO_MANY_ATTEMPTS_TRY_LATER]:\n    AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER,\n  [ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS]:\n    AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS,\n\n  // Phone Auth related errors.\n  [ServerError.INVALID_CODE]: AuthErrorCode.INVALID_CODE,\n  [ServerError.INVALID_SESSION_INFO]: AuthErrorCode.INVALID_SESSION_INFO,\n  [ServerError.INVALID_TEMPORARY_PROOF]: AuthErrorCode.INVALID_CREDENTIAL,\n  [ServerError.MISSING_SESSION_INFO]: AuthErrorCode.MISSING_SESSION_INFO,\n  [ServerError.SESSION_EXPIRED]: AuthErrorCode.CODE_EXPIRED,\n\n  // Other action code errors when additional settings passed.\n  // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.\n  // This is OK as this error will be caught by client side validation.\n  [ServerError.MISSING_ANDROID_PACKAGE_NAME]:\n    AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME,\n  [ServerError.UNAUTHORIZED_DOMAIN]: AuthErrorCode.UNAUTHORIZED_DOMAIN,\n\n  // getProjectConfig errors when clientId is passed.\n  [ServerError.INVALID_OAUTH_CLIENT_ID]: AuthErrorCode.INVALID_OAUTH_CLIENT_ID,\n\n  // User actions (sign-up or deletion) disabled errors.\n  [ServerError.ADMIN_ONLY_OPERATION]: AuthErrorCode.ADMIN_ONLY_OPERATION,\n\n  // Multi factor related errors.\n  [ServerError.INVALID_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.INVALID_MFA_SESSION,\n  [ServerError.MFA_ENROLLMENT_NOT_FOUND]: AuthErrorCode.MFA_INFO_NOT_FOUND,\n  [ServerError.MISSING_MFA_ENROLLMENT_ID]: AuthErrorCode.MISSING_MFA_INFO,\n  [ServerError.MISSING_MFA_PENDING_CREDENTIAL]:\n    AuthErrorCode.MISSING_MFA_SESSION,\n  [ServerError.SECOND_FACTOR_EXISTS]:\n    AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED,\n  [ServerError.SECOND_FACTOR_LIMIT_EXCEEDED]:\n    AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED,\n\n  // Blocking functions related errors.\n  [ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE]: AuthErrorCode.INTERNAL_ERROR,\n\n  // Recaptcha related errors.\n  [ServerError.RECAPTCHA_NOT_ENABLED]: AuthErrorCode.RECAPTCHA_NOT_ENABLED,\n  [ServerError.MISSING_RECAPTCHA_TOKEN]: AuthErrorCode.MISSING_RECAPTCHA_TOKEN,\n  [ServerError.INVALID_RECAPTCHA_TOKEN]: AuthErrorCode.INVALID_RECAPTCHA_TOKEN,\n  [ServerError.INVALID_RECAPTCHA_ACTION]:\n    AuthErrorCode.INVALID_RECAPTCHA_ACTION,\n  [ServerError.MISSING_CLIENT_TYPE]: AuthErrorCode.MISSING_CLIENT_TYPE,\n  [ServerError.MISSING_RECAPTCHA_VERSION]:\n    AuthErrorCode.MISSING_RECAPTCHA_VERSION,\n  [ServerError.INVALID_RECAPTCHA_VERSION]:\n    AuthErrorCode.INVALID_RECAPTCHA_VERSION,\n  [ServerError.INVALID_REQ_TYPE]: AuthErrorCode.INVALID_REQ_TYPE\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError, isCloudflareWorker, querystring } from '@firebase/util';\n\nimport { AuthErrorCode, NamedErrorParams } from '../core/errors';\nimport {\n  _createError,\n  _errorWithCustomMessage,\n  _fail\n} from '../core/util/assert';\nimport { Delay } from '../core/util/delay';\nimport { _emulatorUrl } from '../core/util/emulator';\nimport { FetchProvider } from '../core/util/fetch_provider';\nimport { Auth } from '../model/public_types';\nimport { AuthInternal, ConfigInternal } from '../model/auth';\nimport { IdTokenResponse, TaggedWithTokenResponse } from '../model/id_token';\nimport { IdTokenMfaResponse } from './authentication/mfa';\nimport { SERVER_ERROR_MAP, ServerError, ServerErrorMap } from './errors';\n\nexport const enum HttpMethod {\n  POST = 'POST',\n  GET = 'GET'\n}\n\nexport const enum HttpHeader {\n  CONTENT_TYPE = 'Content-Type',\n  X_FIREBASE_LOCALE = 'X-Firebase-Locale',\n  X_CLIENT_VERSION = 'X-Client-Version',\n  X_FIREBASE_GMPID = 'X-Firebase-gmpid',\n  X_FIREBASE_CLIENT = 'X-Firebase-Client',\n  X_FIREBASE_APP_CHECK = 'X-Firebase-AppCheck'\n}\n\nexport const enum Endpoint {\n  CREATE_AUTH_URI = '/v1/accounts:createAuthUri',\n  DELETE_ACCOUNT = '/v1/accounts:delete',\n  RESET_PASSWORD = '/v1/accounts:resetPassword',\n  SIGN_UP = '/v1/accounts:signUp',\n  SIGN_IN_WITH_CUSTOM_TOKEN = '/v1/accounts:signInWithCustomToken',\n  SIGN_IN_WITH_EMAIL_LINK = '/v1/accounts:signInWithEmailLink',\n  SIGN_IN_WITH_IDP = '/v1/accounts:signInWithIdp',\n  SIGN_IN_WITH_PASSWORD = '/v1/accounts:signInWithPassword',\n  SIGN_IN_WITH_PHONE_NUMBER = '/v1/accounts:signInWithPhoneNumber',\n  SEND_VERIFICATION_CODE = '/v1/accounts:sendVerificationCode',\n  SEND_OOB_CODE = '/v1/accounts:sendOobCode',\n  SET_ACCOUNT_INFO = '/v1/accounts:update',\n  GET_ACCOUNT_INFO = '/v1/accounts:lookup',\n  GET_RECAPTCHA_PARAM = '/v1/recaptchaParams',\n  START_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:start',\n  FINALIZE_MFA_ENROLLMENT = '/v2/accounts/mfaEnrollment:finalize',\n  START_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:start',\n  FINALIZE_MFA_SIGN_IN = '/v2/accounts/mfaSignIn:finalize',\n  WITHDRAW_MFA = '/v2/accounts/mfaEnrollment:withdraw',\n  GET_PROJECT_CONFIG = '/v1/projects',\n  GET_RECAPTCHA_CONFIG = '/v2/recaptchaConfig',\n  GET_PASSWORD_POLICY = '/v2/passwordPolicy',\n  TOKEN = '/v1/token',\n  REVOKE_TOKEN = '/v2/accounts:revokeToken'\n}\n\nexport const enum RecaptchaClientType {\n  WEB = 'CLIENT_TYPE_WEB',\n  ANDROID = 'CLIENT_TYPE_ANDROID',\n  IOS = 'CLIENT_TYPE_IOS'\n}\n\nexport const enum RecaptchaVersion {\n  ENTERPRISE = 'RECAPTCHA_ENTERPRISE'\n}\n\nexport const enum RecaptchaActionName {\n  SIGN_IN_WITH_PASSWORD = 'signInWithPassword',\n  GET_OOB_CODE = 'getOobCode',\n  SIGN_UP_PASSWORD = 'signUpPassword',\n  SEND_VERIFICATION_CODE = 'sendVerificationCode',\n  MFA_SMS_ENROLLMENT = 'mfaSmsEnrollment',\n  MFA_SMS_SIGNIN = 'mfaSmsSignIn'\n}\n\nexport const enum EnforcementState {\n  ENFORCE = 'ENFORCE',\n  AUDIT = 'AUDIT',\n  OFF = 'OFF',\n  ENFORCEMENT_STATE_UNSPECIFIED = 'ENFORCEMENT_STATE_UNSPECIFIED'\n}\n\n// Providers that have reCAPTCHA Enterprise support.\nexport const enum RecaptchaAuthProvider {\n  EMAIL_PASSWORD_PROVIDER = 'EMAIL_PASSWORD_PROVIDER',\n  PHONE_PROVIDER = 'PHONE_PROVIDER'\n}\n\nexport const DEFAULT_API_TIMEOUT_MS = new Delay(30_000, 60_000);\n\nexport function _addTidIfNecessary<T extends { tenantId?: string }>(\n  auth: Auth,\n  request: T\n): T {\n  if (auth.tenantId && !request.tenantId) {\n    return {\n      ...request,\n      tenantId: auth.tenantId\n    };\n  }\n  return request;\n}\n\nexport async function _performApiRequest<T, V>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  return _performFetchWithErrorHandling(auth, customErrorMap, async () => {\n    let body = {};\n    let params = {};\n    if (request) {\n      if (method === HttpMethod.GET) {\n        params = request;\n      } else {\n        body = {\n          body: JSON.stringify(request)\n        };\n      }\n    }\n\n    const query = querystring({\n      key: auth.config.apiKey,\n      ...params\n    }).slice(1);\n\n    const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n    headers[HttpHeader.CONTENT_TYPE] = 'application/json';\n\n    if (auth.languageCode) {\n      headers[HttpHeader.X_FIREBASE_LOCALE] = auth.languageCode;\n    }\n\n    const fetchArgs: RequestInit = {\n      method,\n      headers,\n      ...body\n    };\n\n    /* Security-conscious server-side frameworks tend to have built in mitigations for referrer\n       problems\". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on\n       'RequestInitializerDict' is not implemented.\"\n       https://github.com/cloudflare/next-on-pages/issues/487 */\n    if (!isCloudflareWorker()) {\n      fetchArgs.referrerPolicy = 'no-referrer';\n    }\n\n    return FetchProvider.fetch()(\n      _getFinalTarget(auth, auth.config.apiHost, path, query),\n      fetchArgs\n    );\n  });\n}\n\nexport async function _performFetchWithErrorHandling<V>(\n  auth: Auth,\n  customErrorMap: Partial<ServerErrorMap<ServerError>>,\n  fetchFn: () => Promise<Response>\n): Promise<V> {\n  (auth as AuthInternal)._canInitEmulator = false;\n  const errorMap = { ...SERVER_ERROR_MAP, ...customErrorMap };\n  try {\n    const networkTimeout = new NetworkTimeout<Response>(auth);\n    const response: Response = await Promise.race<Promise<Response>>([\n      fetchFn(),\n      networkTimeout.promise\n    ]);\n\n    // If we've reached this point, the fetch succeeded and the networkTimeout\n    // didn't throw; clear the network timeout delay so that Node won't hang\n    networkTimeout.clearNetworkTimeout();\n\n    const json = await response.json();\n    if ('needConfirmation' in json) {\n      throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, json);\n    }\n\n    if (response.ok && !('errorMessage' in json)) {\n      return json;\n    } else {\n      const errorMessage = response.ok ? json.errorMessage : json.error.message;\n      const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');\n      if (serverErrorCode === ServerError.FEDERATED_USER_ID_ALREADY_LINKED) {\n        throw _makeTaggedError(\n          auth,\n          AuthErrorCode.CREDENTIAL_ALREADY_IN_USE,\n          json\n        );\n      } else if (serverErrorCode === ServerError.EMAIL_EXISTS) {\n        throw _makeTaggedError(auth, AuthErrorCode.EMAIL_EXISTS, json);\n      } else if (serverErrorCode === ServerError.USER_DISABLED) {\n        throw _makeTaggedError(auth, AuthErrorCode.USER_DISABLED, json);\n      }\n      const authError =\n        errorMap[serverErrorCode as ServerError] ||\n        (serverErrorCode\n          .toLowerCase()\n          .replace(/[_\\s]+/g, '-') as unknown as AuthErrorCode);\n      if (serverErrorMessage) {\n        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n      } else {\n        _fail(auth, authError);\n      }\n    }\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      throw e;\n    }\n    // Changing this to a different error code will log user out when there is a network error\n    // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n    // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n    _fail(auth, AuthErrorCode.NETWORK_REQUEST_FAILED, { 'message': String(e) });\n  }\n}\n\nexport async function _performSignInRequest<T, V extends IdTokenResponse>(\n  auth: Auth,\n  method: HttpMethod,\n  path: Endpoint,\n  request?: T,\n  customErrorMap: Partial<ServerErrorMap<ServerError>> = {}\n): Promise<V> {\n  const serverResponse = (await _performApiRequest<T, V | IdTokenMfaResponse>(\n    auth,\n    method,\n    path,\n    request,\n    customErrorMap\n  )) as V;\n  if ('mfaPendingCredential' in serverResponse) {\n    _fail(auth, AuthErrorCode.MFA_REQUIRED, {\n      _serverResponse: serverResponse\n    });\n  }\n\n  return serverResponse;\n}\n\nexport function _getFinalTarget(\n  auth: Auth,\n  host: string,\n  path: string,\n  query: string\n): string {\n  const base = `${host}${path}?${query}`;\n\n  if (!(auth as AuthInternal).config.emulator) {\n    return `${auth.config.apiScheme}://${base}`;\n  }\n\n  return _emulatorUrl(auth.config as ConfigInternal, base);\n}\n\nexport function _parseEnforcementState(\n  enforcementStateStr: string\n): EnforcementState {\n  switch (enforcementStateStr) {\n    case 'ENFORCE':\n      return EnforcementState.ENFORCE;\n    case 'AUDIT':\n      return EnforcementState.AUDIT;\n    case 'OFF':\n      return EnforcementState.OFF;\n    default:\n      return EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED;\n  }\n}\n\nclass NetworkTimeout<T> {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timer: any | null = null;\n  readonly promise = new Promise<T>((_, reject) => {\n    this.timer = setTimeout(() => {\n      return reject(\n        _createError(this.auth, AuthErrorCode.NETWORK_REQUEST_FAILED)\n      );\n    }, DEFAULT_API_TIMEOUT_MS.get());\n  });\n\n  clearNetworkTimeout(): void {\n    clearTimeout(this.timer);\n  }\n\n  constructor(private readonly auth: Auth) {}\n}\n\ninterface PotentialResponse extends IdTokenResponse {\n  email?: string;\n  phoneNumber?: string;\n}\n\nexport function _makeTaggedError(\n  auth: Auth,\n  code: AuthErrorCode,\n  response: PotentialResponse\n): FirebaseError {\n  const errorParams: NamedErrorParams = {\n    appName: auth.name\n  };\n\n  if (response.email) {\n    errorParams.email = response.email;\n  }\n  if (response.phoneNumber) {\n    errorParams.phoneNumber = response.phoneNumber;\n  }\n\n  const error = _createError(auth, code, errorParams);\n\n  // We know customData is defined on error because errorParams is defined\n  (error.customData! as TaggedWithTokenResponse)._tokenResponse = response;\n  return error;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RecaptchaParameters } from '../../model/public_types';\nimport {\n  GetRecaptchaConfigResponse,\n  RecaptchaEnforcementProviderState\n} from '../../api/authentication/recaptcha';\nimport {\n  EnforcementState,\n  RecaptchaAuthProvider,\n  _parseEnforcementState\n} from '../../api/index';\n\n// reCAPTCHA v2 interface\nexport interface Recaptcha {\n  render: (container: HTMLElement, parameters: RecaptchaParameters) => number;\n  getResponse: (id: number) => string;\n  execute: (id: number) => unknown;\n  reset: (id: number) => unknown;\n}\n\nexport function isV2(\n  grecaptcha: Recaptcha | GreCAPTCHA | undefined\n): grecaptcha is Recaptcha {\n  return (\n    grecaptcha !== undefined &&\n    (grecaptcha as Recaptcha).getResponse !== undefined\n  );\n}\n\n// reCAPTCHA Enterprise & v3 shared interface\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\n// reCAPTCHA Enterprise interface\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n\nexport function isEnterprise(\n  grecaptcha: Recaptcha | GreCAPTCHA | undefined\n): grecaptcha is GreCAPTCHATopLevel {\n  return (\n    grecaptcha !== undefined &&\n    (grecaptcha as GreCAPTCHATopLevel).enterprise !== undefined\n  );\n}\n\n// TODO(chuanr): Replace this with the AuthWindow after resolving the dependency issue in Node.js env.\ndeclare global {\n  interface Window {\n    grecaptcha?: Recaptcha | GreCAPTCHATopLevel;\n  }\n}\n\nexport class RecaptchaConfig {\n  /**\n   * The reCAPTCHA site key.\n   */\n  siteKey: string = '';\n\n  /**\n   * The list of providers and their enablement status for reCAPTCHA Enterprise.\n   */\n  recaptchaEnforcementState: RecaptchaEnforcementProviderState[] = [];\n\n  constructor(response: GetRecaptchaConfigResponse) {\n    if (response.recaptchaKey === undefined) {\n      throw new Error('recaptchaKey undefined');\n    }\n    // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n    this.siteKey = response.recaptchaKey.split('/')[3];\n    this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n  }\n\n  /**\n   * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\n   *\n   * @param providerStr - The provider whose enforcement state is to be returned.\n   * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\n   */\n  getProviderEnforcementState(providerStr: string): EnforcementState | null {\n    if (\n      !this.recaptchaEnforcementState ||\n      this.recaptchaEnforcementState.length === 0\n    ) {\n      return null;\n    }\n\n    for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {\n      if (\n        recaptchaEnforcementState.provider &&\n        recaptchaEnforcementState.provider === providerStr\n      ) {\n        return _parseEnforcementState(\n          recaptchaEnforcementState.enforcementState\n        );\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\n   *\n   * @param providerStr - The provider whose enablement state is to be returned.\n   * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\n   */\n  isProviderEnabled(providerStr: string): boolean {\n    return (\n      this.getProviderEnforcementState(providerStr) ===\n        EnforcementState.ENFORCE ||\n      this.getProviderEnforcementState(providerStr) === EnforcementState.AUDIT\n    );\n  }\n\n  /**\n   * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise\n   * returns false.\n   *\n   * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.\n   */\n  isAnyProviderEnabled(): boolean {\n    return (\n      this.isProviderEnabled(RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER) ||\n      this.isProviderEnabled(RecaptchaAuthProvider.PHONE_PROVIDER)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _performApiRequest,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\ninterface GetRecaptchaParamResponse {\n  recaptchaSiteKey?: string;\n}\n\nexport async function getRecaptchaParams(auth: Auth): Promise<string> {\n  return (\n    (\n      await _performApiRequest<void, GetRecaptchaParamResponse>(\n        auth,\n        HttpMethod.GET,\n        Endpoint.GET_RECAPTCHA_PARAM\n      )\n    ).recaptchaSiteKey || ''\n  );\n}\n\n// The following functions are for reCAPTCHA enterprise integration.\ninterface GetRecaptchaConfigRequest {\n  tenantId?: string;\n  clientType?: RecaptchaClientType;\n  version?: RecaptchaVersion;\n}\n\nexport interface RecaptchaEnforcementProviderState {\n  provider: string;\n  enforcementState: string;\n}\n\nexport interface GetRecaptchaConfigResponse {\n  recaptchaKey: string;\n  recaptchaEnforcementState: RecaptchaEnforcementProviderState[];\n}\n\nexport async function getRecaptchaConfig(\n  auth: Auth,\n  request: GetRecaptchaConfigRequest\n): Promise<GetRecaptchaConfigResponse> {\n  return _performApiRequest<\n    GetRecaptchaConfigRequest,\n    GetRecaptchaConfigResponse\n  >(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_RECAPTCHA_CONFIG,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endpoint, HttpMethod, _performApiRequest } from '../index';\nimport { MfaEnrollment } from './mfa';\nimport { Auth } from '../../model/public_types';\n\nexport interface DeleteAccountRequest {\n  idToken: string;\n}\n\nexport async function deleteAccount(\n  auth: Auth,\n  request: DeleteAccountRequest\n): Promise<void> {\n  return _performApiRequest<DeleteAccountRequest, void>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.DELETE_ACCOUNT,\n    request\n  );\n}\n\nexport interface ProviderUserInfo {\n  providerId: string;\n  rawId?: string;\n  email?: string;\n  displayName?: string;\n  photoUrl?: string;\n  phoneNumber?: string;\n}\n\nexport interface DeleteLinkedAccountsRequest {\n  idToken: string;\n  deleteProvider: string[];\n}\n\nexport interface DeleteLinkedAccountsResponse {\n  providerUserInfo: ProviderUserInfo[];\n}\n\nexport async function deleteLinkedAccounts(\n  auth: Auth,\n  request: DeleteLinkedAccountsRequest\n): Promise<DeleteLinkedAccountsResponse> {\n  return _performApiRequest<\n    DeleteLinkedAccountsRequest,\n    DeleteLinkedAccountsResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\nexport interface APIUserInfo {\n  localId?: string;\n  displayName?: string;\n  photoUrl?: string;\n  email?: string;\n  emailVerified?: boolean;\n  phoneNumber?: string;\n  lastLoginAt?: number;\n  createdAt?: number;\n  tenantId?: string;\n  passwordHash?: string;\n  providerUserInfo?: ProviderUserInfo[];\n  mfaInfo?: MfaEnrollment[];\n}\n\nexport interface GetAccountInfoRequest {\n  idToken: string;\n}\n\nexport interface GetAccountInfoResponse {\n  users: APIUserInfo[];\n}\n\nexport async function getAccountInfo(\n  auth: Auth,\n  request: GetAccountInfoRequest\n): Promise<GetAccountInfoResponse> {\n  return _performApiRequest<GetAccountInfoRequest, GetAccountInfoResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.GET_ACCOUNT_INFO,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function utcTimestampToDateString(\n  utcTimestamp?: string | number\n): string | undefined {\n  if (!utcTimestamp) {\n    return undefined;\n  }\n  try {\n    // Convert to date object.\n    const date = new Date(Number(utcTimestamp));\n    // Test date is valid.\n    if (!isNaN(date.getTime())) {\n      // Convert to UTC date string.\n      return date.toUTCString();\n    }\n  } catch (e) {\n    // Do nothing. undefined will be returned.\n  }\n  return undefined;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult, ParsedToken, User } from '../../model/public_types';\nimport { base64Decode, getModularInstance } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { _logError } from '../util/log';\nimport { utcTimestampToDateString } from '../util/time';\nimport { AuthErrorCode } from '../errors';\n\n/**\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport function getIdToken(user: User, forceRefresh = false): Promise<string> {\n  return getModularInstance(user).getIdToken(forceRefresh);\n}\n\n/**\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\n *\n * @remarks\n * Returns the current token if it has not expired or if it will not expire in the next five\n * minutes. Otherwise, this will refresh the token and return a new one.\n *\n * @param user - The user.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getIdTokenResult(\n  user: User,\n  forceRefresh = false\n): Promise<IdTokenResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const token = await userInternal.getIdToken(forceRefresh);\n  const claims = _parseToken(token);\n\n  _assert(\n    claims && claims.exp && claims.auth_time && claims.iat,\n    userInternal.auth,\n    AuthErrorCode.INTERNAL_ERROR\n  );\n  const firebase =\n    typeof claims.firebase === 'object' ? claims.firebase : undefined;\n\n  const signInProvider: string | undefined = firebase?.['sign_in_provider'];\n\n  return {\n    claims,\n    token,\n    authTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.auth_time)\n    )!,\n    issuedAtTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.iat)\n    )!,\n    expirationTime: utcTimestampToDateString(\n      secondsStringToMilliseconds(claims.exp)\n    )!,\n    signInProvider: signInProvider || null,\n    signInSecondFactor: firebase?.['sign_in_second_factor'] || null\n  };\n}\n\nfunction secondsStringToMilliseconds(seconds: string): number {\n  return Number(seconds) * 1000;\n}\n\nexport function _parseToken(token: string): ParsedToken | null {\n  const [algorithm, payload, signature] = token.split('.');\n  if (\n    algorithm === undefined ||\n    payload === undefined ||\n    signature === undefined\n  ) {\n    _logError('JWT malformed, contained fewer than 3 sections');\n    return null;\n  }\n\n  try {\n    const decoded = base64Decode(payload);\n    if (!decoded) {\n      _logError('Failed to decode base64 JWT payload');\n      return null;\n    }\n    return JSON.parse(decoded);\n  } catch (e) {\n    _logError(\n      'Caught error parsing JWT payload as JSON',\n      (e as Error)?.toString()\n    );\n    return null;\n  }\n}\n\n/**\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\n */\nexport function _tokenExpiresIn(token: string): number {\n  const parsedToken = _parseToken(token);\n  _assert(parsedToken, AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.exp !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  _assert(typeof parsedToken.iat !== 'undefined', AuthErrorCode.INTERNAL_ERROR);\n  return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\nexport async function _logoutIfInvalidated<T>(\n  user: UserInternal,\n  promise: Promise<T>,\n  bypassAuthState = false\n): Promise<T> {\n  if (bypassAuthState) {\n    return promise;\n  }\n  try {\n    return await promise;\n  } catch (e) {\n    if (e instanceof FirebaseError && isUserInvalidated(e)) {\n      if (user.auth.currentUser === user) {\n        await user.auth.signOut();\n      }\n    }\n\n    throw e;\n  }\n}\n\nfunction isUserInvalidated({ code }: FirebaseError): boolean {\n  return (\n    code === `auth/${AuthErrorCode.USER_DISABLED}` ||\n    code === `auth/${AuthErrorCode.TOKEN_EXPIRED}`\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\n\n// Refresh the token five minutes before expiration\nexport const enum Duration {\n  OFFSET = 5 * 1000 * 60,\n  RETRY_BACKOFF_MIN = 30 * 1000,\n  RETRY_BACKOFF_MAX = 16 * 60 * 1000\n}\n\nexport class ProactiveRefresh {\n  private isRunning = false;\n\n  // Node timers and browser timers return fundamentally different types.\n  // We don't actually care what the value is but TS won't accept unknown and\n  // we can't cast properly in both environments.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private timerId: any | null = null;\n  private errorBackoff = Duration.RETRY_BACKOFF_MIN;\n\n  constructor(private readonly user: UserInternal) {}\n\n  _start(): void {\n    if (this.isRunning) {\n      return;\n    }\n\n    this.isRunning = true;\n    this.schedule();\n  }\n\n  _stop(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.isRunning = false;\n    if (this.timerId !== null) {\n      clearTimeout(this.timerId);\n    }\n  }\n\n  private getInterval(wasError: boolean): number {\n    if (wasError) {\n      const interval = this.errorBackoff;\n      this.errorBackoff = Math.min(\n        this.errorBackoff * 2,\n        Duration.RETRY_BACKOFF_MAX\n      );\n      return interval;\n    } else {\n      // Reset the error backoff\n      this.errorBackoff = Duration.RETRY_BACKOFF_MIN;\n      const expTime = this.user.stsTokenManager.expirationTime ?? 0;\n      const interval = expTime - Date.now() - Duration.OFFSET;\n\n      return Math.max(0, interval);\n    }\n  }\n\n  private schedule(wasError = false): void {\n    if (!this.isRunning) {\n      // Just in case...\n      return;\n    }\n\n    const interval = this.getInterval(wasError);\n    this.timerId = setTimeout(async () => {\n      await this.iteration();\n    }, interval);\n  }\n\n  private async iteration(): Promise<void> {\n    try {\n      await this.user.getIdToken(true);\n    } catch (e) {\n      // Only retry on network errors\n      if (\n        (e as FirebaseError)?.code ===\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        this.schedule(/* wasError */ true);\n      }\n\n      return;\n    }\n    this.schedule();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserMetadata as UserMetadataType } from '../../model/public_types';\n\nimport { utcTimestampToDateString } from '../util/time';\n\nexport class UserMetadata implements UserMetadataType {\n  creationTime?: string;\n  lastSignInTime?: string;\n\n  constructor(\n    private createdAt?: string | number,\n    private lastLoginAt?: string | number\n  ) {\n    this._initializeTime();\n  }\n\n  private _initializeTime(): void {\n    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n    this.creationTime = utcTimestampToDateString(this.createdAt);\n  }\n\n  _copy(metadata: UserMetadata): void {\n    this.createdAt = metadata.createdAt;\n    this.lastLoginAt = metadata.lastLoginAt;\n    this._initializeTime();\n  }\n\n  toJSON(): object {\n    return {\n      createdAt: this.createdAt,\n      lastLoginAt: this.lastLoginAt\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User, UserInfo } from '../../model/public_types';\n\nimport {\n  getAccountInfo,\n  ProviderUserInfo\n} from '../../api/account_management/account';\nimport { UserInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserMetadata } from './user_metadata';\nimport { getModularInstance } from '@firebase/util';\n\nexport async function _reloadWithoutSaving(user: UserInternal): Promise<void> {\n  const auth = user.auth;\n  const idToken = await user.getIdToken();\n  const response = await _logoutIfInvalidated(\n    user,\n    getAccountInfo(auth, { idToken })\n  );\n\n  _assert(response?.users.length, auth, AuthErrorCode.INTERNAL_ERROR);\n\n  const coreAccount = response.users[0];\n\n  user._notifyReloadListener(coreAccount);\n\n  const newProviderData = coreAccount.providerUserInfo?.length\n    ? extractProviderData(coreAccount.providerUserInfo)\n    : [];\n\n  const providerData = mergeProviderData(user.providerData, newProviderData);\n\n  // Preserves the non-nonymous status of the stored user, even if no more\n  // credentials (federated or email/password) are linked to the user. If\n  // the user was previously anonymous, then use provider data to update.\n  // On the other hand, if it was not anonymous before, it should never be\n  // considered anonymous now.\n  const oldIsAnonymous = user.isAnonymous;\n  const newIsAnonymous =\n    !(user.email && coreAccount.passwordHash) && !providerData?.length;\n  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n\n  const updates: Partial<UserInternal> = {\n    uid: coreAccount.localId,\n    displayName: coreAccount.displayName || null,\n    photoURL: coreAccount.photoUrl || null,\n    email: coreAccount.email || null,\n    emailVerified: coreAccount.emailVerified || false,\n    phoneNumber: coreAccount.phoneNumber || null,\n    tenantId: coreAccount.tenantId || null,\n    providerData,\n    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n    isAnonymous\n  };\n\n  Object.assign(user, updates);\n}\n\n/**\n * Reloads user account data, if signed in.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function reload(user: User): Promise<void> {\n  const userInternal: UserInternal = getModularInstance(user) as UserInternal;\n  await _reloadWithoutSaving(userInternal);\n\n  // Even though the current user hasn't changed, update\n  // current user will trigger a persistence update w/ the\n  // new info.\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  userInternal.auth._notifyListenersIfCurrent(userInternal);\n}\n\nfunction mergeProviderData(\n  original: UserInfo[],\n  newData: UserInfo[]\n): UserInfo[] {\n  const deduped = original.filter(\n    o => !newData.some(n => n.providerId === o.providerId)\n  );\n  return [...deduped, ...newData];\n}\n\nexport function extractProviderData(providers: ProviderUserInfo[]): UserInfo[] {\n  return providers.map(({ providerId, ...provider }) => {\n    return {\n      providerId,\n      uid: provider.rawId || '',\n      displayName: provider.displayName || null,\n      email: provider.email || null,\n      phoneNumber: provider.phoneNumber || null,\n      photoURL: provider.photoUrl || null\n    };\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  _getFinalTarget,\n  _performFetchWithErrorHandling,\n  _performApiRequest,\n  _addTidIfNecessary,\n  HttpMethod,\n  HttpHeader,\n  Endpoint\n} from '../index';\nimport { FetchProvider } from '../../core/util/fetch_provider';\nimport { Auth } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\n\nexport const enum TokenType {\n  REFRESH_TOKEN = 'REFRESH_TOKEN',\n  ACCESS_TOKEN = 'ACCESS_TOKEN'\n}\n\n/** The server responses with snake_case; we convert to camelCase */\ninterface RequestStsTokenServerResponse {\n  access_token: string;\n  expires_in: string;\n  refresh_token: string;\n}\n\nexport interface RequestStsTokenResponse {\n  accessToken: string;\n  expiresIn: string;\n  refreshToken: string;\n}\n\nexport interface RevokeTokenRequest {\n  providerId: string;\n  tokenType: TokenType;\n  token: string;\n  idToken: string;\n  tenantId?: string;\n}\n\nexport interface RevokeTokenResponse {}\n\nexport async function requestStsToken(\n  auth: Auth,\n  refreshToken: string\n): Promise<RequestStsTokenResponse> {\n  const response =\n    await _performFetchWithErrorHandling<RequestStsTokenServerResponse>(\n      auth,\n      {},\n      async () => {\n        const body = querystring({\n          'grant_type': 'refresh_token',\n          'refresh_token': refreshToken\n        }).slice(1);\n        const { tokenApiHost, apiKey } = auth.config;\n        const url = _getFinalTarget(\n          auth,\n          tokenApiHost,\n          Endpoint.TOKEN,\n          `key=${apiKey}`\n        );\n\n        const headers = await (auth as AuthInternal)._getAdditionalHeaders();\n        headers[HttpHeader.CONTENT_TYPE] = 'application/x-www-form-urlencoded';\n\n        return FetchProvider.fetch()(url, {\n          method: HttpMethod.POST,\n          headers,\n          body\n        });\n      }\n    );\n\n  // The response comes back in snake_case. Convert to camel:\n  return {\n    accessToken: response.access_token,\n    expiresIn: response.expires_in,\n    refreshToken: response.refresh_token\n  };\n}\n\nexport async function revokeToken(\n  auth: Auth,\n  request: RevokeTokenRequest\n): Promise<RevokeTokenResponse> {\n  return _performApiRequest<RevokeTokenRequest, RevokeTokenResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.REVOKE_TOKEN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { requestStsToken } from '../../api/authentication/token';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport { _assert, debugFail } from '../util/assert';\nimport { _tokenExpiresIn } from './id_token_result';\n\n/**\n * The number of milliseconds before the official expiration time of a token\n * to refresh that token, to provide a buffer for RPCs to complete.\n */\nexport const enum Buffer {\n  TOKEN_REFRESH = 30_000\n}\n\n/**\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nexport class StsTokenManager {\n  refreshToken: string | null = null;\n  accessToken: string | null = null;\n  expirationTime: number | null = null;\n\n  get isExpired(): boolean {\n    return (\n      !this.expirationTime ||\n      Date.now() > this.expirationTime - Buffer.TOKEN_REFRESH\n    );\n  }\n\n  updateFromServerResponse(\n    response: IdTokenResponse | FinalizeMfaResponse\n  ): void {\n    _assert(response.idToken, AuthErrorCode.INTERNAL_ERROR);\n    _assert(\n      typeof response.idToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof response.refreshToken !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const expiresIn =\n      'expiresIn' in response && typeof response.expiresIn !== 'undefined'\n        ? Number(response.expiresIn)\n        : _tokenExpiresIn(response.idToken);\n    this.updateTokensAndExpiration(\n      response.idToken,\n      response.refreshToken,\n      expiresIn\n    );\n  }\n\n  updateFromIdToken(idToken: string): void {\n    _assert(idToken.length !== 0, AuthErrorCode.INTERNAL_ERROR);\n    const expiresIn = _tokenExpiresIn(idToken);\n    this.updateTokensAndExpiration(idToken, null, expiresIn);\n  }\n\n  async getToken(\n    auth: AuthInternal,\n    forceRefresh = false\n  ): Promise<string | null> {\n    if (!forceRefresh && this.accessToken && !this.isExpired) {\n      return this.accessToken;\n    }\n\n    _assert(this.refreshToken, auth, AuthErrorCode.TOKEN_EXPIRED);\n\n    if (this.refreshToken) {\n      await this.refresh(auth, this.refreshToken!);\n      return this.accessToken;\n    }\n\n    return null;\n  }\n\n  clearRefreshToken(): void {\n    this.refreshToken = null;\n  }\n\n  private async refresh(auth: AuthInternal, oldToken: string): Promise<void> {\n    const { accessToken, refreshToken, expiresIn } = await requestStsToken(\n      auth,\n      oldToken\n    );\n    this.updateTokensAndExpiration(\n      accessToken,\n      refreshToken,\n      Number(expiresIn)\n    );\n  }\n\n  private updateTokensAndExpiration(\n    accessToken: string,\n    refreshToken: string | null,\n    expiresInSec: number\n  ): void {\n    this.refreshToken = refreshToken || null;\n    this.accessToken = accessToken || null;\n    this.expirationTime = Date.now() + expiresInSec * 1000;\n  }\n\n  static fromJSON(appName: string, object: PersistedBlob): StsTokenManager {\n    const { refreshToken, accessToken, expirationTime } = object;\n\n    const manager = new StsTokenManager();\n    if (refreshToken) {\n      _assert(typeof refreshToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.refreshToken = refreshToken;\n    }\n    if (accessToken) {\n      _assert(typeof accessToken === 'string', AuthErrorCode.INTERNAL_ERROR, {\n        appName\n      });\n      manager.accessToken = accessToken;\n    }\n    if (expirationTime) {\n      _assert(\n        typeof expirationTime === 'number',\n        AuthErrorCode.INTERNAL_ERROR,\n        {\n          appName\n        }\n      );\n      manager.expirationTime = expirationTime;\n    }\n    return manager;\n  }\n\n  toJSON(): object {\n    return {\n      refreshToken: this.refreshToken,\n      accessToken: this.accessToken,\n      expirationTime: this.expirationTime\n    };\n  }\n\n  _assign(stsTokenManager: StsTokenManager): void {\n    this.accessToken = stsTokenManager.accessToken;\n    this.refreshToken = stsTokenManager.refreshToken;\n    this.expirationTime = stsTokenManager.expirationTime;\n  }\n\n  _clone(): StsTokenManager {\n    return Object.assign(new StsTokenManager(), this.toJSON());\n  }\n\n  _performRefresh(): never {\n    return debugFail('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdTokenResult, UserInfo } from '../../model/public_types';\nimport { NextFn } from '@firebase/util';\nimport {\n  APIUserInfo,\n  GetAccountInfoResponse,\n  deleteAccount\n} from '../../api/account_management/account';\nimport { FinalizeMfaResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport {\n  MutableUserInfo,\n  UserInternal,\n  UserParameters\n} from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { PersistedBlob } from '../persistence';\nimport {\n  _assert,\n  _serverAppCurrentUserOperationNotSupportedError\n} from '../util/assert';\nimport { getIdTokenResult } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { ProactiveRefresh } from './proactive_refresh';\nimport { extractProviderData, _reloadWithoutSaving, reload } from './reload';\nimport { StsTokenManager } from './token_manager';\nimport { UserMetadata } from './user_metadata';\nimport { ProviderId } from '../../model/enums';\nimport { _isFirebaseServerApp } from '@firebase/app';\n\nfunction assertStringOrUndefined(\n  assertion: unknown,\n  appName: string\n): asserts assertion is string | undefined {\n  _assert(\n    typeof assertion === 'string' || typeof assertion === 'undefined',\n    AuthErrorCode.INTERNAL_ERROR,\n    { appName }\n  );\n}\n\nexport class UserImpl implements UserInternal {\n  // For the user object, provider is always Firebase.\n  readonly providerId = ProviderId.FIREBASE;\n  stsTokenManager: StsTokenManager;\n  // Last known accessToken so we know when it changes\n  private accessToken: string | null;\n\n  uid: string;\n  auth: AuthInternal;\n  emailVerified: boolean;\n  isAnonymous: boolean;\n  tenantId: string | null;\n  readonly metadata: UserMetadata;\n  providerData: MutableUserInfo[];\n\n  // Optional fields from UserInfo\n  displayName: string | null;\n  email: string | null;\n  phoneNumber: string | null;\n  photoURL: string | null;\n\n  _redirectEventId?: string;\n  private readonly proactiveRefresh = new ProactiveRefresh(this);\n\n  constructor({ uid, auth, stsTokenManager, ...opt }: UserParameters) {\n    this.uid = uid;\n    this.auth = auth;\n    this.stsTokenManager = stsTokenManager;\n    this.accessToken = stsTokenManager.accessToken;\n    this.displayName = opt.displayName || null;\n    this.email = opt.email || null;\n    this.emailVerified = opt.emailVerified || false;\n    this.phoneNumber = opt.phoneNumber || null;\n    this.photoURL = opt.photoURL || null;\n    this.isAnonymous = opt.isAnonymous || false;\n    this.tenantId = opt.tenantId || null;\n    this.providerData = opt.providerData ? [...opt.providerData] : [];\n    this.metadata = new UserMetadata(\n      opt.createdAt || undefined,\n      opt.lastLoginAt || undefined\n    );\n  }\n\n  async getIdToken(forceRefresh?: boolean): Promise<string> {\n    const accessToken = await _logoutIfInvalidated(\n      this,\n      this.stsTokenManager.getToken(this.auth, forceRefresh)\n    );\n    _assert(accessToken, this.auth, AuthErrorCode.INTERNAL_ERROR);\n\n    if (this.accessToken !== accessToken) {\n      this.accessToken = accessToken;\n      await this.auth._persistUserIfCurrent(this);\n      this.auth._notifyListenersIfCurrent(this);\n    }\n\n    return accessToken;\n  }\n\n  getIdTokenResult(forceRefresh?: boolean): Promise<IdTokenResult> {\n    return getIdTokenResult(this, forceRefresh);\n  }\n\n  reload(): Promise<void> {\n    return reload(this);\n  }\n\n  private reloadUserInfo: APIUserInfo | null = null;\n  private reloadListener: NextFn<APIUserInfo> | null = null;\n\n  _assign(user: UserInternal): void {\n    if (this === user) {\n      return;\n    }\n    _assert(this.uid === user.uid, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.displayName = user.displayName;\n    this.photoURL = user.photoURL;\n    this.email = user.email;\n    this.emailVerified = user.emailVerified;\n    this.phoneNumber = user.phoneNumber;\n    this.isAnonymous = user.isAnonymous;\n    this.tenantId = user.tenantId;\n    this.providerData = user.providerData.map(userInfo => ({ ...userInfo }));\n    this.metadata._copy(user.metadata);\n    this.stsTokenManager._assign(user.stsTokenManager);\n  }\n\n  _clone(auth: AuthInternal): UserInternal {\n    const newUser = new UserImpl({\n      ...this,\n      auth,\n      stsTokenManager: this.stsTokenManager._clone()\n    });\n    newUser.metadata._copy(this.metadata);\n    return newUser;\n  }\n\n  _onReload(callback: NextFn<APIUserInfo>): void {\n    // There should only ever be one listener, and that is a single instance of MultiFactorUser\n    _assert(!this.reloadListener, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.reloadListener = callback;\n    if (this.reloadUserInfo) {\n      this._notifyReloadListener(this.reloadUserInfo);\n      this.reloadUserInfo = null;\n    }\n  }\n\n  _notifyReloadListener(userInfo: APIUserInfo): void {\n    if (this.reloadListener) {\n      this.reloadListener(userInfo);\n    } else {\n      // If no listener is subscribed yet, save the result so it's available when they do subscribe\n      this.reloadUserInfo = userInfo;\n    }\n  }\n\n  _startProactiveRefresh(): void {\n    this.proactiveRefresh._start();\n  }\n\n  _stopProactiveRefresh(): void {\n    this.proactiveRefresh._stop();\n  }\n\n  async _updateTokensIfNecessary(\n    response: IdTokenResponse | FinalizeMfaResponse,\n    reload = false\n  ): Promise<void> {\n    let tokensRefreshed = false;\n    if (\n      response.idToken &&\n      response.idToken !== this.stsTokenManager.accessToken\n    ) {\n      this.stsTokenManager.updateFromServerResponse(response);\n      tokensRefreshed = true;\n    }\n\n    if (reload) {\n      await _reloadWithoutSaving(this);\n    }\n\n    await this.auth._persistUserIfCurrent(this);\n    if (tokensRefreshed) {\n      this.auth._notifyListenersIfCurrent(this);\n    }\n  }\n\n  async delete(): Promise<void> {\n    if (_isFirebaseServerApp(this.auth.app)) {\n      return Promise.reject(\n        _serverAppCurrentUserOperationNotSupportedError(this.auth)\n      );\n    }\n    const idToken = await this.getIdToken();\n    await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));\n    this.stsTokenManager.clearRefreshToken();\n\n    // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n    //       cancels pending actions...\n\n    return this.auth.signOut();\n  }\n\n  toJSON(): PersistedBlob {\n    return {\n      uid: this.uid,\n      email: this.email || undefined,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName || undefined,\n      isAnonymous: this.isAnonymous,\n      photoURL: this.photoURL || undefined,\n      phoneNumber: this.phoneNumber || undefined,\n      tenantId: this.tenantId || undefined,\n      providerData: this.providerData.map(userInfo => ({ ...userInfo })),\n      stsTokenManager: this.stsTokenManager.toJSON(),\n      // Redirect event ID must be maintained in case there is a pending\n      // redirect event.\n      _redirectEventId: this._redirectEventId,\n      ...this.metadata.toJSON(),\n\n      // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n      apiKey: this.auth.config.apiKey,\n      appName: this.auth.name\n      // Missing authDomain will be tolerated by the legacy SDK.\n      // stsTokenManager.apiKey isn't actually required (despite the legacy SDK persisting it).\n    };\n  }\n\n  get refreshToken(): string {\n    return this.stsTokenManager.refreshToken || '';\n  }\n\n  static _fromJSON(auth: AuthInternal, object: PersistedBlob): UserInternal {\n    const displayName = object.displayName ?? undefined;\n    const email = object.email ?? undefined;\n    const phoneNumber = object.phoneNumber ?? undefined;\n    const photoURL = object.photoURL ?? undefined;\n    const tenantId = object.tenantId ?? undefined;\n    const _redirectEventId = object._redirectEventId ?? undefined;\n    const createdAt = object.createdAt ?? undefined;\n    const lastLoginAt = object.lastLoginAt ?? undefined;\n    const {\n      uid,\n      emailVerified,\n      isAnonymous,\n      providerData,\n      stsTokenManager: plainObjectTokenManager\n    } = object;\n\n    _assert(uid && plainObjectTokenManager, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const stsTokenManager = StsTokenManager.fromJSON(\n      this.name,\n      plainObjectTokenManager as PersistedBlob\n    );\n\n    _assert(typeof uid === 'string', auth, AuthErrorCode.INTERNAL_ERROR);\n    assertStringOrUndefined(displayName, auth.name);\n    assertStringOrUndefined(email, auth.name);\n    _assert(\n      typeof emailVerified === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    _assert(\n      typeof isAnonymous === 'boolean',\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    assertStringOrUndefined(phoneNumber, auth.name);\n    assertStringOrUndefined(photoURL, auth.name);\n    assertStringOrUndefined(tenantId, auth.name);\n    assertStringOrUndefined(_redirectEventId, auth.name);\n    assertStringOrUndefined(createdAt, auth.name);\n    assertStringOrUndefined(lastLoginAt, auth.name);\n    const user = new UserImpl({\n      uid,\n      auth,\n      email,\n      emailVerified,\n      displayName,\n      isAnonymous,\n      photoURL,\n      phoneNumber,\n      tenantId,\n      stsTokenManager,\n      createdAt,\n      lastLoginAt\n    });\n\n    if (providerData && Array.isArray(providerData)) {\n      user.providerData = providerData.map(userInfo => ({ ...userInfo }));\n    }\n\n    if (_redirectEventId) {\n      user._redirectEventId = _redirectEventId;\n    }\n\n    return user;\n  }\n\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserInternal> {\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromServerResponse(idTokenResponse);\n\n    // Initialize the Firebase Auth user.\n    const user = new UserImpl({\n      uid: idTokenResponse.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n\n    // Updates the user info and data and resolves with a user instance.\n    await _reloadWithoutSaving(user);\n    return user;\n  }\n\n  /**\n   * Initialize a User from an idToken server response\n   * @param auth\n   * @param idTokenResponse\n   */\n  static async _fromGetAccountInfoResponse(\n    auth: AuthInternal,\n    response: GetAccountInfoResponse,\n    idToken: string\n  ): Promise<UserInternal> {\n    const coreAccount = response.users[0];\n    _assert(coreAccount.localId !== undefined, AuthErrorCode.INTERNAL_ERROR);\n\n    const providerData: UserInfo[] =\n      coreAccount.providerUserInfo !== undefined\n        ? extractProviderData(coreAccount.providerUserInfo)\n        : [];\n\n    const isAnonymous =\n      !(coreAccount.email && coreAccount.passwordHash) && !providerData?.length;\n\n    const stsTokenManager = new StsTokenManager();\n    stsTokenManager.updateFromIdToken(idToken);\n\n    // Initialize the Firebase Auth user.\n    const user = new UserImpl({\n      uid: coreAccount.localId,\n      auth,\n      stsTokenManager,\n      isAnonymous\n    });\n\n    // update the user with data from the GetAccountInfo response.\n    const updates: Partial<UserInternal> = {\n      uid: coreAccount.localId,\n      displayName: coreAccount.displayName || null,\n      photoURL: coreAccount.photoUrl || null,\n      email: coreAccount.email || null,\n      emailVerified: coreAccount.emailVerified || false,\n      phoneNumber: coreAccount.phoneNumber || null,\n      tenantId: coreAccount.tenantId || null,\n      providerData,\n      metadata: new UserMetadata(\n        coreAccount.createdAt,\n        coreAccount.lastLoginAt\n      ),\n      isAnonymous:\n        !(coreAccount.email && coreAccount.passwordHash) &&\n        !providerData?.length\n    };\n\n    Object.assign(user, updates);\n    return user;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { debugAssert } from './assert';\n\n/**\n * Our API has a lot of one-off constants that are used to do things.\n * Unfortunately we can't export these as classes instantiated directly since\n * the constructor may side effect and therefore can't be proven to be safely\n * culled. Instead, we export these classes themselves as a lowerCamelCase\n * constant, and instantiate them under the hood.\n */\nexport interface SingletonInstantiator<T> {\n  new (): T;\n}\n\nconst instanceCache: Map<unknown, unknown> = new Map();\n\nexport function _getInstance<T>(cls: unknown): T {\n  debugAssert(cls instanceof Function, 'Expected a class definition');\n  let instance = instanceCache.get(cls) as T | undefined;\n\n  if (instance) {\n    debugAssert(\n      instance instanceof cls,\n      'Instance stored in cache mismatched with class'\n    );\n    return instance;\n  }\n\n  instance = new (cls as SingletonInstantiator<T>)();\n  instanceCache.set(cls, instance);\n  return instance;\n}\n\nexport function _clearInstanceMap(): void {\n  instanceCache.clear();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport {\n  PersistenceInternal,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener\n} from '../persistence';\n\nexport class InMemoryPersistence implements PersistenceInternal {\n  static type: 'NONE' = 'NONE';\n  readonly type = PersistenceType.NONE;\n  storage: Record<string, PersistenceValue> = {};\n\n  async _isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    this.storage[key] = value;\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const value = this.storage[key];\n    return value === undefined ? null : (value as T);\n  }\n\n  async _remove(key: string): Promise<void> {\n    delete this.storage[key];\n  }\n\n  _addListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n\n  _removeListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n    return;\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type 'NONE'.\n *\n * @public\n */\nexport const inMemoryPersistence: Persistence = InMemoryPersistence;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { PersistedBlob, PersistenceInternal } from '../persistence';\nimport { UserImpl } from '../user/user_impl';\nimport { _getInstance } from '../util/instantiator';\nimport { inMemoryPersistence } from './in_memory';\n\nexport const enum KeyName {\n  AUTH_USER = 'authUser',\n  AUTH_EVENT = 'authEvent',\n  REDIRECT_USER = 'redirectUser',\n  PERSISTENCE_USER = 'persistence'\n}\nexport const enum Namespace {\n  PERSISTENCE = 'firebase'\n}\n\nexport function _persistenceKeyName(\n  key: string,\n  apiKey: ApiKey,\n  appName: AppName\n): string {\n  return `${Namespace.PERSISTENCE}:${key}:${apiKey}:${appName}`;\n}\n\nexport class PersistenceUserManager {\n  private readonly fullUserKey: string;\n  private readonly fullPersistenceKey: string;\n  private readonly boundEventHandler: () => void;\n\n  private constructor(\n    public persistence: PersistenceInternal,\n    private readonly auth: AuthInternal,\n    private readonly userKey: string\n  ) {\n    const { config, name } = this.auth;\n    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n    this.fullPersistenceKey = _persistenceKeyName(\n      KeyName.PERSISTENCE_USER,\n      config.apiKey,\n      name\n    );\n    this.boundEventHandler = auth._onStorageEvent.bind(auth);\n    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  setCurrentUser(user: UserInternal): Promise<void> {\n    return this.persistence._set(this.fullUserKey, user.toJSON());\n  }\n\n  async getCurrentUser(): Promise<UserInternal | null> {\n    const blob = await this.persistence._get<PersistedBlob>(this.fullUserKey);\n    return blob ? UserImpl._fromJSON(this.auth, blob) : null;\n  }\n\n  removeCurrentUser(): Promise<void> {\n    return this.persistence._remove(this.fullUserKey);\n  }\n\n  savePersistenceForRedirect(): Promise<void> {\n    return this.persistence._set(\n      this.fullPersistenceKey,\n      this.persistence.type\n    );\n  }\n\n  async setPersistence(newPersistence: PersistenceInternal): Promise<void> {\n    if (this.persistence === newPersistence) {\n      return;\n    }\n\n    const currentUser = await this.getCurrentUser();\n    await this.removeCurrentUser();\n\n    this.persistence = newPersistence;\n\n    if (currentUser) {\n      return this.setCurrentUser(currentUser);\n    }\n  }\n\n  delete(): void {\n    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n  }\n\n  static async create(\n    auth: AuthInternal,\n    persistenceHierarchy: PersistenceInternal[],\n    userKey = KeyName.AUTH_USER\n  ): Promise<PersistenceUserManager> {\n    if (!persistenceHierarchy.length) {\n      return new PersistenceUserManager(\n        _getInstance(inMemoryPersistence),\n        auth,\n        userKey\n      );\n    }\n\n    // Eliminate any persistences that are not available\n    const availablePersistences = (\n      await Promise.all(\n        persistenceHierarchy.map(async persistence => {\n          if (await persistence._isAvailable()) {\n            return persistence;\n          }\n          return undefined;\n        })\n      )\n    ).filter(persistence => persistence) as PersistenceInternal[];\n\n    // Fall back to the first persistence listed, or in memory if none available\n    let selectedPersistence =\n      availablePersistences[0] ||\n      _getInstance<PersistenceInternal>(inMemoryPersistence);\n\n    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);\n\n    // Pull out the existing user, setting the chosen persistence to that\n    // persistence if the user exists.\n    let userToMigrate: UserInternal | null = null;\n    // Note, here we check for a user in _all_ persistences, not just the\n    // ones deemed available. If we can migrate a user out of a broken\n    // persistence, we will (but only if that persistence supports migration).\n    for (const persistence of persistenceHierarchy) {\n      try {\n        const blob = await persistence._get<PersistedBlob>(key);\n        if (blob) {\n          const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n          if (persistence !== selectedPersistence) {\n            userToMigrate = user;\n          }\n          selectedPersistence = persistence;\n          break;\n        }\n      } catch {}\n    }\n\n    // If we find the user in a persistence that does support migration, use\n    // that migration path (of only persistences that support migration)\n    const migrationHierarchy = availablePersistences.filter(\n      p => p._shouldAllowMigration\n    );\n\n    // If the persistence does _not_ allow migration, just finish off here\n    if (\n      !selectedPersistence._shouldAllowMigration ||\n      !migrationHierarchy.length\n    ) {\n      return new PersistenceUserManager(selectedPersistence, auth, userKey);\n    }\n\n    selectedPersistence = migrationHierarchy[0];\n    if (userToMigrate) {\n      // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does\n      // we'll just let it bubble to surface the error.\n      await selectedPersistence._set(key, userToMigrate.toJSON());\n    }\n\n    // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues\n    // such as users getting stuck with a previous account after signing out and refreshing the tab.\n    await Promise.all(\n      persistenceHierarchy.map(async persistence => {\n        if (persistence !== selectedPersistence) {\n          try {\n            await persistence._remove(key);\n          } catch {}\n        }\n      })\n    );\n    return new PersistenceUserManager(selectedPersistence, auth, userKey);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isIE, getUA } from '@firebase/util';\n\ninterface NavigatorStandalone extends Navigator {\n  standalone?: unknown;\n}\n\ninterface Document {\n  documentMode?: number;\n}\n\n/**\n * Enums for Browser name.\n */\nexport const enum BrowserName {\n  ANDROID = 'Android',\n  BLACKBERRY = 'Blackberry',\n  EDGE = 'Edge',\n  FIREFOX = 'Firefox',\n  IE = 'IE',\n  IEMOBILE = 'IEMobile',\n  OPERA = 'Opera',\n  OTHER = 'Other',\n  CHROME = 'Chrome',\n  SAFARI = 'Safari',\n  SILK = 'Silk',\n  WEBOS = 'Webos'\n}\n\n/**\n * Determine the browser for the purposes of reporting usage to the API\n */\nexport function _getBrowserName(userAgent: string): BrowserName | string {\n  const ua = userAgent.toLowerCase();\n  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n    return BrowserName.OPERA;\n  } else if (_isIEMobile(ua)) {\n    // Windows phone IEMobile browser.\n    return BrowserName.IEMOBILE;\n  } else if (ua.includes('msie') || ua.includes('trident/')) {\n    return BrowserName.IE;\n  } else if (ua.includes('edge/')) {\n    return BrowserName.EDGE;\n  } else if (_isFirefox(ua)) {\n    return BrowserName.FIREFOX;\n  } else if (ua.includes('silk/')) {\n    return BrowserName.SILK;\n  } else if (_isBlackBerry(ua)) {\n    // Blackberry browser.\n    return BrowserName.BLACKBERRY;\n  } else if (_isWebOS(ua)) {\n    // WebOS default browser.\n    return BrowserName.WEBOS;\n  } else if (_isSafari(ua)) {\n    return BrowserName.SAFARI;\n  } else if (\n    (ua.includes('chrome/') || _isChromeIOS(ua)) &&\n    !ua.includes('edge/')\n  ) {\n    return BrowserName.CHROME;\n  } else if (_isAndroid(ua)) {\n    // Android stock browser.\n    return BrowserName.ANDROID;\n  } else {\n    // Most modern browsers have name/version at end of user agent string.\n    const re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n    const matches = userAgent.match(re);\n    if (matches?.length === 2) {\n      return matches[1];\n    }\n  }\n  return BrowserName.OTHER;\n}\n\nexport function _isFirefox(ua = getUA()): boolean {\n  return /firefox\\//i.test(ua);\n}\n\nexport function _isSafari(userAgent = getUA()): boolean {\n  const ua = userAgent.toLowerCase();\n  return (\n    ua.includes('safari/') &&\n    !ua.includes('chrome/') &&\n    !ua.includes('crios/') &&\n    !ua.includes('android')\n  );\n}\n\nexport function _isChromeIOS(ua = getUA()): boolean {\n  return /crios\\//i.test(ua);\n}\n\nexport function _isIEMobile(ua = getUA()): boolean {\n  return /iemobile/i.test(ua);\n}\n\nexport function _isAndroid(ua = getUA()): boolean {\n  return /android/i.test(ua);\n}\n\nexport function _isBlackBerry(ua = getUA()): boolean {\n  return /blackberry/i.test(ua);\n}\n\nexport function _isWebOS(ua = getUA()): boolean {\n  return /webos/i.test(ua);\n}\n\nexport function _isIOS(ua = getUA()): boolean {\n  return (\n    /iphone|ipad|ipod/i.test(ua) ||\n    (/macintosh/i.test(ua) && /mobile/i.test(ua))\n  );\n}\n\nexport function _isIOS7Or8(ua = getUA()): boolean {\n  return (\n    /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) ||\n    /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua)\n  );\n}\n\nexport function _isIOSStandalone(ua = getUA()): boolean {\n  return _isIOS(ua) && !!(window.navigator as NavigatorStandalone)?.standalone;\n}\n\nexport function _isIE10(): boolean {\n  return isIE() && (document as Document).documentMode === 10;\n}\n\nexport function _isMobileBrowser(ua: string = getUA()): boolean {\n  // TODO: implement getBrowserName equivalent for OS.\n  return (\n    _isIOS(ua) ||\n    _isAndroid(ua) ||\n    _isWebOS(ua) ||\n    _isBlackBerry(ua) ||\n    /windows phone/i.test(ua) ||\n    _isIEMobile(ua)\n  );\n}\n\nexport function _isIframe(): boolean {\n  try {\n    // Check that the current window is not the top window.\n    // If so, return true.\n    return !!(window && window !== window.top);\n  } catch (e) {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { _getBrowserName } from './browser';\nimport { getUA } from '@firebase/util';\n\nexport const enum ClientImplementation {\n  CORE = 'JsCore'\n}\n\n/**\n * @internal\n */\nexport const enum ClientPlatform {\n  BROWSER = 'Browser',\n  NODE = 'Node',\n  REACT_NATIVE = 'ReactNative',\n  CORDOVA = 'Cordova',\n  WORKER = 'Worker',\n  WEB_EXTENSION = 'WebExtension'\n}\n\n/*\n * Determine the SDK version string\n */\nexport function _getClientVersion(\n  clientPlatform: ClientPlatform,\n  frameworks: readonly string[] = []\n): string {\n  let reportedPlatform: string;\n  switch (clientPlatform) {\n    case ClientPlatform.BROWSER:\n      // In a browser environment, report the browser name.\n      reportedPlatform = _getBrowserName(getUA());\n      break;\n    case ClientPlatform.WORKER:\n      // Technically a worker runs from a browser but we need to differentiate a\n      // worker from a browser.\n      // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;\n      break;\n    default:\n      reportedPlatform = clientPlatform;\n  }\n  const reportedFrameworks = frameworks.length\n    ? frameworks.join(',')\n    : 'FirebaseCore-web'; /* default value if no other framework is used */\n  return `${reportedPlatform}/${ClientImplementation.CORE}/${SDK_VERSION}/${reportedFrameworks}`;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthInternal } from '../../model/auth';\nimport { Unsubscribe, User } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\n\ninterface MiddlewareEntry {\n  (user: User | null): Promise<void>;\n  onAbort?: () => void;\n}\n\nexport class AuthMiddlewareQueue {\n  private readonly queue: MiddlewareEntry[] = [];\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  pushCallback(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    // The callback could be sync or async. Wrap it into a\n    // function that is always async.\n    const wrappedCallback: MiddlewareEntry = (\n      user: User | null\n    ): Promise<void> =>\n      new Promise((resolve, reject) => {\n        try {\n          const result = callback(user);\n          // Either resolve with existing promise or wrap a non-promise\n          // return value into a promise.\n          resolve(result);\n        } catch (e) {\n          // Sync callback throws.\n          reject(e);\n        }\n      });\n    // Attach the onAbort if present\n    wrappedCallback.onAbort = onAbort;\n    this.queue.push(wrappedCallback);\n\n    const index = this.queue.length - 1;\n    return () => {\n      // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n      // indexing of other elements.\n      this.queue[index] = () => Promise.resolve();\n    };\n  }\n\n  async runMiddleware(nextUser: User | null): Promise<void> {\n    if (this.auth.currentUser === nextUser) {\n      return;\n    }\n\n    // While running the middleware, build a temporary stack of onAbort\n    // callbacks to call if one middleware callback rejects.\n\n    const onAbortStack: Array<() => void> = [];\n    try {\n      for (const beforeStateCallback of this.queue) {\n        await beforeStateCallback(nextUser);\n\n        // Only push the onAbort if the callback succeeds\n        if (beforeStateCallback.onAbort) {\n          onAbortStack.push(beforeStateCallback.onAbort);\n        }\n      }\n    } catch (e) {\n      // Run all onAbort, with separate try/catch to ignore any errors and\n      // continue\n      onAbortStack.reverse();\n      for (const onAbort of onAbortStack) {\n        try {\n          onAbort();\n        } catch (_) {\n          /* swallow error */\n        }\n      }\n\n      throw this.auth._errorFactory.create(AuthErrorCode.LOGIN_BLOCKED, {\n        originalMessage: (e as Error)?.message\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performApiRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\n/**\n * Request object for fetching the password policy.\n */\nexport interface GetPasswordPolicyRequest {\n  tenantId?: string;\n}\n\n/**\n * Response object for fetching the password policy.\n */\nexport interface GetPasswordPolicyResponse {\n  customStrengthOptions: {\n    minPasswordLength?: number;\n    maxPasswordLength?: number;\n    containsLowercaseCharacter?: boolean;\n    containsUppercaseCharacter?: boolean;\n    containsNumericCharacter?: boolean;\n    containsNonAlphanumericCharacter?: boolean;\n  };\n  allowedNonAlphanumericCharacters?: string[];\n  enforcementState: string;\n  forceUpgradeOnSignin?: boolean;\n  schemaVersion: number;\n}\n\n/**\n * Fetches the password policy for the currently set tenant or the project if no tenant is set.\n *\n * @param auth Auth object.\n * @param request Password policy request.\n * @returns Password policy response.\n */\nexport async function _getPasswordPolicy(\n  auth: Auth,\n  request: GetPasswordPolicyRequest = {}\n): Promise<GetPasswordPolicyResponse> {\n  return _performApiRequest<\n    GetPasswordPolicyRequest,\n    GetPasswordPolicyResponse\n  >(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_PASSWORD_POLICY,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GetPasswordPolicyResponse } from '../../api/password_policy/get_password_policy';\nimport {\n  PasswordPolicyCustomStrengthOptions,\n  PasswordPolicyInternal,\n  PasswordValidationStatusInternal\n} from '../../model/password_policy';\nimport { PasswordValidationStatus } from '../../model/public_types';\n\n// Minimum min password length enforced by the backend, even if no minimum length is set.\nconst MINIMUM_MIN_PASSWORD_LENGTH = 6;\n\n/**\n * Stores password policy requirements and provides password validation against the policy.\n *\n * @internal\n */\nexport class PasswordPolicyImpl implements PasswordPolicyInternal {\n  readonly customStrengthOptions: PasswordPolicyCustomStrengthOptions;\n  readonly allowedNonAlphanumericCharacters: string;\n  readonly enforcementState: string;\n  readonly forceUpgradeOnSignin: boolean;\n  readonly schemaVersion: number;\n\n  constructor(response: GetPasswordPolicyResponse) {\n    // Only include custom strength options defined in the response.\n    const responseOptions = response.customStrengthOptions;\n    this.customStrengthOptions = {};\n    // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n    this.customStrengthOptions.minPasswordLength =\n      responseOptions.minPasswordLength ?? MINIMUM_MIN_PASSWORD_LENGTH;\n    if (responseOptions.maxPasswordLength) {\n      this.customStrengthOptions.maxPasswordLength =\n        responseOptions.maxPasswordLength;\n    }\n    if (responseOptions.containsLowercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsLowercaseLetter =\n        responseOptions.containsLowercaseCharacter;\n    }\n    if (responseOptions.containsUppercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsUppercaseLetter =\n        responseOptions.containsUppercaseCharacter;\n    }\n    if (responseOptions.containsNumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNumericCharacter =\n        responseOptions.containsNumericCharacter;\n    }\n    if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNonAlphanumericCharacter =\n        responseOptions.containsNonAlphanumericCharacter;\n    }\n\n    this.enforcementState = response.enforcementState;\n    if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n      this.enforcementState = 'OFF';\n    }\n\n    // Use an empty string if no non-alphanumeric characters are specified in the response.\n    this.allowedNonAlphanumericCharacters =\n      response.allowedNonAlphanumericCharacters?.join('') ?? '';\n\n    this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ?? false;\n    this.schemaVersion = response.schemaVersion;\n  }\n\n  validatePassword(password: string): PasswordValidationStatus {\n    const status: PasswordValidationStatusInternal = {\n      isValid: true,\n      passwordPolicy: this\n    };\n\n    // Check the password length and character options.\n    this.validatePasswordLengthOptions(password, status);\n    this.validatePasswordCharacterOptions(password, status);\n\n    // Combine the status into single isValid property.\n    status.isValid &&= status.meetsMinPasswordLength ?? true;\n    status.isValid &&= status.meetsMaxPasswordLength ?? true;\n    status.isValid &&= status.containsLowercaseLetter ?? true;\n    status.isValid &&= status.containsUppercaseLetter ?? true;\n    status.isValid &&= status.containsNumericCharacter ?? true;\n    status.isValid &&= status.containsNonAlphanumericCharacter ?? true;\n\n    return status;\n  }\n\n  /**\n   * Validates that the password meets the length options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  private validatePasswordLengthOptions(\n    password: string,\n    status: PasswordValidationStatusInternal\n  ): void {\n    const minPasswordLength = this.customStrengthOptions.minPasswordLength;\n    const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n    if (minPasswordLength) {\n      status.meetsMinPasswordLength = password.length >= minPasswordLength;\n    }\n    if (maxPasswordLength) {\n      status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n    }\n  }\n\n  /**\n   * Validates that the password meets the character options for the policy.\n   *\n   * @param password Password to validate.\n   * @param status Validation status.\n   */\n  private validatePasswordCharacterOptions(\n    password: string,\n    status: PasswordValidationStatusInternal\n  ): void {\n    // Assign statuses for requirements even if the password is an empty string.\n    this.updatePasswordCharacterOptionsStatuses(\n      status,\n      /* containsLowercaseCharacter= */ false,\n      /* containsUppercaseCharacter= */ false,\n      /* containsNumericCharacter= */ false,\n      /* containsNonAlphanumericCharacter= */ false\n    );\n\n    let passwordChar;\n    for (let i = 0; i < password.length; i++) {\n      passwordChar = password.charAt(i);\n      this.updatePasswordCharacterOptionsStatuses(\n        status,\n        /* containsLowercaseCharacter= */ passwordChar >= 'a' &&\n          passwordChar <= 'z',\n        /* containsUppercaseCharacter= */ passwordChar >= 'A' &&\n          passwordChar <= 'Z',\n        /* containsNumericCharacter= */ passwordChar >= '0' &&\n          passwordChar <= '9',\n        /* containsNonAlphanumericCharacter= */ this.allowedNonAlphanumericCharacters.includes(\n          passwordChar\n        )\n      );\n    }\n  }\n\n  /**\n   * Updates the running validation status with the statuses for the character options.\n   * Expected to be called each time a character is processed to update each option status\n   * based on the current character.\n   *\n   * @param status Validation status.\n   * @param containsLowercaseCharacter Whether the character is a lowercase letter.\n   * @param containsUppercaseCharacter Whether the character is an uppercase letter.\n   * @param containsNumericCharacter Whether the character is a numeric character.\n   * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\n   */\n  private updatePasswordCharacterOptionsStatuses(\n    status: PasswordValidationStatusInternal,\n    containsLowercaseCharacter: boolean,\n    containsUppercaseCharacter: boolean,\n    containsNumericCharacter: boolean,\n    containsNonAlphanumericCharacter: boolean\n  ): void {\n    if (this.customStrengthOptions.containsLowercaseLetter) {\n      status.containsLowercaseLetter ||= containsLowercaseCharacter;\n    }\n    if (this.customStrengthOptions.containsUppercaseLetter) {\n      status.containsUppercaseLetter ||= containsUppercaseCharacter;\n    }\n    if (this.customStrengthOptions.containsNumericCharacter) {\n      status.containsNumericCharacter ||= containsNumericCharacter;\n    }\n    if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n      status.containsNonAlphanumericCharacter ||=\n        containsNonAlphanumericCharacter;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _isFirebaseServerApp,\n  _FirebaseService,\n  FirebaseApp\n} from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport {\n  Auth,\n  AuthErrorMap,\n  AuthSettings,\n  EmulatorConfig,\n  NextOrObserver,\n  Persistence,\n  PopupRedirectResolver,\n  User,\n  UserCredential,\n  CompleteFn,\n  ErrorFn,\n  NextFn,\n  Unsubscribe,\n  PasswordValidationStatus\n} from '../../model/public_types';\nimport {\n  createSubscribe,\n  ErrorFactory,\n  FirebaseError,\n  getModularInstance,\n  Observer,\n  Subscribe\n} from '@firebase/util';\n\nimport { AuthInternal, ConfigInternal } from '../../model/auth';\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport {\n  AuthErrorCode,\n  AuthErrorParams,\n  ErrorMapRetriever,\n  _DEFAULT_AUTH_ERROR_FACTORY\n} from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport {\n  KeyName,\n  PersistenceUserManager\n} from '../persistence/persistence_user_manager';\nimport { _reloadWithoutSaving } from '../user/reload';\nimport {\n  _assert,\n  _serverAppCurrentUserOperationNotSupportedError\n} from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { _getUserLanguage } from '../util/navigator';\nimport { _getClientVersion } from '../util/version';\nimport { HttpHeader } from '../../api';\nimport {\n  RevokeTokenRequest,\n  TokenType,\n  revokeToken\n} from '../../api/authentication/token';\nimport { AuthMiddlewareQueue } from './middleware';\nimport { RecaptchaConfig } from '../../platform_browser/recaptcha/recaptcha';\nimport { _logWarn } from '../util/log';\nimport { _getPasswordPolicy } from '../../api/password_policy/get_password_policy';\nimport { PasswordPolicyInternal } from '../../model/password_policy';\nimport { PasswordPolicyImpl } from './password_policy_impl';\nimport { getAccountInfo } from '../../api/account_management/account';\nimport { UserImpl } from '../user/user_impl';\n\ninterface AsyncAction {\n  (): Promise<void>;\n}\n\nexport const enum DefaultConfig {\n  TOKEN_API_HOST = 'securetoken.googleapis.com',\n  API_HOST = 'identitytoolkit.googleapis.com',\n  API_SCHEME = 'https'\n}\n\nexport class AuthImpl implements AuthInternal, _FirebaseService {\n  currentUser: User | null = null;\n  emulatorConfig: EmulatorConfig | null = null;\n  private operations = Promise.resolve();\n  private persistenceManager?: PersistenceUserManager;\n  private redirectPersistenceManager?: PersistenceUserManager;\n  private authStateSubscription = new Subscription<User>(this);\n  private idTokenSubscription = new Subscription<User>(this);\n  private readonly beforeStateQueue = new AuthMiddlewareQueue(this);\n  private redirectUser: UserInternal | null = null;\n  private isProactiveRefreshEnabled = false;\n  private readonly EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION: number = 1;\n\n  // Any network calls will set this to true and prevent subsequent emulator\n  // initialization\n  _canInitEmulator = true;\n  _isInitialized = false;\n  _deleted = false;\n  _initializationPromise: Promise<void> | null = null;\n  _popupRedirectResolver: PopupRedirectResolverInternal | null = null;\n  _errorFactory: ErrorFactory<AuthErrorCode, AuthErrorParams> =\n    _DEFAULT_AUTH_ERROR_FACTORY;\n  _agentRecaptchaConfig: RecaptchaConfig | null = null;\n  _tenantRecaptchaConfigs: Record<string, RecaptchaConfig> = {};\n  _projectPasswordPolicy: PasswordPolicyInternal | null = null;\n  _tenantPasswordPolicies: Record<string, PasswordPolicyInternal> = {};\n  readonly name: string;\n\n  // Tracks the last notified UID for state change listeners to prevent\n  // repeated calls to the callbacks. Undefined means it's never been\n  // called, whereas null means it's been called with a signed out user\n  private lastNotifiedUid: string | null | undefined = undefined;\n\n  languageCode: string | null = null;\n  tenantId: string | null = null;\n  settings: AuthSettings = { appVerificationDisabledForTesting: false };\n\n  constructor(\n    public readonly app: FirebaseApp,\n    private readonly heartbeatServiceProvider: Provider<'heartbeat'>,\n    private readonly appCheckServiceProvider: Provider<AppCheckInternalComponentName>,\n    public readonly config: ConfigInternal\n  ) {\n    this.name = app.name;\n    this.clientVersion = config.sdkClientVersion;\n  }\n\n  _initializeWithPersistence(\n    persistenceHierarchy: PersistenceInternal[],\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    if (popupRedirectResolver) {\n      this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n    }\n\n    // Have to check for app deletion throughout initialization (after each\n    // promise resolution)\n    this._initializationPromise = this.queue(async () => {\n      if (this._deleted) {\n        return;\n      }\n\n      this.persistenceManager = await PersistenceUserManager.create(\n        this,\n        persistenceHierarchy\n      );\n\n      if (this._deleted) {\n        return;\n      }\n\n      // Initialize the resolver early if necessary (only applicable to web:\n      // this will cause the iframe to load immediately in certain cases)\n      if (this._popupRedirectResolver?._shouldInitProactively) {\n        // If this fails, don't halt auth loading\n        try {\n          await this._popupRedirectResolver._initialize(this);\n        } catch (e) {\n          /* Ignore the error */\n        }\n      }\n\n      await this.initializeCurrentUser(popupRedirectResolver);\n\n      this.lastNotifiedUid = this.currentUser?.uid || null;\n\n      if (this._deleted) {\n        return;\n      }\n\n      this._isInitialized = true;\n    });\n\n    return this._initializationPromise;\n  }\n\n  /**\n   * If the persistence is changed in another window, the user manager will let us know\n   */\n  async _onStorageEvent(): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n\n    const user = await this.assertedPersistence.getCurrentUser();\n\n    if (!this.currentUser && !user) {\n      // No change, do nothing (was signed out and remained signed out).\n      return;\n    }\n\n    // If the same user is to be synchronized.\n    if (this.currentUser && user && this.currentUser.uid === user.uid) {\n      // Data update, simply copy data changes.\n      this._currentUser._assign(user);\n      // If tokens changed from previous user tokens, this will trigger\n      // notifyAuthListeners_.\n      await this.currentUser.getIdToken();\n      return;\n    }\n\n    // Update current Auth state. Either a new login or logout.\n    // Skip blocking callbacks, they should not apply to a change in another tab.\n    await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);\n  }\n\n  private async initializeCurrentUserFromIdToken(\n    idToken: string\n  ): Promise<void> {\n    try {\n      const response = await getAccountInfo(this, { idToken });\n      const user = await UserImpl._fromGetAccountInfoResponse(\n        this,\n        response,\n        idToken\n      );\n      await this.directlySetCurrentUser(user);\n    } catch (err) {\n      console.warn(\n        'FirebaseServerApp could not login user with provided authIdToken: ',\n        err\n      );\n      await this.directlySetCurrentUser(null);\n    }\n  }\n\n  private async initializeCurrentUser(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    if (_isFirebaseServerApp(this.app)) {\n      const idToken = this.app.settings.authIdToken;\n      if (idToken) {\n        // Start the auth operation in the next tick to allow a moment for the customer's app to\n        // attach an emulator, if desired.\n        return new Promise<void>(resolve => {\n          setTimeout(() =>\n            this.initializeCurrentUserFromIdToken(idToken).then(\n              resolve,\n              resolve\n            )\n          );\n        });\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    // First check to see if we have a pending redirect event.\n    const previouslyStoredUser =\n      (await this.assertedPersistence.getCurrentUser()) as UserInternal | null;\n    let futureCurrentUser = previouslyStoredUser;\n    let needsTocheckMiddleware = false;\n    if (popupRedirectResolver && this.config.authDomain) {\n      await this.getOrInitRedirectPersistenceManager();\n      const redirectUserEventId = this.redirectUser?._redirectEventId;\n      const storedUserEventId = futureCurrentUser?._redirectEventId;\n      const result = await this.tryRedirectSignIn(popupRedirectResolver);\n\n      // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n      // matches the redirect user, then we want to initially sign in with the\n      // new user object from result.\n      // TODO(samgho): More thoroughly test all of this\n      if (\n        (!redirectUserEventId || redirectUserEventId === storedUserEventId) &&\n        result?.user\n      ) {\n        futureCurrentUser = result.user as UserInternal;\n        needsTocheckMiddleware = true;\n      }\n    }\n\n    // If no user in persistence, there is no current user. Set to null.\n    if (!futureCurrentUser) {\n      return this.directlySetCurrentUser(null);\n    }\n\n    if (!futureCurrentUser._redirectEventId) {\n      // This isn't a redirect link operation, we can reload and bail.\n      // First though, ensure that we check the middleware is happy.\n      if (needsTocheckMiddleware) {\n        try {\n          await this.beforeStateQueue.runMiddleware(futureCurrentUser);\n        } catch (e) {\n          futureCurrentUser = previouslyStoredUser;\n          // We know this is available since the bit is only set when the\n          // resolver is available\n          this._popupRedirectResolver!._overrideRedirectResult(this, () =>\n            Promise.reject(e)\n          );\n        }\n      }\n\n      if (futureCurrentUser) {\n        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n      } else {\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    _assert(this._popupRedirectResolver, this, AuthErrorCode.ARGUMENT_ERROR);\n    await this.getOrInitRedirectPersistenceManager();\n\n    // If the redirect user's event ID matches the current user's event ID,\n    // DO NOT reload the current user, otherwise they'll be cleared from storage.\n    // This is important for the reauthenticateWithRedirect() flow.\n    if (\n      this.redirectUser &&\n      this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId\n    ) {\n      return this.directlySetCurrentUser(futureCurrentUser);\n    }\n\n    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);\n  }\n\n  private async tryRedirectSignIn(\n    redirectResolver: PopupRedirectResolver\n  ): Promise<UserCredential | null> {\n    // The redirect user needs to be checked (and signed in if available)\n    // during auth initialization. All of the normal sign in and link/reauth\n    // flows call back into auth and push things onto the promise queue. We\n    // need to await the result of the redirect sign in *inside the promise\n    // queue*. This presents a problem: we run into deadlock. See:\n    //    ┌> [Initialization] ─────┐\n    //    ┌> [<other queue tasks>] │\n    //    └─ [getRedirectResult] <─┘\n    //    where [] are tasks on the queue and arrows denote awaits\n    // Initialization will never complete because it's waiting on something\n    // that's waiting for initialization to complete!\n    //\n    // Instead, this method calls getRedirectResult() (stored in\n    // _completeRedirectFn) with an optional parameter that instructs all of\n    // the underlying auth operations to skip anything that mutates auth state.\n\n    let result: UserCredential | null = null;\n    try {\n      // We know this._popupRedirectResolver is set since redirectResolver\n      // is passed in. The _completeRedirectFn expects the unwrapped extern.\n      result = await this._popupRedirectResolver!._completeRedirectFn(\n        this,\n        redirectResolver,\n        true\n      );\n    } catch (e) {\n      // Swallow any errors here; the code can retrieve them in\n      // getRedirectResult().\n      await this._setRedirectUser(null);\n    }\n\n    return result;\n  }\n\n  private async reloadAndSetCurrentUserOrClear(\n    user: UserInternal\n  ): Promise<void> {\n    try {\n      await _reloadWithoutSaving(user);\n    } catch (e) {\n      if (\n        (e as FirebaseError)?.code !==\n        `auth/${AuthErrorCode.NETWORK_REQUEST_FAILED}`\n      ) {\n        // Something's wrong with the user's token. Log them out and remove\n        // them from storage\n        return this.directlySetCurrentUser(null);\n      }\n    }\n\n    return this.directlySetCurrentUser(user);\n  }\n\n  useDeviceLanguage(): void {\n    this.languageCode = _getUserLanguage();\n  }\n\n  async _delete(): Promise<void> {\n    this._deleted = true;\n  }\n\n  async updateCurrentUser(userExtern: User | null): Promise<void> {\n    if (_isFirebaseServerApp(this.app)) {\n      return Promise.reject(\n        _serverAppCurrentUserOperationNotSupportedError(this)\n      );\n    }\n    // The public updateCurrentUser method needs to make a copy of the user,\n    // and also check that the project matches\n    const user = userExtern\n      ? (getModularInstance(userExtern) as UserInternal)\n      : null;\n    if (user) {\n      _assert(\n        user.auth.config.apiKey === this.config.apiKey,\n        this,\n        AuthErrorCode.INVALID_AUTH\n      );\n    }\n    return this._updateCurrentUser(user && user._clone(this));\n  }\n\n  async _updateCurrentUser(\n    user: User | null,\n    skipBeforeStateCallbacks: boolean = false\n  ): Promise<void> {\n    if (this._deleted) {\n      return;\n    }\n    if (user) {\n      _assert(\n        this.tenantId === user.tenantId,\n        this,\n        AuthErrorCode.TENANT_ID_MISMATCH\n      );\n    }\n\n    if (!skipBeforeStateCallbacks) {\n      await this.beforeStateQueue.runMiddleware(user);\n    }\n\n    return this.queue(async () => {\n      await this.directlySetCurrentUser(user as UserInternal | null);\n      this.notifyAuthListeners();\n    });\n  }\n\n  async signOut(): Promise<void> {\n    if (_isFirebaseServerApp(this.app)) {\n      return Promise.reject(\n        _serverAppCurrentUserOperationNotSupportedError(this)\n      );\n    }\n    // Run first, to block _setRedirectUser() if any callbacks fail.\n    await this.beforeStateQueue.runMiddleware(null);\n    // Clear the redirect user when signOut is called\n    if (this.redirectPersistenceManager || this._popupRedirectResolver) {\n      await this._setRedirectUser(null);\n    }\n\n    // Prevent callbacks from being called again in _updateCurrentUser, as\n    // they were already called in the first line.\n    return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);\n  }\n\n  setPersistence(persistence: Persistence): Promise<void> {\n    if (_isFirebaseServerApp(this.app)) {\n      return Promise.reject(\n        _serverAppCurrentUserOperationNotSupportedError(this)\n      );\n    }\n    return this.queue(async () => {\n      await this.assertedPersistence.setPersistence(_getInstance(persistence));\n    });\n  }\n\n  _getRecaptchaConfig(): RecaptchaConfig | null {\n    if (this.tenantId == null) {\n      return this._agentRecaptchaConfig;\n    } else {\n      return this._tenantRecaptchaConfigs[this.tenantId];\n    }\n  }\n\n  async validatePassword(password: string): Promise<PasswordValidationStatus> {\n    if (!this._getPasswordPolicyInternal()) {\n      await this._updatePasswordPolicy();\n    }\n\n    // Password policy will be defined after fetching.\n    const passwordPolicy: PasswordPolicyInternal =\n      this._getPasswordPolicyInternal()!;\n\n    // Check that the policy schema version is supported by the SDK.\n    // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n    if (\n      passwordPolicy.schemaVersion !==\n      this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION\n    ) {\n      return Promise.reject(\n        this._errorFactory.create(\n          AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION,\n          {}\n        )\n      );\n    }\n\n    return passwordPolicy.validatePassword(password);\n  }\n\n  _getPasswordPolicyInternal(): PasswordPolicyInternal | null {\n    if (this.tenantId === null) {\n      return this._projectPasswordPolicy;\n    } else {\n      return this._tenantPasswordPolicies[this.tenantId];\n    }\n  }\n\n  async _updatePasswordPolicy(): Promise<void> {\n    const response = await _getPasswordPolicy(this);\n\n    const passwordPolicy: PasswordPolicyInternal = new PasswordPolicyImpl(\n      response\n    );\n\n    if (this.tenantId === null) {\n      this._projectPasswordPolicy = passwordPolicy;\n    } else {\n      this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n    }\n  }\n\n  _getPersistence(): string {\n    return this.assertedPersistence.persistence.type;\n  }\n\n  _updateErrorMap(errorMap: AuthErrorMap): void {\n    this._errorFactory = new ErrorFactory<AuthErrorCode, AuthErrorParams>(\n      'auth',\n      'Firebase',\n      (errorMap as ErrorMapRetriever)()\n    );\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.authStateSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  beforeAuthStateChanged(\n    callback: (user: User | null) => void | Promise<void>,\n    onAbort?: () => void\n  ): Unsubscribe {\n    return this.beforeStateQueue.pushCallback(callback, onAbort);\n  }\n\n  onIdTokenChanged(\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    return this.registerStateListener(\n      this.idTokenSubscription,\n      nextOrObserver,\n      error,\n      completed\n    );\n  }\n\n  authStateReady(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.currentUser) {\n        resolve();\n      } else {\n        const unsubscribe = this.onAuthStateChanged(() => {\n          unsubscribe();\n          resolve();\n        }, reject);\n      }\n    });\n  }\n\n  /**\n   * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n   */\n  async revokeAccessToken(token: string): Promise<void> {\n    if (this.currentUser) {\n      const idToken = await this.currentUser.getIdToken();\n      // Generalize this to accept other providers once supported.\n      const request: RevokeTokenRequest = {\n        providerId: 'apple.com',\n        tokenType: TokenType.ACCESS_TOKEN,\n        token,\n        idToken\n      };\n      if (this.tenantId != null) {\n        request.tenantId = this.tenantId;\n      }\n      await revokeToken(this, request);\n    }\n  }\n\n  toJSON(): object {\n    return {\n      apiKey: this.config.apiKey,\n      authDomain: this.config.authDomain,\n      appName: this.name,\n      currentUser: this._currentUser?.toJSON()\n    };\n  }\n\n  async _setRedirectUser(\n    user: UserInternal | null,\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<void> {\n    const redirectManager = await this.getOrInitRedirectPersistenceManager(\n      popupRedirectResolver\n    );\n    return user === null\n      ? redirectManager.removeCurrentUser()\n      : redirectManager.setCurrentUser(user);\n  }\n\n  private async getOrInitRedirectPersistenceManager(\n    popupRedirectResolver?: PopupRedirectResolver\n  ): Promise<PersistenceUserManager> {\n    if (!this.redirectPersistenceManager) {\n      const resolver: PopupRedirectResolverInternal | null =\n        (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||\n        this._popupRedirectResolver;\n      _assert(resolver, this, AuthErrorCode.ARGUMENT_ERROR);\n      this.redirectPersistenceManager = await PersistenceUserManager.create(\n        this,\n        [_getInstance(resolver._redirectPersistence)],\n        KeyName.REDIRECT_USER\n      );\n      this.redirectUser =\n        await this.redirectPersistenceManager.getCurrentUser();\n    }\n\n    return this.redirectPersistenceManager;\n  }\n\n  async _redirectUserForId(id: string): Promise<UserInternal | null> {\n    // Make sure we've cleared any pending persistence actions if we're not in\n    // the initializer\n    if (this._isInitialized) {\n      await this.queue(async () => {});\n    }\n\n    if (this._currentUser?._redirectEventId === id) {\n      return this._currentUser;\n    }\n\n    if (this.redirectUser?._redirectEventId === id) {\n      return this.redirectUser;\n    }\n\n    return null;\n  }\n\n  async _persistUserIfCurrent(user: UserInternal): Promise<void> {\n    if (user === this.currentUser) {\n      return this.queue(async () => this.directlySetCurrentUser(user));\n    }\n  }\n\n  /** Notifies listeners only if the user is current */\n  _notifyListenersIfCurrent(user: UserInternal): void {\n    if (user === this.currentUser) {\n      this.notifyAuthListeners();\n    }\n  }\n\n  _key(): string {\n    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;\n  }\n\n  _startProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = true;\n    if (this.currentUser) {\n      this._currentUser._startProactiveRefresh();\n    }\n  }\n\n  _stopProactiveRefresh(): void {\n    this.isProactiveRefreshEnabled = false;\n    if (this.currentUser) {\n      this._currentUser._stopProactiveRefresh();\n    }\n  }\n\n  /** Returns the current user cast as the internal type */\n  get _currentUser(): UserInternal {\n    return this.currentUser as UserInternal;\n  }\n\n  private notifyAuthListeners(): void {\n    if (!this._isInitialized) {\n      return;\n    }\n\n    this.idTokenSubscription.next(this.currentUser);\n\n    const currentUid = this.currentUser?.uid ?? null;\n    if (this.lastNotifiedUid !== currentUid) {\n      this.lastNotifiedUid = currentUid;\n      this.authStateSubscription.next(this.currentUser);\n    }\n  }\n\n  private registerStateListener(\n    subscription: Subscription<User>,\n    nextOrObserver: NextOrObserver<User>,\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe {\n    if (this._deleted) {\n      return () => {};\n    }\n\n    const cb =\n      typeof nextOrObserver === 'function'\n        ? nextOrObserver\n        : nextOrObserver.next.bind(nextOrObserver);\n\n    let isUnsubscribed = false;\n\n    const promise = this._isInitialized\n      ? Promise.resolve()\n      : this._initializationPromise;\n    _assert(promise, this, AuthErrorCode.INTERNAL_ERROR);\n    // The callback needs to be called asynchronously per the spec.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    promise.then(() => {\n      if (isUnsubscribed) {\n        return;\n      }\n      cb(this.currentUser);\n    });\n\n    if (typeof nextOrObserver === 'function') {\n      const unsubscribe = subscription.addObserver(\n        nextOrObserver,\n        error,\n        completed\n      );\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    } else {\n      const unsubscribe = subscription.addObserver(nextOrObserver);\n      return () => {\n        isUnsubscribed = true;\n        unsubscribe();\n      };\n    }\n  }\n\n  /**\n   * Unprotected (from race conditions) method to set the current user. This\n   * should only be called from within a queued callback. This is necessary\n   * because the queue shouldn't rely on another queued callback.\n   */\n  private async directlySetCurrentUser(\n    user: UserInternal | null\n  ): Promise<void> {\n    if (this.currentUser && this.currentUser !== user) {\n      this._currentUser._stopProactiveRefresh();\n    }\n    if (user && this.isProactiveRefreshEnabled) {\n      user._startProactiveRefresh();\n    }\n\n    this.currentUser = user;\n\n    if (user) {\n      await this.assertedPersistence.setCurrentUser(user);\n    } else {\n      await this.assertedPersistence.removeCurrentUser();\n    }\n  }\n\n  private queue(action: AsyncAction): Promise<void> {\n    // In case something errors, the callback still should be called in order\n    // to keep the promise chain alive\n    this.operations = this.operations.then(action, action);\n    return this.operations;\n  }\n\n  private get assertedPersistence(): PersistenceUserManager {\n    _assert(this.persistenceManager, this, AuthErrorCode.INTERNAL_ERROR);\n    return this.persistenceManager;\n  }\n\n  private frameworks: string[] = [];\n  private clientVersion: string;\n  _logFramework(framework: string): void {\n    if (!framework || this.frameworks.includes(framework)) {\n      return;\n    }\n    this.frameworks.push(framework);\n\n    // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n    // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n    this.frameworks.sort();\n    this.clientVersion = _getClientVersion(\n      this.config.clientPlatform,\n      this._getFrameworks()\n    );\n  }\n  _getFrameworks(): readonly string[] {\n    return this.frameworks;\n  }\n  async _getAdditionalHeaders(): Promise<Record<string, string>> {\n    // Additional headers on every request\n    const headers: Record<string, string> = {\n      [HttpHeader.X_CLIENT_VERSION]: this.clientVersion\n    };\n\n    if (this.app.options.appId) {\n      headers[HttpHeader.X_FIREBASE_GMPID] = this.app.options.appId;\n    }\n\n    // If the heartbeat service exists, add the heartbeat string\n    const heartbeatsHeader = await this.heartbeatServiceProvider\n      .getImmediate({\n        optional: true\n      })\n      ?.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers[HttpHeader.X_FIREBASE_CLIENT] = heartbeatsHeader;\n    }\n\n    // If the App Check service exists, add the App Check token in the headers\n    const appCheckToken = await this._getAppCheckToken();\n    if (appCheckToken) {\n      headers[HttpHeader.X_FIREBASE_APP_CHECK] = appCheckToken;\n    }\n\n    return headers;\n  }\n\n  async _getAppCheckToken(): Promise<string | undefined> {\n    const appCheckTokenResult = await this.appCheckServiceProvider\n      .getImmediate({ optional: true })\n      ?.getToken();\n    if (appCheckTokenResult?.error) {\n      // Context: appCheck.getToken() will never throw even if an error happened.\n      // In the error case, a dummy token will be returned along with an error field describing\n      // the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      _logWarn(\n        `Error while retrieving App Check token: ${appCheckTokenResult.error}`\n      );\n    }\n    return appCheckTokenResult?.token;\n  }\n}\n\n/**\n * Method to be used to cast down to our private implementation of Auth.\n * It will also handle unwrapping from the compat type if necessary\n *\n * @param auth Auth object passed in from developer\n */\nexport function _castAuth(auth: Auth): AuthInternal {\n  return getModularInstance(auth) as AuthInternal;\n}\n\n/** Helper class to wrap subscriber logic */\nclass Subscription<T> {\n  private observer: Observer<T | null> | null = null;\n  readonly addObserver: Subscribe<T | null> = createSubscribe(\n    observer => (this.observer = observer)\n  );\n\n  constructor(readonly auth: AuthInternal) {}\n\n  get next(): NextFn<T | null> {\n    _assert(this.observer, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return this.observer.next.bind(this.observer);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninterface ExternalJSProvider {\n  loadJS(url: string): Promise<Event>;\n  recaptchaV2Script: string;\n  recaptchaEnterpriseScript: string;\n  gapiScript: string;\n}\n\nlet externalJSProvider: ExternalJSProvider = {\n  async loadJS() {\n    throw new Error('Unable to load external scripts');\n  },\n\n  recaptchaV2Script: '',\n  recaptchaEnterpriseScript: '',\n  gapiScript: ''\n};\n\nexport function _setExternalJSProvider(p: ExternalJSProvider): void {\n  externalJSProvider = p;\n}\n\nexport function _loadJS(url: string): Promise<Event> {\n  return externalJSProvider.loadJS(url);\n}\n\nexport function _recaptchaV2ScriptUrl(): string {\n  return externalJSProvider.recaptchaV2Script;\n}\n\nexport function _recaptchaEnterpriseScriptUrl(): string {\n  return externalJSProvider.recaptchaEnterpriseScript;\n}\n\nexport function _gapiScriptUrl(): string {\n  return externalJSProvider.gapiScript;\n}\n\nexport function _generateCallbackName(prefix: string): string {\n  return `__${prefix}${Math.floor(Math.random() * 1000000)}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport { AuthInternal } from '../../model/auth';\nimport { RecaptchaParameters } from '../../model/public_types';\nimport {\n  Recaptcha,\n  GreCAPTCHATopLevel,\n  GreCAPTCHARenderOption,\n  GreCAPTCHA\n} from './recaptcha';\n\nexport const _SOLVE_TIME_MS = 500;\nexport const _EXPIRATION_TIME_MS = 60_000;\nexport const _WIDGET_ID_START = 1_000_000_000_000;\n\nexport interface Widget {\n  getResponse: () => string | null;\n  delete: () => void;\n  execute: () => void;\n}\n\nexport class MockReCaptcha implements Recaptcha {\n  private counter = _WIDGET_ID_START;\n  _widgets = new Map<number, Widget>();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  render(\n    container: string | HTMLElement,\n    parameters?: RecaptchaParameters\n  ): number {\n    const id = this.counter;\n    this._widgets.set(\n      id,\n      new MockWidget(container, this.auth.name, parameters || {})\n    );\n    this.counter++;\n    return id;\n  }\n\n  reset(optWidgetId?: number): void {\n    const id = optWidgetId || _WIDGET_ID_START;\n    void this._widgets.get(id)?.delete();\n    this._widgets.delete(id);\n  }\n\n  getResponse(optWidgetId?: number): string {\n    const id = optWidgetId || _WIDGET_ID_START;\n    return this._widgets.get(id)?.getResponse() || '';\n  }\n\n  async execute(optWidgetId?: number | string): Promise<string> {\n    const id: number = (optWidgetId as number) || _WIDGET_ID_START;\n    void this._widgets.get(id)?.execute();\n    return '';\n  }\n}\n\nexport class MockGreCAPTCHATopLevel implements GreCAPTCHATopLevel {\n  enterprise: GreCAPTCHA = new MockGreCAPTCHA();\n  ready(callback: () => void): void {\n    callback();\n  }\n\n  execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey: string,\n    _options: { action: string }\n  ): Promise<string> {\n    return Promise.resolve('token');\n  }\n  render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container: string | HTMLElement,\n    _parameters: GreCAPTCHARenderOption\n  ): string {\n    return '';\n  }\n}\n\nexport class MockGreCAPTCHA implements GreCAPTCHA {\n  ready(callback: () => void): void {\n    callback();\n  }\n\n  execute(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _siteKey: string,\n    _options: { action: string }\n  ): Promise<string> {\n    return Promise.resolve('token');\n  }\n  render(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _container: string | HTMLElement,\n    _parameters: GreCAPTCHARenderOption\n  ): string {\n    return '';\n  }\n}\n\nexport class MockWidget {\n  private readonly container: HTMLElement;\n  private readonly isVisible: boolean;\n  private timerId: number | null = null;\n  private deleted = false;\n  private responseToken: string | null = null;\n  private readonly clickHandler = (): void => {\n    this.execute();\n  };\n\n  constructor(\n    containerOrId: string | HTMLElement,\n    appName: string,\n    private readonly params: RecaptchaParameters\n  ) {\n    const container =\n      typeof containerOrId === 'string'\n        ? document.getElementById(containerOrId)\n        : containerOrId;\n    _assert(container, AuthErrorCode.ARGUMENT_ERROR, { appName });\n\n    this.container = container;\n    this.isVisible = this.params.size !== 'invisible';\n    if (this.isVisible) {\n      this.execute();\n    } else {\n      this.container.addEventListener('click', this.clickHandler);\n    }\n  }\n\n  getResponse(): string | null {\n    this.checkIfDeleted();\n    return this.responseToken;\n  }\n\n  delete(): void {\n    this.checkIfDeleted();\n    this.deleted = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = null;\n    }\n    this.container.removeEventListener('click', this.clickHandler);\n  }\n\n  execute(): void {\n    this.checkIfDeleted();\n    if (this.timerId) {\n      return;\n    }\n\n    this.timerId = window.setTimeout(() => {\n      this.responseToken = generateRandomAlphaNumericString(50);\n      const { callback, 'expired-callback': expiredCallback } = this.params;\n      if (callback) {\n        try {\n          callback(this.responseToken);\n        } catch (e) {}\n      }\n\n      this.timerId = window.setTimeout(() => {\n        this.timerId = null;\n        this.responseToken = null;\n        if (expiredCallback) {\n          try {\n            expiredCallback();\n          } catch (e) {}\n        }\n\n        if (this.isVisible) {\n          this.execute();\n        }\n      }, _EXPIRATION_TIME_MS);\n    }, _SOLVE_TIME_MS);\n  }\n\n  private checkIfDeleted(): void {\n    if (this.deleted) {\n      throw new Error('reCAPTCHA mock was already deleted!');\n    }\n  }\n}\n\nfunction generateRandomAlphaNumericString(len: number): string {\n  const chars = [];\n  const allowedChars =\n    '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  for (let i = 0; i < len; i++) {\n    chars.push(\n      allowedChars.charAt(Math.floor(Math.random() * allowedChars.length))\n    );\n  }\n  return chars.join('');\n}\n","/* eslint-disable @typescript-eslint/no-require-imports */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isEnterprise, RecaptchaConfig } from './recaptcha';\nimport { getRecaptchaConfig } from '../../api/authentication/recaptcha';\nimport {\n  RecaptchaClientType,\n  RecaptchaVersion,\n  RecaptchaActionName,\n  RecaptchaAuthProvider,\n  EnforcementState\n} from '../../api';\n\nimport { Auth } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport * as jsHelpers from '../load_js';\nimport { AuthErrorCode } from '../../core/errors';\nimport { StartPhoneMfaEnrollmentRequest } from '../../api/account_management/mfa';\nimport { StartPhoneMfaSignInRequest } from '../../api/authentication/mfa';\nimport { MockGreCAPTCHATopLevel } from './recaptcha_mock';\n\nexport const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\nexport const FAKE_TOKEN = 'NO_RECAPTCHA';\n\nexport class RecaptchaEnterpriseVerifier {\n  /**\n   * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\n   */\n  readonly type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n\n  private readonly auth: AuthInternal;\n\n  /**\n   *\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   */\n  constructor(authExtern: Auth) {\n    this.auth = _castAuth(authExtern);\n  }\n\n  /**\n   * Executes the verification process.\n   *\n   * @returns A Promise for a token that can be used to assert the validity of a request.\n   */\n  async verify(\n    action: string = 'verify',\n    forceRefresh = false\n  ): Promise<string> {\n    async function retrieveSiteKey(auth: AuthInternal): Promise<string> {\n      if (!forceRefresh) {\n        if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {\n          return auth._agentRecaptchaConfig.siteKey;\n        }\n        if (\n          auth.tenantId != null &&\n          auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined\n        ) {\n          return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;\n        }\n      }\n\n      return new Promise<string>(async (resolve, reject) => {\n        getRecaptchaConfig(auth, {\n          clientType: RecaptchaClientType.WEB,\n          version: RecaptchaVersion.ENTERPRISE\n        })\n          .then(response => {\n            if (response.recaptchaKey === undefined) {\n              reject(new Error('recaptcha Enterprise site key undefined'));\n            } else {\n              const config = new RecaptchaConfig(response);\n              if (auth.tenantId == null) {\n                auth._agentRecaptchaConfig = config;\n              } else {\n                auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n              }\n              return resolve(config.siteKey);\n            }\n          })\n          .catch(error => {\n            reject(error);\n          });\n      });\n    }\n\n    function retrieveRecaptchaToken(\n      siteKey: string,\n      resolve: (value: string | PromiseLike<string>) => void,\n      reject: (reason?: unknown) => void\n    ): void {\n      const grecaptcha = window.grecaptcha;\n      if (isEnterprise(grecaptcha)) {\n        grecaptcha.enterprise.ready(() => {\n          grecaptcha.enterprise\n            .execute(siteKey, { action })\n            .then(token => {\n              resolve(token);\n            })\n            .catch(() => {\n              resolve(FAKE_TOKEN);\n            });\n        });\n      } else {\n        reject(Error('No reCAPTCHA enterprise script loaded.'));\n      }\n    }\n\n    // Returns Promise for a mock token when appVerificationDisabledForTesting is true.\n    if (this.auth.settings.appVerificationDisabledForTesting) {\n      const mockRecaptcha = new MockGreCAPTCHATopLevel();\n      return mockRecaptcha.execute('siteKey', { action: 'verify' });\n    }\n\n    return new Promise<string>((resolve, reject) => {\n      retrieveSiteKey(this.auth)\n        .then(siteKey => {\n          if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n            retrieveRecaptchaToken(siteKey, resolve, reject);\n          } else {\n            if (typeof window === 'undefined') {\n              reject(\n                new Error('RecaptchaVerifier is only supported in browser')\n              );\n              return;\n            }\n            let url = jsHelpers._recaptchaEnterpriseScriptUrl();\n            if (url.length !== 0) {\n              url += siteKey;\n            }\n            jsHelpers\n              ._loadJS(url)\n              .then(() => {\n                retrieveRecaptchaToken(siteKey, resolve, reject);\n              })\n              .catch(error => {\n                reject(error);\n              });\n          }\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n}\n\nexport async function injectRecaptchaFields<T>(\n  auth: AuthInternal,\n  request: T,\n  action: RecaptchaActionName,\n  isCaptchaResp = false,\n  isFakeToken = false\n): Promise<T> {\n  const verifier = new RecaptchaEnterpriseVerifier(auth);\n  let captchaResponse;\n\n  if (isFakeToken) {\n    captchaResponse = FAKE_TOKEN;\n  } else {\n    try {\n      captchaResponse = await verifier.verify(action);\n    } catch (error) {\n      captchaResponse = await verifier.verify(action, true);\n    }\n  }\n\n  const newRequest = { ...request };\n  if (\n    action === RecaptchaActionName.MFA_SMS_ENROLLMENT ||\n    action === RecaptchaActionName.MFA_SMS_SIGNIN\n  ) {\n    if ('phoneEnrollmentInfo' in newRequest) {\n      const phoneNumber = (\n        newRequest as unknown as StartPhoneMfaEnrollmentRequest\n      ).phoneEnrollmentInfo.phoneNumber;\n      const recaptchaToken = (\n        newRequest as unknown as StartPhoneMfaEnrollmentRequest\n      ).phoneEnrollmentInfo.recaptchaToken;\n\n      Object.assign(newRequest, {\n        'phoneEnrollmentInfo': {\n          phoneNumber,\n          recaptchaToken,\n          captchaResponse,\n          'clientType': RecaptchaClientType.WEB,\n          'recaptchaVersion': RecaptchaVersion.ENTERPRISE\n        }\n      });\n    } else if ('phoneSignInInfo' in newRequest) {\n      const recaptchaToken = (\n        newRequest as unknown as StartPhoneMfaSignInRequest\n      ).phoneSignInInfo.recaptchaToken;\n\n      Object.assign(newRequest, {\n        'phoneSignInInfo': {\n          recaptchaToken,\n          captchaResponse,\n          'clientType': RecaptchaClientType.WEB,\n          'recaptchaVersion': RecaptchaVersion.ENTERPRISE\n        }\n      });\n    }\n    return newRequest;\n  }\n\n  if (!isCaptchaResp) {\n    Object.assign(newRequest, { captchaResponse });\n  } else {\n    Object.assign(newRequest, { 'captchaResp': captchaResponse });\n  }\n  Object.assign(newRequest, { 'clientType': RecaptchaClientType.WEB });\n  Object.assign(newRequest, {\n    'recaptchaVersion': RecaptchaVersion.ENTERPRISE\n  });\n  return newRequest;\n}\n\ntype ActionMethod<TRequest, TResponse> = (\n  auth: AuthInternal,\n  request: TRequest\n) => Promise<TResponse>;\n\nexport async function handleRecaptchaFlow<TRequest, TResponse>(\n  authInstance: AuthInternal,\n  request: TRequest,\n  actionName: RecaptchaActionName,\n  actionMethod: ActionMethod<TRequest, TResponse>,\n  recaptchaAuthProvider: RecaptchaAuthProvider\n): Promise<TResponse> {\n  if (recaptchaAuthProvider === RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER) {\n    if (\n      authInstance\n        ._getRecaptchaConfig()\n        ?.isProviderEnabled(RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER)\n    ) {\n      const requestWithRecaptcha = await injectRecaptchaFields(\n        authInstance,\n        request,\n        actionName,\n        actionName === RecaptchaActionName.GET_OOB_CODE\n      );\n      return actionMethod(authInstance, requestWithRecaptcha);\n    } else {\n      return actionMethod(authInstance, request).catch(async error => {\n        if (error.code === `auth/${AuthErrorCode.MISSING_RECAPTCHA_TOKEN}`) {\n          console.log(\n            `${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`\n          );\n          const requestWithRecaptcha = await injectRecaptchaFields(\n            authInstance,\n            request,\n            actionName,\n            actionName === RecaptchaActionName.GET_OOB_CODE\n          );\n          return actionMethod(authInstance, requestWithRecaptcha);\n        } else {\n          return Promise.reject(error);\n        }\n      });\n    }\n  } else if (recaptchaAuthProvider === RecaptchaAuthProvider.PHONE_PROVIDER) {\n    if (\n      authInstance\n        ._getRecaptchaConfig()\n        ?.isProviderEnabled(RecaptchaAuthProvider.PHONE_PROVIDER)\n    ) {\n      const requestWithRecaptcha = await injectRecaptchaFields(\n        authInstance,\n        request,\n        actionName\n      );\n\n      return actionMethod(authInstance, requestWithRecaptcha).catch(\n        async error => {\n          if (\n            authInstance\n              ._getRecaptchaConfig()\n              ?.getProviderEnforcementState(\n                RecaptchaAuthProvider.PHONE_PROVIDER\n              ) === EnforcementState.AUDIT\n          ) {\n            // AUDIT mode\n            if (\n              error.code === `auth/${AuthErrorCode.MISSING_RECAPTCHA_TOKEN}` ||\n              error.code === `auth/${AuthErrorCode.INVALID_APP_CREDENTIAL}`\n            ) {\n              console.log(\n                `Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`\n              );\n              // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token\n              // check fails.\n              // Fallback to reCAPTCHA v2 flow.\n              const requestWithRecaptchaFields = await injectRecaptchaFields(\n                authInstance,\n                request,\n                actionName,\n                false, // isCaptchaResp\n                true // isFakeToken\n              );\n              // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.\n              return actionMethod(authInstance, requestWithRecaptchaFields);\n            }\n          }\n          // ENFORCE mode or AUDIT mode with any other error.\n          return Promise.reject(error);\n        }\n      );\n    } else {\n      // Do reCAPTCHA v2 flow.\n      const requestWithRecaptchaFields = await injectRecaptchaFields(\n        authInstance,\n        request,\n        actionName,\n        false, // isCaptchaResp\n        true // isFakeToken\n      );\n\n      // This will call the PhoneApiCaller to fetch and inject v2 token.\n      return actionMethod(authInstance, requestWithRecaptchaFields);\n    }\n  } else {\n    return Promise.reject(\n      recaptchaAuthProvider + ' provider is not supported.'\n    );\n  }\n}\n\nexport async function _initializeRecaptchaConfig(auth: Auth): Promise<void> {\n  const authInternal = _castAuth(auth);\n\n  const response = await getRecaptchaConfig(authInternal, {\n    clientType: RecaptchaClientType.WEB,\n    version: RecaptchaVersion.ENTERPRISE\n  });\n\n  const config = new RecaptchaConfig(response);\n  if (authInternal.tenantId == null) {\n    authInternal._agentRecaptchaConfig = config;\n  } else {\n    authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n  }\n\n  if (config.isAnyProviderEnabled()) {\n    const verifier = new RecaptchaEnterpriseVerifier(authInternal);\n    void verifier.verify();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp } from '@firebase/app';\nimport { deepEqual } from '@firebase/util';\nimport { Auth, Dependencies } from '../../model/public_types';\n\nimport { AuthErrorCode } from '../errors';\nimport { PersistenceInternal } from '../persistence';\nimport { _fail } from '../util/assert';\nimport { _getInstance } from '../util/instantiator';\nimport { AuthImpl } from './auth_impl';\n\n/**\n * Initializes an {@link Auth} instance with fine-grained control over\n * {@link Dependencies}.\n *\n * @remarks\n *\n * This function allows more control over the {@link Auth} instance than\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\n * need control over which persistence layer is used, or to minimize bundle\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\n *\n * For example, if your app only uses anonymous accounts and you only want\n * accounts saved for the current session, initialize `Auth` with:\n *\n * ```js\n * const auth = initializeAuth(app, {\n *   persistence: browserSessionPersistence,\n *   popupRedirectResolver: undefined,\n * });\n * ```\n *\n * @public\n */\nexport function initializeAuth(app: FirebaseApp, deps?: Dependencies): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    const auth = provider.getImmediate() as AuthImpl;\n    const initialOptions = provider.getOptions() as Dependencies;\n    if (deepEqual(initialOptions, deps ?? {})) {\n      return auth;\n    } else {\n      _fail(auth, AuthErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const auth = provider.initialize({ options: deps }) as AuthImpl;\n\n  return auth;\n}\n\nexport function _initializeAuthInstance(\n  auth: AuthImpl,\n  deps?: Dependencies\n): void {\n  const persistence = deps?.persistence || [];\n  const hierarchy = (\n    Array.isArray(persistence) ? persistence : [persistence]\n  ).map<PersistenceInternal>(_getInstance);\n  if (deps?.errorMap) {\n    auth._updateErrorMap(deps.errorMap);\n  }\n\n  // This promise is intended to float; auth initialization happens in the\n  // background, meanwhile the auth object may be used by the app.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  auth._initializeWithPersistence(hierarchy, deps?.popupRedirectResolver);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Auth } from '../../model/public_types';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _castAuth } from './auth_impl';\n\n/**\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\n * Firebase Auth services.\n *\n * @remarks\n * This must be called synchronously immediately following the first call to\n * {@link initializeAuth}.  Do not use with production credentials as emulator\n * traffic is not encrypted.\n *\n *\n * @example\n * ```javascript\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\n * `true` to disable the warning banner attached to the DOM.\n *\n * @public\n */\nexport function connectAuthEmulator(\n  auth: Auth,\n  url: string,\n  options?: { disableWarnings: boolean }\n): void {\n  const authInternal = _castAuth(auth);\n  _assert(\n    authInternal._canInitEmulator,\n    authInternal,\n    AuthErrorCode.EMULATOR_CONFIG_FAILED\n  );\n\n  _assert(\n    /^https?:\\/\\//.test(url),\n    authInternal,\n    AuthErrorCode.INVALID_EMULATOR_SCHEME\n  );\n\n  const disableWarnings = !!options?.disableWarnings;\n\n  const protocol = extractProtocol(url);\n  const { host, port } = extractHostAndPort(url);\n  const portStr = port === null ? '' : `:${port}`;\n\n  // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n  authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };\n  authInternal.settings.appVerificationDisabledForTesting = true;\n  authInternal.emulatorConfig = Object.freeze({\n    host,\n    port,\n    protocol: protocol.replace(':', ''),\n    options: Object.freeze({ disableWarnings })\n  });\n\n  if (!disableWarnings) {\n    emitEmulatorWarning();\n  }\n}\n\nfunction extractProtocol(url: string): string {\n  const protocolEnd = url.indexOf(':');\n  return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n}\n\nfunction extractHostAndPort(url: string): {\n  host: string;\n  port: number | null;\n} {\n  const protocol = extractProtocol(url);\n  const authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n  if (!authority) {\n    return { host: '', port: null };\n  }\n  const hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n  const bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n  if (bracketedIPv6) {\n    const host = bracketedIPv6[1];\n    return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };\n  } else {\n    const [host, port] = hostAndPort.split(':');\n    return { host, port: parsePort(port) };\n  }\n}\n\nfunction parsePort(portStr: string): number | null {\n  if (!portStr) {\n    return null;\n  }\n  const port = Number(portStr);\n  if (isNaN(port)) {\n    return null;\n  }\n  return port;\n}\n\nfunction emitEmulatorWarning(): void {\n  function attachBanner(): void {\n    const el = document.createElement('p');\n    const sty = el.style;\n    el.innerText =\n      'Running in emulator mode. Do not use with production credentials.';\n    sty.position = 'fixed';\n    sty.width = '100%';\n    sty.backgroundColor = '#ffffff';\n    sty.border = '.1em solid #000000';\n    sty.color = '#b50000';\n    sty.bottom = '0px';\n    sty.left = '0px';\n    sty.margin = '0px';\n    sty.zIndex = '10000';\n    sty.textAlign = 'center';\n    el.classList.add('firebase-emulator-warning');\n    document.body.appendChild(el);\n  }\n\n  if (typeof console !== 'undefined' && typeof console.info === 'function') {\n    console.info(\n      'WARNING: You are using the Auth Emulator,' +\n        ' which is intended for local testing only.  Do not use with' +\n        ' production credentials.'\n    );\n  }\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    if (document.readyState === 'loading') {\n      window.addEventListener('DOMContentLoaded', attachBanner);\n    } else {\n      attachBanner();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { debugFail } from '../util/assert';\n\n/**\n * Interface that represents the credentials returned by an {@link AuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class AuthCredential {\n  /** @internal */\n  protected constructor(\n    /**\n     * The authentication provider ID for the credential.\n     *\n     * @remarks\n     * For example, 'facebook.com', or 'google.com'.\n     */\n    readonly providerId: string,\n    /**\n     * The authentication sign in method for the credential.\n     *\n     * @remarks\n     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\n     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\n     * identifier as returned in {@link fetchSignInMethodsForEmail}.\n     */\n    readonly signInMethod: string\n  ) {}\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object {\n    return debugFail('not implemented');\n  }\n\n  /** @internal */\n  _getIdTokenResponse(_auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _linkToIdToken(\n    _auth: AuthInternal,\n    _idToken: string\n  ): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n  /** @internal */\n  _getReauthenticationResolver(_auth: AuthInternal): Promise<IdTokenResponse> {\n    return debugFail('not implemented');\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { MfaEnrollment } from './mfa';\nimport { SignUpRequest, SignUpResponse } from '../authentication/sign_up';\n\nexport interface ResetPasswordRequest {\n  oobCode: string;\n  newPassword?: string;\n  tenantId?: string;\n}\n\nexport interface ResetPasswordResponse {\n  email: string;\n  newEmail?: string;\n  requestType?: ActionCodeOperation;\n  mfaInfo?: MfaEnrollment;\n}\n\nexport async function resetPassword(\n  auth: Auth,\n  request: ResetPasswordRequest\n): Promise<ResetPasswordResponse> {\n  return _performApiRequest<ResetPasswordRequest, ResetPasswordResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.RESET_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\nexport interface UpdateEmailPasswordRequest {\n  idToken: string;\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n}\n\nexport interface UpdateEmailPasswordResponse extends IdTokenResponse {}\n\nexport async function updateEmailPassword(\n  auth: Auth,\n  request: UpdateEmailPasswordRequest\n): Promise<UpdateEmailPasswordResponse> {\n  return _performApiRequest<\n    UpdateEmailPasswordRequest,\n    UpdateEmailPasswordResponse\n  >(auth, HttpMethod.POST, Endpoint.SET_ACCOUNT_INFO, request);\n}\n\n// Used for linking an email/password account to an existing idToken. Uses the same request/response\n// format as updateEmailPassword.\nexport async function linkEmailPassword(\n  auth: Auth,\n  request: SignUpRequest\n): Promise<SignUpResponse> {\n  return _performApiRequest<SignUpRequest, SignUpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_UP,\n    request\n  );\n}\n\nexport interface ApplyActionCodeRequest {\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface ApplyActionCodeResponse {}\n\nexport async function applyActionCode(\n  auth: Auth,\n  request: ApplyActionCodeRequest\n): Promise<ApplyActionCodeResponse> {\n  return _performApiRequest<ApplyActionCodeRequest, ApplyActionCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SET_ACCOUNT_INFO,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeOperation, Auth } from '../../model/public_types';\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\n\nexport interface SignInWithPasswordRequest {\n  returnSecureToken?: boolean;\n  email: string;\n  password: string;\n  tenantId?: string;\n  captchaResponse?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface SignInWithPasswordResponse extends IdTokenResponse {\n  email: string;\n  displayName: string;\n}\n\nexport async function signInWithPassword(\n  auth: Auth,\n  request: SignInWithPasswordRequest\n): Promise<SignInWithPasswordResponse> {\n  return _performSignInRequest<\n    SignInWithPasswordRequest,\n    SignInWithPasswordResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PASSWORD,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface GetOobCodeRequest {\n  email?: string; // Everything except VERIFY_AND_CHANGE_EMAIL\n  continueUrl?: string;\n  iOSBundleId?: string;\n  iosAppStoreId?: string;\n  androidPackageName?: string;\n  androidInstallApp?: boolean;\n  androidMinimumVersionCode?: string;\n  canHandleCodeInApp?: boolean;\n  dynamicLinkDomain?: string;\n  tenantId?: string;\n  targetProjectid?: string;\n}\n\nexport interface VerifyEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_EMAIL;\n  idToken: IdToken;\n}\n\nexport interface PasswordResetRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.PASSWORD_RESET;\n  email: string;\n  captchaResp?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface EmailSignInRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.EMAIL_SIGNIN;\n  email: string;\n  captchaResp?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface VerifyAndChangeEmailRequest extends GetOobCodeRequest {\n  requestType: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n  idToken: IdToken;\n  newEmail: string;\n}\n\ninterface GetOobCodeResponse {\n  email: string;\n}\n\nexport interface VerifyEmailResponse extends GetOobCodeResponse {}\nexport interface PasswordResetResponse extends GetOobCodeResponse {}\nexport interface EmailSignInResponse extends GetOobCodeResponse {}\nexport interface VerifyAndChangeEmailResponse extends GetOobCodeRequest {}\n\nasync function sendOobCode(\n  auth: Auth,\n  request: GetOobCodeRequest\n): Promise<GetOobCodeResponse> {\n  return _performApiRequest<GetOobCodeRequest, GetOobCodeResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_OOB_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function sendEmailVerification(\n  auth: Auth,\n  request: VerifyEmailRequest\n): Promise<VerifyEmailResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendPasswordResetEmail(\n  auth: Auth,\n  request: PasswordResetRequest\n): Promise<PasswordResetResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function sendSignInLinkToEmail(\n  auth: Auth,\n  request: EmailSignInRequest\n): Promise<EmailSignInResponse> {\n  return sendOobCode(auth, request);\n}\n\nexport async function verifyAndChangeEmail(\n  auth: Auth,\n  request: VerifyAndChangeEmailRequest\n): Promise<VerifyAndChangeEmailResponse> {\n  return sendOobCode(auth, request);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performSignInRequest,\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithEmailLinkRequest {\n  email: string;\n  oobCode: string;\n  tenantId?: string;\n}\n\nexport interface SignInWithEmailLinkResponse extends IdTokenResponse {\n  email: string;\n  isNewUser: boolean;\n}\n\nexport async function signInWithEmailLink(\n  auth: Auth,\n  request: SignInWithEmailLinkRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface SignInWithEmailLinkForLinkingRequest\n  extends SignInWithEmailLinkRequest {\n  idToken: string;\n}\n\nexport async function signInWithEmailLinkForLinking(\n  auth: Auth,\n  request: SignInWithEmailLinkForLinkingRequest\n): Promise<SignInWithEmailLinkResponse> {\n  return _performSignInRequest<\n    SignInWithEmailLinkForLinkingRequest,\n    SignInWithEmailLinkResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_EMAIL_LINK,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { linkEmailPassword } from '../../api/account_management/email_and_password';\nimport {\n  signInWithPassword,\n  SignInWithPasswordRequest\n} from '../../api/authentication/email_and_password';\nimport {\n  signInWithEmailLink,\n  signInWithEmailLinkForLinking\n} from '../../api/authentication/email_link';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\nimport { handleRecaptchaFlow } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport {\n  RecaptchaActionName,\n  RecaptchaClientType,\n  RecaptchaAuthProvider\n} from '../../api';\nimport { SignUpRequest } from '../../api/authentication/sign_up';\n/**\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\n * {@link ProviderId}.PASSWORD\n *\n * @remarks\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @public\n */\nexport class EmailAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    /** @internal */\n    readonly _email: string,\n    /** @internal */\n    readonly _password: string,\n    signInMethod: SignInMethod,\n    /** @internal */\n    readonly _tenantId: string | null = null\n  ) {\n    super(ProviderId.PASSWORD, signInMethod);\n  }\n\n  /** @internal */\n  static _fromEmailAndPassword(\n    email: string,\n    password: string\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      password,\n      SignInMethod.EMAIL_PASSWORD\n    );\n  }\n\n  /** @internal */\n  static _fromEmailAndCode(\n    email: string,\n    oobCode: string,\n    tenantId: string | null = null\n  ): EmailAuthCredential {\n    return new EmailAuthCredential(\n      email,\n      oobCode,\n      SignInMethod.EMAIL_LINK,\n      tenantId\n    );\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    return {\n      email: this._email,\n      password: this._password,\n      signInMethod: this.signInMethod,\n      tenantId: this._tenantId\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\n   *\n   * @param json - Either `object` or the stringified representation of the object. When string is\n   * provided, `JSON.parse` would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\n   */\n  static fromJSON(json: object | string): EmailAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    if (obj?.email && obj?.password) {\n      if (obj.signInMethod === SignInMethod.EMAIL_PASSWORD) {\n        return this._fromEmailAndPassword(obj.email, obj.password);\n      } else if (obj.signInMethod === SignInMethod.EMAIL_LINK) {\n        return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n      }\n    }\n    return null;\n  }\n\n  /** @internal */\n  async _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        const request: SignInWithPasswordRequest = {\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: RecaptchaClientType.WEB\n        };\n        return handleRecaptchaFlow(\n          auth,\n          request,\n          RecaptchaActionName.SIGN_IN_WITH_PASSWORD,\n          signInWithPassword,\n          RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER\n        );\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLink(auth, {\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  async _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    switch (this.signInMethod) {\n      case SignInMethod.EMAIL_PASSWORD:\n        const request: SignUpRequest = {\n          idToken,\n          returnSecureToken: true,\n          email: this._email,\n          password: this._password,\n          clientType: RecaptchaClientType.WEB\n        };\n        return handleRecaptchaFlow(\n          auth,\n          request,\n          RecaptchaActionName.SIGN_UP_PASSWORD,\n          linkEmailPassword,\n          RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER\n        );\n      case SignInMethod.EMAIL_LINK:\n        return signInWithEmailLinkForLinking(auth, {\n          idToken,\n          email: this._email,\n          oobCode: this._password\n        });\n      default:\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return this._getIdTokenResponse(auth);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdToken, IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithIdpRequest {\n  requestUri: string;\n  postBody?: string;\n  sessionId?: string;\n  tenantId?: string;\n  returnSecureToken: boolean;\n  returnIdpCredential?: boolean;\n  idToken?: IdToken;\n  autoCreate?: boolean;\n  pendingToken?: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithIdpResponse extends IdTokenResponse {\n  oauthAccessToken?: string;\n  oauthTokenSecret?: string;\n  nonce?: string;\n  oauthIdToken?: string;\n  pendingToken?: string;\n}\n\nexport async function signInWithIdp(\n  auth: Auth,\n  request: SignInWithIdpRequest\n): Promise<SignInWithIdpResponse> {\n  return _performSignInRequest<SignInWithIdpRequest, SignInWithIdpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_IDP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystring } from '@firebase/util';\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from '../util/assert';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\nexport interface OAuthCredentialParams {\n  // OAuth 2 uses either id token or access token\n  idToken?: string | null;\n  accessToken?: string | null;\n\n  // These fields are used with OAuth 1\n  oauthToken?: string;\n  secret?: string;\n  oauthTokenSecret?: string;\n\n  // Nonce is only set if pendingToken is not present\n  nonce?: string;\n  pendingToken?: string;\n\n  // Utilities\n  providerId: string;\n  signInMethod: string;\n}\n\n/**\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\n *\n * @remarks\n * Implementations specify the details about each auth provider's credential requirements.\n *\n * @public\n */\nexport class OAuthCredential extends AuthCredential {\n  /**\n   * The OAuth ID token associated with the credential if it belongs to an OIDC provider,\n   * such as `google.com`.\n   * @readonly\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token associated with the credential if it belongs to an\n   * {@link OAuthProvider}, such as `facebook.com`, `twitter.com`, etc.\n   * @readonly\n   */\n  accessToken?: string;\n  /**\n   * The OAuth access token secret associated with the credential if it belongs to an OAuth 1.0\n   * provider, such as `twitter.com`.\n   * @readonly\n   */\n  secret?: string;\n\n  private nonce?: string;\n  private pendingToken: string | null = null;\n\n  /** @internal */\n  static _fromParams(params: OAuthCredentialParams): OAuthCredential {\n    const cred = new OAuthCredential(params.providerId, params.signInMethod);\n\n    if (params.idToken || params.accessToken) {\n      // OAuth 2 and either ID token or access token.\n      if (params.idToken) {\n        cred.idToken = params.idToken;\n      }\n\n      if (params.accessToken) {\n        cred.accessToken = params.accessToken;\n      }\n\n      // Add nonce if available and no pendingToken is present.\n      if (params.nonce && !params.pendingToken) {\n        cred.nonce = params.nonce;\n      }\n\n      if (params.pendingToken) {\n        cred.pendingToken = params.pendingToken;\n      }\n    } else if (params.oauthToken && params.oauthTokenSecret) {\n      // OAuth 1 and OAuth token with token secret\n      cred.accessToken = params.oauthToken;\n      cred.secret = params.oauthTokenSecret;\n    } else {\n      _fail(AuthErrorCode.ARGUMENT_ERROR);\n    }\n\n    return cred;\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      idToken: this.idToken,\n      accessToken: this.accessToken,\n      secret: this.secret,\n      nonce: this.nonce,\n      pendingToken: this.pendingToken,\n      providerId: this.providerId,\n      signInMethod: this.signInMethod\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): OAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, ...rest }: OAuthCredentialParams = obj;\n    if (!providerId || !signInMethod) {\n      return null;\n    }\n\n    const cred = new OAuthCredential(providerId, signInMethod);\n    cred.idToken = rest.idToken || undefined;\n    cred.accessToken = rest.accessToken || undefined;\n    cred.secret = rest.secret;\n    cred.nonce = rest.nonce;\n    cred.pendingToken = rest.pendingToken || null;\n    return cred;\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    const request: SignInWithIdpRequest = {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true\n    };\n\n    if (this.pendingToken) {\n      request.pendingToken = this.pendingToken;\n    } else {\n      const postBody: Record<string, string> = {};\n      if (this.idToken) {\n        postBody['id_token'] = this.idToken;\n      }\n      if (this.accessToken) {\n        postBody['access_token'] = this.accessToken;\n      }\n      if (this.secret) {\n        postBody['oauth_token_secret'] = this.secret;\n      }\n\n      postBody['providerId'] = this.providerId;\n      if (this.nonce && !this.pendingToken) {\n        postBody['nonce'] = this.nonce;\n      }\n\n      request.postBody = querystring(postBody);\n    }\n\n    return request;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _makeTaggedError,\n  _performApiRequest,\n  _performSignInRequest\n} from '../index';\nimport { AuthErrorCode } from '../../core/errors';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { ServerError, ServerErrorMap } from '../errors';\nimport { Auth } from '../../model/public_types';\n\nexport interface SendPhoneVerificationCodeRequest {\n  phoneNumber: string;\n  // reCAPTCHA v2 token\n  recaptchaToken?: string;\n  tenantId?: string;\n  // reCAPTCHA Enterprise token\n  captchaResponse?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface SendPhoneVerificationCodeResponse {\n  sessionInfo: string;\n}\n\nexport async function sendPhoneVerificationCode(\n  auth: Auth,\n  request: SendPhoneVerificationCodeRequest\n): Promise<SendPhoneVerificationCodeResponse> {\n  return _performApiRequest<\n    SendPhoneVerificationCodeRequest,\n    SendPhoneVerificationCodeResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SEND_VERIFICATION_CODE,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberRequest {\n  temporaryProof?: string;\n  phoneNumber?: string;\n  sessionInfo?: string;\n  code?: string;\n  tenantId?: string;\n}\n\nexport interface LinkWithPhoneNumberRequest\n  extends SignInWithPhoneNumberRequest {\n  idToken: string;\n}\n\n/**\n * @internal\n */\nexport interface SignInWithPhoneNumberResponse extends IdTokenResponse {\n  temporaryProof?: string;\n  phoneNumber?: string;\n}\n\nexport async function signInWithPhoneNumber(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  return _performSignInRequest<\n    SignInWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport async function linkWithPhoneNumber(\n  auth: Auth,\n  request: LinkWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const response = await _performSignInRequest<\n    LinkWithPhoneNumberRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, request)\n  );\n  if (response.temporaryProof) {\n    throw _makeTaggedError(auth, AuthErrorCode.NEED_CONFIRMATION, response);\n  }\n  return response;\n}\n\ninterface VerifyPhoneNumberForExistingRequest\n  extends SignInWithPhoneNumberRequest {\n  operation: 'REAUTH';\n}\n\nconst VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_: Partial<\n  ServerErrorMap<ServerError>\n> = {\n  [ServerError.USER_NOT_FOUND]: AuthErrorCode.USER_DELETED\n};\n\nexport async function verifyPhoneNumberForExisting(\n  auth: Auth,\n  request: SignInWithPhoneNumberRequest\n): Promise<SignInWithPhoneNumberResponse> {\n  const apiRequest: VerifyPhoneNumberForExistingRequest = {\n    ...request,\n    operation: 'REAUTH'\n  };\n  return _performSignInRequest<\n    VerifyPhoneNumberForExistingRequest,\n    SignInWithPhoneNumberResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_PHONE_NUMBER,\n    _addTidIfNecessary(auth, apiRequest),\n    VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport {\n  linkWithPhoneNumber,\n  signInWithPhoneNumber,\n  SignInWithPhoneNumberRequest,\n  verifyPhoneNumberForExisting\n} from '../../api/authentication/sms';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nexport interface PhoneAuthCredentialParameters {\n  verificationId?: string;\n  verificationCode?: string;\n  phoneNumber?: string;\n  temporaryProof?: string;\n}\n\n/**\n * Represents the credentials returned by {@link PhoneAuthProvider}.\n *\n * @public\n */\nexport class PhoneAuthCredential extends AuthCredential {\n  private constructor(private readonly params: PhoneAuthCredentialParameters) {\n    super(ProviderId.PHONE, SignInMethod.PHONE);\n  }\n\n  /** @internal */\n  static _fromVerification(\n    verificationId: string,\n    verificationCode: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ verificationId, verificationCode });\n  }\n\n  /** @internal */\n  static _fromTokenResponse(\n    phoneNumber: string,\n    temporaryProof: string\n  ): PhoneAuthCredential {\n    return new PhoneAuthCredential({ phoneNumber, temporaryProof });\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return signInWithPhoneNumber(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    return linkWithPhoneNumber(auth, {\n      idToken,\n      ...this._makeVerificationRequest()\n    });\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n  }\n\n  /** @internal */\n  _makeVerificationRequest(): SignInWithPhoneNumberRequest {\n    const { temporaryProof, phoneNumber, verificationId, verificationCode } =\n      this.params;\n    if (temporaryProof && phoneNumber) {\n      return { temporaryProof, phoneNumber };\n    }\n\n    return {\n      sessionInfo: verificationId,\n      code: verificationCode\n    };\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON} */\n  toJSON(): object {\n    const obj: Record<string, string> = {\n      providerId: this.providerId\n    };\n    if (this.params.phoneNumber) {\n      obj.phoneNumber = this.params.phoneNumber;\n    }\n    if (this.params.temporaryProof) {\n      obj.temporaryProof = this.params.temporaryProof;\n    }\n    if (this.params.verificationCode) {\n      obj.verificationCode = this.params.verificationCode;\n    }\n    if (this.params.verificationId) {\n      obj.verificationId = this.params.verificationId;\n    }\n\n    return obj;\n  }\n\n  /** Generates a phone credential based on a plain object or a JSON string. */\n  static fromJSON(json: object | string): PhoneAuthCredential | null {\n    if (typeof json === 'string') {\n      json = JSON.parse(json);\n    }\n\n    const { verificationId, verificationCode, phoneNumber, temporaryProof } =\n      json as { [key: string]: string };\n    if (\n      !verificationCode &&\n      !verificationId &&\n      !phoneNumber &&\n      !temporaryProof\n    ) {\n      return null;\n    }\n\n    return new PhoneAuthCredential({\n      verificationId,\n      verificationCode,\n      phoneNumber,\n      temporaryProof\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { extractQuerystring, querystringDecode } from '@firebase/util';\nimport { ActionCodeOperation } from '../model/public_types';\nimport { AuthErrorCode } from './errors';\nimport { _assert } from './util/assert';\n\n/**\n * Enums for fields in URL query string.\n *\n * @enum {string}\n */\nconst enum QueryField {\n  API_KEY = 'apiKey',\n  CODE = 'oobCode',\n  CONTINUE_URL = 'continueUrl',\n  LANGUAGE_CODE = 'languageCode',\n  MODE = 'mode',\n  TENANT_ID = 'tenantId'\n}\n\n/**\n * Maps the mode string in action code URL to Action Code Info operation.\n *\n * @param mode\n */\nfunction parseMode(mode: string | null): ActionCodeOperation | null {\n  switch (mode) {\n    case 'recoverEmail':\n      return ActionCodeOperation.RECOVER_EMAIL;\n    case 'resetPassword':\n      return ActionCodeOperation.PASSWORD_RESET;\n    case 'signIn':\n      return ActionCodeOperation.EMAIL_SIGNIN;\n    case 'verifyEmail':\n      return ActionCodeOperation.VERIFY_EMAIL;\n    case 'verifyAndChangeEmail':\n      return ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL;\n    case 'revertSecondFactorAddition':\n      return ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION;\n    default:\n      return null;\n  }\n}\n\n/**\n * Helper to parse FDL links\n *\n * @param url\n */\nfunction parseDeepLink(url: string): string {\n  const link = querystringDecode(extractQuerystring(url))['link'];\n\n  // Double link case (automatic redirect).\n  const doubleDeepLink = link\n    ? querystringDecode(extractQuerystring(link))['deep_link_id']\n    : null;\n  // iOS custom scheme links.\n  const iOSDeepLink = querystringDecode(extractQuerystring(url))[\n    'deep_link_id'\n  ];\n  const iOSDoubleDeepLink = iOSDeepLink\n    ? querystringDecode(extractQuerystring(iOSDeepLink))['link']\n    : null;\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n\n/**\n * A utility class to parse email action URLs such as password reset, email verification,\n * email link sign in, etc.\n *\n * @public\n */\nexport class ActionCodeURL {\n  /**\n   * The API key of the email action link.\n   */\n  readonly apiKey: string;\n  /**\n   * The action code of the email action link.\n   */\n  readonly code: string;\n  /**\n   * The continue URL of the email action link. Null if not provided.\n   */\n  readonly continueUrl: string | null;\n  /**\n   * The language code of the email action link. Null if not provided.\n   */\n  readonly languageCode: string | null;\n  /**\n   * The action performed by the email action link. It returns from one of the types from\n   * {@link ActionCodeInfo}\n   */\n  readonly operation: string;\n  /**\n   * The tenant ID of the email action link. Null if the email action is from the parent project.\n   */\n  readonly tenantId: string | null;\n\n  /**\n   * @param actionLink - The link from which to extract the URL.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @internal\n   */\n  constructor(actionLink: string) {\n    const searchParams = querystringDecode(extractQuerystring(actionLink));\n    const apiKey = searchParams[QueryField.API_KEY] ?? null;\n    const code = searchParams[QueryField.CODE] ?? null;\n    const operation = parseMode(searchParams[QueryField.MODE] ?? null);\n    // Validate API key, code and mode.\n    _assert(apiKey && code && operation, AuthErrorCode.ARGUMENT_ERROR);\n    this.apiKey = apiKey;\n    this.operation = operation;\n    this.code = code;\n    this.continueUrl = searchParams[QueryField.CONTINUE_URL] ?? null;\n    this.languageCode = searchParams[QueryField.LANGUAGE_CODE] ?? null;\n    this.tenantId = searchParams[QueryField.TENANT_ID] ?? null;\n  }\n\n  /**\n   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\n   * otherwise returns null.\n   *\n   * @param link  - The email action link string.\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\n   *\n   * @public\n   */\n  static parseLink(link: string): ActionCodeURL | null {\n    const actionLink = parseDeepLink(link);\n    try {\n      return new ActionCodeURL(actionLink);\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Parses the email action link string and returns an {@link ActionCodeURL} if\n * the link is valid, otherwise returns null.\n *\n * @public\n */\nexport function parseActionCodeURL(link: string): ActionCodeURL | null {\n  return ActionCodeURL.parseLink(link);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProviderId, SignInMethod } from '../../model/enums';\nimport { AuthProvider } from '../../model/public_types';\n\nimport { ActionCodeURL } from '../action_code_url';\nimport { EmailAuthCredential } from '../credentials/email';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\n\n/**\n * Provider for generating {@link EmailAuthCredential}.\n *\n * @public\n */\nexport class EmailAuthProvider implements AuthProvider {\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  static readonly PROVIDER_ID: 'password' = ProviderId.PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\n   */\n  static readonly EMAIL_PASSWORD_SIGN_IN_METHOD: 'password' =\n    SignInMethod.EMAIL_PASSWORD;\n  /**\n   * Always set to {@link SignInMethod}.EMAIL_LINK.\n   */\n  static readonly EMAIL_LINK_SIGN_IN_METHOD: 'emailLink' =\n    SignInMethod.EMAIL_LINK;\n  /**\n   * Always set to {@link ProviderId}.PASSWORD, even for email link.\n   */\n  readonly providerId = EmailAuthProvider.PROVIDER_ID;\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and password.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credential(email, password);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const userCredential = await signInWithEmailAndPassword(auth, email, password);\n   * ```\n   *\n   * @param email - Email address.\n   * @param password - User account password.\n   * @returns The auth provider credential.\n   */\n  static credential(email: string, password: string): EmailAuthCredential {\n    return EmailAuthCredential._fromEmailAndPassword(email, password);\n  }\n\n  /**\n   * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\n   * email link operation.\n   *\n   * @example\n   * ```javascript\n   * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * ```javascript\n   * await sendSignInLinkToEmail(auth, email);\n   * // Obtain emailLink from user.\n   * const userCredential = await signInWithEmailLink(auth, email, emailLink);\n   * ```\n   *\n   * @param auth - The {@link Auth} instance used to verify the link.\n   * @param email - Email address.\n   * @param emailLink - Sign-in email link.\n   * @returns - The auth provider credential.\n   */\n  static credentialWithLink(\n    email: string,\n    emailLink: string\n  ): EmailAuthCredential {\n    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n    _assert(actionCodeUrl, AuthErrorCode.ARGUMENT_ERROR);\n\n    return EmailAuthCredential._fromEmailAndCode(\n      email,\n      actionCodeUrl.code,\n      actionCodeUrl.tenantId\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider } from '../../model/public_types';\n\n/**\n * Map of OAuth Custom Parameters.\n *\n * @public\n */\nexport type CustomParameters = Record<string, string>;\n\n/**\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\n *\n * This class is not meant to be instantiated directly.\n *\n * @public\n */\nexport abstract class FederatedAuthProvider implements AuthProvider {\n  /** @internal */\n  defaultLanguageCode: string | null = null;\n  /** @internal */\n  private customParameters: CustomParameters = {};\n\n  /**\n   * Constructor for generic OAuth providers.\n   *\n   * @param providerId - Provider for which credentials should be generated.\n   */\n  constructor(readonly providerId: string) {}\n\n  /**\n   * Set the language gode.\n   *\n   * @param languageCode - language code\n   */\n  setDefaultLanguage(languageCode: string | null): void {\n    this.defaultLanguageCode = languageCode;\n  }\n\n  /**\n   * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\n   * operations.\n   *\n   * @remarks\n   * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\n   * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\n   *\n   * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\n   */\n  setCustomParameters(customOAuthParameters: CustomParameters): AuthProvider {\n    this.customParameters = customOAuthParameters;\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of {@link CustomParameters}.\n   */\n  getCustomParameters(): CustomParameters {\n    return this.customParameters;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, UserCredential } from '../../model/public_types';\n\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\nimport { OAuthCredential, OAuthCredentialParams } from '../credentials/oauth';\nimport { UserCredentialInternal } from '../../model/user';\nimport { FirebaseError } from '@firebase/util';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { SignInWithIdpResponse } from '../../../internal';\nimport { FederatedAuthProvider } from './federated';\n\n/**\n * Defines the options for initializing an {@link OAuthCredential}.\n *\n * @remarks\n * For ID tokens with nonce claim, the raw nonce has to also be provided.\n *\n * @public\n */\nexport interface OAuthCredentialOptions {\n  /**\n   * The OAuth ID token used to initialize the {@link OAuthCredential}.\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token used to initialize the {@link OAuthCredential}.\n   */\n  accessToken?: string;\n  /**\n   * The raw nonce associated with the ID token.\n   *\n   * @remarks\n   * It is required when an ID token with a nonce field is provided. The SHA-256 hash of the\n   * raw nonce must match the nonce field in the ID token.\n   */\n  rawNonce?: string;\n}\n\n/**\n * Common code to all OAuth providers. This is separate from the\n * {@link OAuthProvider} so that child providers (like\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\n * Instead, they rely on a static `credential` method.\n */\nexport abstract class BaseOAuthProvider\n  extends FederatedAuthProvider\n  implements AuthProvider\n{\n  /** @internal */\n  private scopes: string[] = [];\n\n  /**\n   * Add an OAuth scope to the credential.\n   *\n   * @param scope - Provider OAuth scope to add.\n   */\n  addScope(scope: string): AuthProvider {\n    // If not already added, add scope to list.\n    if (!this.scopes.includes(scope)) {\n      this.scopes.push(scope);\n    }\n    return this;\n  }\n\n  /**\n   * Retrieve the current list of OAuth scopes.\n   */\n  getScopes(): string[] {\n    return [...this.scopes];\n  }\n}\n\n/**\n * Provider for generating generic {@link OAuthCredential}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new OAuthProvider('google.com');\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a OAuth Access Token for the provider.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new OAuthProvider('google.com');\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a OAuth Access Token for the provider.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class OAuthProvider extends BaseOAuthProvider {\n  /**\n   * Creates an {@link OAuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json: object | string): OAuthCredential {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    _assert(\n      'providerId' in obj && 'signInMethod' in obj,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    return OAuthCredential._fromParams(obj);\n  }\n\n  /**\n   * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\n   *\n   * @remarks\n   * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\n   * the raw nonce must match the nonce field in the ID token.\n   *\n   * @example\n   * ```javascript\n   * // `googleUser` from the onsuccess Google Sign In callback.\n   * // Initialize a generate OAuth provider with a `google.com` providerId.\n   * const provider = new OAuthProvider('google.com');\n   * const credential = provider.credential({\n   *   idToken: googleUser.getAuthResponse().id_token,\n   * });\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param params - Either the options object containing the ID token, access token and raw nonce\n   * or the ID token string.\n   */\n  credential(params: OAuthCredentialOptions): OAuthCredential {\n    return this._credential({ ...params, nonce: params.rawNonce });\n  }\n\n  /** An internal credential method that accepts more permissive options */\n  private _credential(\n    params: Omit<OAuthCredentialParams, 'signInMethod' | 'providerId'>\n  ): OAuthCredential {\n    _assert(params.idToken || params.accessToken, AuthErrorCode.ARGUMENT_ERROR);\n    // For OAuthCredential, sign in method is same as providerId.\n    return OAuthCredential._fromParams({\n      ...params,\n      providerId: this.providerId,\n      signInMethod: this.providerId\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return OAuthProvider.oauthCredentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static oauthCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const {\n      oauthIdToken,\n      oauthAccessToken,\n      oauthTokenSecret,\n      pendingToken,\n      nonce,\n      providerId\n    } = tokenResponse as SignInWithIdpResponse;\n    if (\n      !oauthAccessToken &&\n      !oauthTokenSecret &&\n      !oauthIdToken &&\n      !pendingToken\n    ) {\n      return null;\n    }\n\n    if (!providerId) {\n      return null;\n    }\n\n    try {\n      return new OAuthProvider(providerId)._credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        nonce,\n        pendingToken\n      });\n    } catch (e) {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('user_birthday');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * provider.addScope('user_birthday');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = FacebookAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class FacebookAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.FACEBOOK. */\n  static readonly FACEBOOK_SIGN_IN_METHOD: 'facebook.com' =\n    SignInMethod.FACEBOOK;\n  /** Always set to {@link ProviderId}.FACEBOOK. */\n  static readonly PROVIDER_ID: 'facebook.com' = ProviderId.FACEBOOK;\n\n  constructor() {\n    super(ProviderId.FACEBOOK);\n  }\n\n  /**\n   * Creates a credential for Facebook.\n   *\n   * @example\n   * ```javascript\n   * // `event` from the Facebook auth.authResponseChange callback.\n   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param accessToken - Facebook access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: FacebookAuthProvider.PROVIDER_ID,\n      signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return FacebookAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GoogleAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('profile');\n * provider.addScope('email');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Google Access Token.\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GoogleAuthProvider();\n * provider.addScope('profile');\n * provider.addScope('email');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Google Access Token.\n * const credential = GoogleAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n *\n * @public\n */\nexport class GoogleAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GOOGLE. */\n  static readonly GOOGLE_SIGN_IN_METHOD: 'google.com' = SignInMethod.GOOGLE;\n  /** Always set to {@link ProviderId}.GOOGLE. */\n  static readonly PROVIDER_ID: 'google.com' = ProviderId.GOOGLE;\n\n  constructor() {\n    super(ProviderId.GOOGLE);\n    this.addScope('profile');\n  }\n\n  /**\n   * Creates a credential for Google. At least one of ID token and access token is required.\n   *\n   * @example\n   * ```javascript\n   * // \\`googleUser\\` from the onsuccess Google Sign In callback.\n   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\n   * const result = await signInWithCredential(credential);\n   * ```\n   *\n   * @param idToken - Google ID token.\n   * @param accessToken - Google access token.\n   */\n  static credential(\n    idToken?: string | null,\n    accessToken?: string | null\n  ): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GoogleAuthProvider.PROVIDER_ID,\n      signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n      idToken,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GoogleAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const { oauthIdToken, oauthAccessToken } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthIdToken && !oauthAccessToken) {\n      // This could be an oauth 1 credential or a phone credential\n      return null;\n    }\n\n    try {\n      return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\n *\n * @remarks\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\n * the {@link signInWithPopup} handler:\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new GithubAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * provider.addScope('repo');\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a GitHub Access Token.\n *   const credential = GithubAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new GithubAuthProvider();\n * provider.addScope('repo');\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a GitHub Access Token.\n * const credential = GithubAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * ```\n * @public\n */\nexport class GithubAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.GITHUB. */\n  static readonly GITHUB_SIGN_IN_METHOD: 'github.com' = SignInMethod.GITHUB;\n  /** Always set to {@link ProviderId}.GITHUB. */\n  static readonly PROVIDER_ID: 'github.com' = ProviderId.GITHUB;\n\n  constructor() {\n    super(ProviderId.GITHUB);\n  }\n\n  /**\n   * Creates a credential for GitHub.\n   *\n   * @param accessToken - GitHub access token.\n   */\n  static credential(accessToken: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: GithubAuthProvider.PROVIDER_ID,\n      signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n      accessToken\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return GithubAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n      return null;\n    }\n\n    if (!tokenResponse.oauthAccessToken) {\n      return null;\n    }\n\n    try {\n      return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents the SAML credentials returned by an {@link SAMLAuthProvider}.\n *\n * @public\n */\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { AuthCredential } from './auth_credential';\n\nconst IDP_REQUEST_URI = 'http://localhost';\n\n/**\n * @public\n */\nexport class SAMLAuthCredential extends AuthCredential {\n  /** @internal */\n  private constructor(\n    providerId: string,\n    private readonly pendingToken: string\n  ) {\n    super(providerId, providerId);\n  }\n\n  /** @internal */\n  _getIdTokenResponse(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.idToken = idToken;\n    return signInWithIdp(auth, request);\n  }\n\n  /** @internal */\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    const request = this.buildRequest();\n    request.autoCreate = false;\n    return signInWithIdp(auth, request);\n  }\n\n  /** {@inheritdoc AuthCredential.toJSON}  */\n  toJSON(): object {\n    return {\n      signInMethod: this.signInMethod,\n      providerId: this.providerId,\n      pendingToken: this.pendingToken\n    };\n  }\n\n  /**\n   * Static method to deserialize a JSON representation of an object into an\n   * {@link  AuthCredential}.\n   *\n   * @param json - Input can be either Object or the stringified representation of the object.\n   * When string is provided, JSON.parse would be called first.\n   *\n   * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\n   */\n  static fromJSON(json: string | object): SAMLAuthCredential | null {\n    const obj = typeof json === 'string' ? JSON.parse(json) : json;\n    const { providerId, signInMethod, pendingToken }: Record<string, string> =\n      obj;\n    if (\n      !providerId ||\n      !signInMethod ||\n      !pendingToken ||\n      providerId !== signInMethod\n    ) {\n      return null;\n    }\n\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  /**\n   * Helper static method to avoid exposing the constructor to end users.\n   *\n   * @internal\n   */\n  static _create(providerId: string, pendingToken: string): SAMLAuthCredential {\n    return new SAMLAuthCredential(providerId, pendingToken);\n  }\n\n  private buildRequest(): SignInWithIdpRequest {\n    return {\n      requestUri: IDP_REQUEST_URI,\n      returnSecureToken: true,\n      pendingToken: this.pendingToken\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredential } from '../../model/public_types';\nimport { UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { SAMLAuthCredential } from '../credentials/saml';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { FederatedAuthProvider } from './federated';\n\nconst SAML_PROVIDER_PREFIX = 'saml.';\n\n/**\n * An {@link AuthProvider} for SAML.\n *\n * @public\n */\nexport class SAMLAuthProvider extends FederatedAuthProvider {\n  /**\n   * Constructor. The providerId must start with \"saml.\"\n   * @param providerId - SAML provider ID.\n   */\n  constructor(providerId: string) {\n    _assert(\n      providerId.startsWith(SAML_PROVIDER_PREFIX),\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    super(providerId);\n  }\n\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential} after a\n   * successful SAML flow completes.\n   *\n   * @remarks\n   *\n   * For example, to get an {@link AuthCredential}, you could write the\n   * following code:\n   *\n   * ```js\n   * const userCredential = await signInWithPopup(auth, samlProvider);\n   * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\n   * ```\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): AuthCredential | null {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): AuthCredential | null {\n    return SAMLAuthProvider.samlCredentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  /**\n   * Creates an {@link AuthCredential} from a JSON string or a plain object.\n   * @param json - A plain object or a JSON string\n   */\n  static credentialFromJSON(json: string | object): AuthCredential {\n    const credential = SAMLAuthCredential.fromJSON(json);\n    _assert(credential, AuthErrorCode.ARGUMENT_ERROR);\n    return credential;\n  }\n\n  private static samlCredentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): SAMLAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n\n    const { pendingToken, providerId } = tokenResponse as SignInWithIdpResponse;\n\n    if (!pendingToken || !providerId) {\n      return null;\n    }\n\n    try {\n      return SAMLAuthCredential._create(providerId, pendingToken);\n    } catch (e) {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @license\n * Copyright 2020 Twitter LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential } from '../../model/public_types';\nimport { FirebaseError } from '@firebase/util';\n\nimport { SignInWithIdpResponse } from '../../api/authentication/idp';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { UserCredentialInternal } from '../../model/user';\nimport { OAuthCredential } from '../credentials/oauth';\nimport { BaseOAuthProvider } from './oauth';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new TwitterAuthProvider();\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Twitter Access Token and Secret.\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\n *   const token = credential.accessToken;\n *   const secret = credential.secret;\n * }\n * ```\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new TwitterAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Twitter Access Token and Secret.\n * const credential = TwitterAuthProvider.credentialFromResult(result);\n * const token = credential.accessToken;\n * const secret = credential.secret;\n * ```\n *\n * @public\n */\nexport class TwitterAuthProvider extends BaseOAuthProvider {\n  /** Always set to {@link SignInMethod}.TWITTER. */\n  static readonly TWITTER_SIGN_IN_METHOD: 'twitter.com' = SignInMethod.TWITTER;\n  /** Always set to {@link ProviderId}.TWITTER. */\n  static readonly PROVIDER_ID: 'twitter.com' = ProviderId.TWITTER;\n\n  constructor() {\n    super(ProviderId.TWITTER);\n  }\n\n  /**\n   * Creates a credential for Twitter.\n   *\n   * @param token - Twitter access token.\n   * @param secret - Twitter secret.\n   */\n  static credential(token: string, secret: string): OAuthCredential {\n    return OAuthCredential._fromParams({\n      providerId: TwitterAuthProvider.PROVIDER_ID,\n      signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n      oauthToken: token,\n      oauthTokenSecret: secret\n    });\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      userCredential as UserCredentialInternal\n    );\n  }\n\n  /**\n   * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\n   * thrown during a sign-in, link, or reauthenticate operation.\n   *\n   * @param userCredential - The user credential.\n   */\n  static credentialFromError(error: FirebaseError): OAuthCredential | null {\n    return TwitterAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): OAuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { oauthAccessToken, oauthTokenSecret } =\n      tokenResponse as SignInWithIdpResponse;\n    if (!oauthAccessToken || !oauthTokenSecret) {\n      return null;\n    }\n\n    try {\n      return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n    } catch {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignUpRequest {\n  idToken?: string;\n  returnSecureToken?: boolean;\n  email?: string;\n  password?: string;\n  tenantId?: string;\n  captchaResponse?: string;\n  clientType?: RecaptchaClientType;\n  recaptchaVersion?: RecaptchaVersion;\n}\n\nexport interface SignUpResponse extends IdTokenResponse {\n  displayName?: string;\n  email?: string;\n}\n\nexport async function signUp(\n  auth: Auth,\n  request: SignUpRequest\n): Promise<SignUpResponse> {\n  return _performSignInRequest<SignUpRequest, SignUpResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_UP,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { UserImpl } from './user_impl';\nimport { AuthInternal } from '../../model/auth';\nimport { OperationType, ProviderId } from '../../model/enums';\n\ninterface UserCredentialParams {\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse?: PhoneOrOauthTokenResponse;\n  readonly operationType: OperationType;\n}\n\nexport class UserCredentialImpl\n  implements UserCredentialInternal, UserCredentialParams\n{\n  readonly user: UserInternal;\n  readonly providerId: ProviderId | string | null;\n  readonly _tokenResponse: PhoneOrOauthTokenResponse | undefined;\n  readonly operationType: OperationType;\n\n  constructor(params: UserCredentialParams) {\n    this.user = params.user;\n    this.providerId = params.providerId;\n    this._tokenResponse = params._tokenResponse;\n    this.operationType = params.operationType;\n  }\n\n  static async _fromIdTokenResponse(\n    auth: AuthInternal,\n    operationType: OperationType,\n    idTokenResponse: IdTokenResponse,\n    isAnonymous: boolean = false\n  ): Promise<UserCredentialInternal> {\n    const user = await UserImpl._fromIdTokenResponse(\n      auth,\n      idTokenResponse,\n      isAnonymous\n    );\n    const providerId = providerIdForResponse(idTokenResponse);\n    const userCred = new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: idTokenResponse,\n      operationType\n    });\n    return userCred;\n  }\n\n  static async _forOperation(\n    user: UserInternal,\n    operationType: OperationType,\n    response: PhoneOrOauthTokenResponse\n  ): Promise<UserCredentialImpl> {\n    await user._updateTokensIfNecessary(response, /* reload */ true);\n    const providerId = providerIdForResponse(response);\n    return new UserCredentialImpl({\n      user,\n      providerId,\n      _tokenResponse: response,\n      operationType\n    });\n  }\n}\n\nfunction providerIdForResponse(\n  response: IdTokenResponse\n): ProviderId | string | null {\n  if (response.providerId) {\n    return response.providerId;\n  }\n\n  if ('phoneNumber' in response) {\n    return ProviderId.PHONE;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, UserCredential } from '../../model/public_types';\nimport { signUp } from '../../api/authentication/sign_up';\nimport { UserInternal } from '../../model/user';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { OperationType } from '../../model/enums';\nimport { _isFirebaseServerApp } from '@firebase/app';\nimport { _serverAppCurrentUserOperationNotSupportedError } from '../../core/util/assert';\n\n/**\n * Asynchronously signs in as an anonymous user.\n *\n * @remarks\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\n * new anonymous user identity will be created and returned.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport async function signInAnonymously(auth: Auth): Promise<UserCredential> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  await authInternal._initializationPromise;\n  if (authInternal.currentUser?.isAnonymous) {\n    // If an anonymous user is already signed in, no need to sign them in again.\n    return new UserCredentialImpl({\n      user: authInternal.currentUser as UserInternal,\n      providerId: null,\n      operationType: OperationType.SIGN_IN\n    });\n  }\n  const response = await signUp(authInternal, {\n    returnSecureToken: true\n  });\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response,\n    true\n  );\n  await authInternal._updateCurrentUser(userCredential.user);\n  return userCredential;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MultiFactorError as MultiFactorErrorPublic } from '../model/public_types';\nimport { FirebaseError } from '@firebase/util';\nimport { AuthInternal } from '../model/auth';\nimport { IdTokenResponse } from '../model/id_token';\nimport { AuthErrorCode } from '../core/errors';\nimport { UserInternal } from '../model/user';\nimport { AuthCredential } from '../core/credentials';\nimport { IdTokenMfaResponse } from '../api/authentication/mfa';\nimport { OperationType } from '../model/enums';\n\nexport type MultiFactorErrorData = MultiFactorErrorPublic['customData'] & {\n  _serverResponse: IdTokenMfaResponse;\n};\n\nexport class MultiFactorError\n  extends FirebaseError\n  implements MultiFactorErrorPublic\n{\n  readonly customData: MultiFactorErrorData;\n\n  private constructor(\n    auth: AuthInternal,\n    error: FirebaseError,\n    readonly operationType: OperationType,\n    readonly user?: UserInternal\n  ) {\n    super(error.code, error.message);\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, MultiFactorError.prototype);\n    this.customData = {\n      appName: auth.name,\n      tenantId: auth.tenantId ?? undefined,\n      _serverResponse: error.customData!._serverResponse as IdTokenMfaResponse,\n      operationType\n    };\n  }\n\n  static _fromErrorAndOperation(\n    auth: AuthInternal,\n    error: FirebaseError,\n    operationType: OperationType,\n    user?: UserInternal\n  ): MultiFactorError {\n    return new MultiFactorError(auth, error, operationType, user);\n  }\n}\n\nexport function _processCredentialSavingMfaContextIfNecessary(\n  auth: AuthInternal,\n  operationType: OperationType,\n  credential: AuthCredential,\n  user?: UserInternal\n): Promise<IdTokenResponse> {\n  const idTokenProvider =\n    operationType === OperationType.REAUTHENTICATE\n      ? credential._getReauthenticationResolver(auth)\n      : credential._getIdTokenResponse(auth);\n\n  return idTokenProvider.catch(error => {\n    if (error.code === `auth/${AuthErrorCode.MFA_REQUIRED}`) {\n      throw MultiFactorError._fromErrorAndOperation(\n        auth,\n        error,\n        operationType,\n        user\n      );\n    }\n\n    throw error;\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ProviderAssociatedObject {\n  providerId?: string;\n}\n\n/**\n * Takes a set of UserInfo provider data and converts it to a set of names\n */\nexport function providerDataAsNames<T extends ProviderAssociatedObject>(\n  providerData: T[]\n): Set<string> {\n  return new Set(\n    providerData\n      .map(({ providerId }) => providerId)\n      .filter(pid => !!pid) as string[]\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../../model/public_types';\n\nimport { deleteLinkedAccounts } from '../../api/account_management/account';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { providerDataAsNames } from '../util/providers';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { _reloadWithoutSaving } from './reload';\nimport { UserCredentialImpl } from './user_credential_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType, ProviderId } from '../../model/enums';\n\n/**\n * Unlinks a provider from a user account.\n *\n * @param user - The user.\n * @param providerId - The provider to unlink.\n *\n * @public\n */\nexport async function unlink(user: User, providerId: string): Promise<User> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  await _assertLinkedStatus(true, userInternal, providerId);\n  const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {\n    idToken: await userInternal.getIdToken(),\n    deleteProvider: [providerId]\n  });\n\n  const providersLeft = providerDataAsNames(providerUserInfo || []);\n\n  userInternal.providerData = userInternal.providerData.filter(pd =>\n    providersLeft.has(pd.providerId)\n  );\n  if (!providersLeft.has(ProviderId.PHONE)) {\n    userInternal.phoneNumber = null;\n  }\n\n  await userInternal.auth._persistUserIfCurrent(userInternal);\n  return userInternal;\n}\n\nexport async function _link(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialInternal> {\n  const response = await _logoutIfInvalidated(\n    user,\n    credential._linkToIdToken(user.auth, await user.getIdToken()),\n    bypassAuthState\n  );\n  return UserCredentialImpl._forOperation(user, OperationType.LINK, response);\n}\n\nexport async function _assertLinkedStatus(\n  expected: boolean,\n  user: UserInternal,\n  provider: string\n): Promise<void> {\n  await _reloadWithoutSaving(user);\n  const providerIds = providerDataAsNames(user.providerData);\n\n  const code =\n    expected === false\n      ? AuthErrorCode.PROVIDER_ALREADY_LINKED\n      : AuthErrorCode.NO_SUCH_PROVIDER;\n  _assert(providerIds.has(provider) === expected, user.auth, code);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { OperationType } from '../../model/enums';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { AuthErrorCode } from '../errors';\nimport { _assert, _fail } from '../util/assert';\nimport { _parseToken } from './id_token_result';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { UserCredentialImpl } from './user_credential_impl';\nimport { _isFirebaseServerApp } from '@firebase/app';\nimport { _serverAppCurrentUserOperationNotSupportedError } from '../../core/util/assert';\n\nexport async function _reauthenticate(\n  user: UserInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredentialImpl> {\n  const { auth } = user;\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const operationType = OperationType.REAUTHENTICATE;\n\n  try {\n    const response = await _logoutIfInvalidated(\n      user,\n      _processCredentialSavingMfaContextIfNecessary(\n        auth,\n        operationType,\n        credential,\n        user\n      ),\n      bypassAuthState\n    );\n    _assert(response.idToken, auth, AuthErrorCode.INTERNAL_ERROR);\n    const parsed = _parseToken(response.idToken);\n    _assert(parsed, auth, AuthErrorCode.INTERNAL_ERROR);\n\n    const { sub: localId } = parsed;\n    _assert(user.uid === localId, auth, AuthErrorCode.USER_MISMATCH);\n\n    return UserCredentialImpl._forOperation(user, operationType, response);\n  } catch (e) {\n    // Convert user deleted error into user mismatch\n    if ((e as FirebaseError)?.code === `auth/${AuthErrorCode.USER_DELETED}`) {\n      _fail(auth, AuthErrorCode.USER_MISMATCH);\n    }\n    throw e;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserCredential, Auth, User } from '../../model/public_types';\n\nimport { _processCredentialSavingMfaContextIfNecessary } from '../../mfa/mfa_error';\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { _assertLinkedStatus, _link } from '../user/link_unlink';\nimport { _reauthenticate } from '../user/reauthenticate';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../../model/enums';\nimport { _isFirebaseServerApp } from '@firebase/app';\nimport { _serverAppCurrentUserOperationNotSupportedError } from '../../core/util/assert';\n\nexport async function _signInWithCredential(\n  auth: AuthInternal,\n  credential: AuthCredential,\n  bypassAuthState = false\n): Promise<UserCredential> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const operationType = OperationType.SIGN_IN;\n  const response = await _processCredentialSavingMfaContextIfNecessary(\n    auth,\n    operationType,\n    credential\n  );\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    auth,\n    operationType,\n    response\n  );\n\n  if (!bypassAuthState) {\n    await auth._updateCurrentUser(userCredential.user);\n  }\n  return userCredential;\n}\n\n/**\n * Asynchronously signs in with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function signInWithCredential(\n  auth: Auth,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _signInWithCredential(_castAuth(auth), credential);\n}\n\n/**\n * Links the user account with the given credentials.\n *\n * @remarks\n * An {@link AuthProvider} can be used to generate the credential.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function linkWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n\n  await _assertLinkedStatus(false, userInternal, credential.providerId);\n\n  return _link(userInternal, credential);\n}\n\n/**\n * Re-authenticates a user using a fresh credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\n * or a `TOKEN_EXPIRED` error.\n *\n * This method is not supported on any {@link User} signed in by {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @param user - The user.\n * @param credential - The auth credential.\n *\n * @public\n */\nexport async function reauthenticateWithCredential(\n  user: User,\n  credential: AuthCredential\n): Promise<UserCredential> {\n  return _reauthenticate(getModularInstance(user) as UserInternal, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performSignInRequest\n} from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface SignInWithCustomTokenRequest {\n  token: string;\n  returnSecureToken: boolean;\n  tenantId?: string;\n}\n\nexport interface SignInWithCustomTokenResponse extends IdTokenResponse {}\n\nexport async function signInWithCustomToken(\n  auth: Auth,\n  request: SignInWithCustomTokenRequest\n): Promise<SignInWithCustomTokenResponse> {\n  return _performSignInRequest<\n    SignInWithCustomTokenRequest,\n    SignInWithCustomTokenResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, UserCredential } from '../../model/public_types';\n\nimport { signInWithCustomToken as getIdTokenResponse } from '../../api/authentication/custom_token';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport { _castAuth } from '../auth/auth_impl';\nimport { OperationType } from '../../model/enums';\nimport { _isFirebaseServerApp } from '@firebase/app';\nimport { _serverAppCurrentUserOperationNotSupportedError } from '../../core/util/assert';\n/**\n * Asynchronously signs in using a custom token.\n *\n * @remarks\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\n * be generated by an auth backend using the\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\n *\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n * @param customToken - The custom token to sign in with.\n *\n * @public\n */\nexport async function signInWithCustomToken(\n  auth: Auth,\n  customToken: string\n): Promise<UserCredential> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  const response: IdTokenResponse = await getIdTokenResponse(authInternal, {\n    token: customToken,\n    returnSecureToken: true\n  });\n  const cred = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response\n  );\n  await authInternal._updateCurrentUser(cred.user);\n  return cred;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FactorId,\n  MultiFactorInfo,\n  PhoneMultiFactorInfo,\n  TotpMultiFactorInfo\n} from '../model/public_types';\nimport {\n  PhoneMfaEnrollment,\n  MfaEnrollment,\n  TotpMfaEnrollment\n} from '../api/account_management/mfa';\nimport { AuthErrorCode } from '../core/errors';\nimport { _fail } from '../core/util/assert';\nimport { AuthInternal } from '../model/auth';\n\nexport abstract class MultiFactorInfoImpl implements MultiFactorInfo {\n  readonly uid: string;\n  readonly displayName?: string | null;\n  readonly enrollmentTime: string;\n\n  protected constructor(readonly factorId: FactorId, response: MfaEnrollment) {\n    this.uid = response.mfaEnrollmentId;\n    this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n    this.displayName = response.displayName;\n  }\n\n  static _fromServerResponse(\n    auth: AuthInternal,\n    enrollment: MfaEnrollment\n  ): MultiFactorInfoImpl {\n    if ('phoneInfo' in enrollment) {\n      return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    } else if ('totpInfo' in enrollment) {\n      return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n    }\n    return _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n  }\n}\n\nexport class PhoneMultiFactorInfoImpl\n  extends MultiFactorInfoImpl\n  implements PhoneMultiFactorInfo\n{\n  readonly phoneNumber: string;\n\n  private constructor(response: PhoneMfaEnrollment) {\n    super(FactorId.PHONE, response);\n    this.phoneNumber = response.phoneInfo;\n  }\n\n  static _fromServerResponse(\n    _auth: AuthInternal,\n    enrollment: MfaEnrollment\n  ): PhoneMultiFactorInfoImpl {\n    return new PhoneMultiFactorInfoImpl(enrollment as PhoneMfaEnrollment);\n  }\n}\nexport class TotpMultiFactorInfoImpl\n  extends MultiFactorInfoImpl\n  implements TotpMultiFactorInfo\n{\n  private constructor(response: TotpMfaEnrollment) {\n    super(FactorId.TOTP, response);\n  }\n\n  static _fromServerResponse(\n    _auth: AuthInternal,\n    enrollment: MfaEnrollment\n  ): TotpMultiFactorInfoImpl {\n    return new TotpMultiFactorInfoImpl(enrollment as TotpMfaEnrollment);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionCodeSettings, Auth } from '../../model/public_types';\n\nimport { GetOobCodeRequest } from '../../api/authentication/email_and_password';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\n\nexport function _setActionCodeSettingsOnRequest(\n  auth: Auth,\n  request: GetOobCodeRequest,\n  actionCodeSettings: ActionCodeSettings\n): void {\n  _assert(\n    actionCodeSettings.url?.length > 0,\n    auth,\n    AuthErrorCode.INVALID_CONTINUE_URI\n  );\n  _assert(\n    typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||\n      actionCodeSettings.dynamicLinkDomain.length > 0,\n    auth,\n    AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN\n  );\n\n  request.continueUrl = actionCodeSettings.url;\n  request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n  request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n\n  if (actionCodeSettings.iOS) {\n    _assert(\n      actionCodeSettings.iOS.bundleId.length > 0,\n      auth,\n      AuthErrorCode.MISSING_IOS_BUNDLE_ID\n    );\n    request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n  }\n\n  if (actionCodeSettings.android) {\n    _assert(\n      actionCodeSettings.android.packageName.length > 0,\n      auth,\n      AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME\n    );\n    request.androidInstallApp = actionCodeSettings.android.installApp;\n    request.androidMinimumVersionCode =\n      actionCodeSettings.android.minimumVersion;\n    request.androidPackageName = actionCodeSettings.android.packageName;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeInfo,\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  UserCredential\n} from '../../model/public_types';\n\nimport * as account from '../../api/account_management/email_and_password';\nimport * as authentication from '../../api/authentication/email_and_password';\nimport { signUp, SignUpRequest } from '../../api/authentication/sign_up';\nimport { MultiFactorInfoImpl } from '../../mfa/mfa_info';\nimport { EmailAuthProvider } from '../providers/email';\nimport { UserCredentialImpl } from '../user/user_credential_impl';\nimport {\n  _assert,\n  _serverAppCurrentUserOperationNotSupportedError\n} from '../util/assert';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { signInWithCredential } from './credential';\nimport { _castAuth } from '../auth/auth_impl';\nimport { AuthErrorCode } from '../errors';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../../model/enums';\nimport { handleRecaptchaFlow } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { IdTokenResponse } from '../../model/id_token';\nimport {\n  RecaptchaActionName,\n  RecaptchaClientType,\n  RecaptchaAuthProvider\n} from '../../api';\nimport { _isFirebaseServerApp } from '@firebase/app';\n\n/**\n * Updates the password policy cached in the {@link Auth} instance if a policy is already\n * cached for the project or tenant.\n *\n * @remarks\n * We only fetch the password policy if the password did not meet policy requirements and\n * there is an existing policy cached. A developer must call validatePassword at least\n * once for the cache to be automatically updated.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @private\n */\nasync function recachePasswordPolicy(auth: Auth): Promise<void> {\n  const authInternal = _castAuth(auth);\n  if (authInternal._getPasswordPolicyInternal()) {\n    await authInternal._updatePasswordPolicy();\n  }\n}\n\n/**\n * Sends a password reset email to the given email address. This method does not throw an error when\n * there's no user account with the given email address and\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled.\n *\n * @remarks\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\n * the email sent to the user, along with the new password specified by the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain code from user.\n * await confirmPasswordReset('user@example.com', code);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendPasswordResetEmail(\n  auth: Auth,\n  email: string,\n  actionCodeSettings?: ActionCodeSettings\n): Promise<void> {\n  const authInternal = _castAuth(auth);\n  const request: authentication.PasswordResetRequest = {\n    requestType: ActionCodeOperation.PASSWORD_RESET,\n    email,\n    clientType: RecaptchaClientType.WEB\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n  }\n  await handleRecaptchaFlow(\n    authInternal,\n    request,\n    RecaptchaActionName.GET_OOB_CODE,\n    authentication.sendPasswordResetEmail,\n    RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER\n  );\n}\n\n/**\n * Completes the password reset process, given a confirmation code and new password.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A confirmation code sent to the user.\n * @param newPassword - The new password.\n *\n * @public\n */\nexport async function confirmPasswordReset(\n  auth: Auth,\n  oobCode: string,\n  newPassword: string\n): Promise<void> {\n  await account\n    .resetPassword(getModularInstance(auth), {\n      oobCode,\n      newPassword\n    })\n    .catch(async error => {\n      if (\n        error.code ===\n        `auth/${AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS}`\n      ) {\n        void recachePasswordPolicy(auth);\n      }\n\n      throw error;\n    });\n  // Do not return the email.\n}\n\n/**\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nexport async function applyActionCode(\n  auth: Auth,\n  oobCode: string\n): Promise<void> {\n  await account.applyActionCode(getModularInstance(auth), { oobCode });\n}\n\n/**\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\n *\n * @returns metadata about the code.\n *\n * @param auth - The {@link Auth} instance.\n * @param oobCode - A verification code sent to the user.\n *\n * @public\n */\nexport async function checkActionCode(\n  auth: Auth,\n  oobCode: string\n): Promise<ActionCodeInfo> {\n  const authModular = getModularInstance(auth);\n  const response = await account.resetPassword(authModular, { oobCode });\n\n  // Email could be empty only if the request type is EMAIL_SIGNIN or\n  // VERIFY_AND_CHANGE_EMAIL.\n  // New email should not be empty if the request type is\n  // VERIFY_AND_CHANGE_EMAIL.\n  // Multi-factor info could not be empty if the request type is\n  // REVERT_SECOND_FACTOR_ADDITION.\n  const operation = response.requestType;\n  _assert(operation, authModular, AuthErrorCode.INTERNAL_ERROR);\n  switch (operation) {\n    case ActionCodeOperation.EMAIL_SIGNIN:\n      break;\n    case ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL:\n      _assert(response.newEmail, authModular, AuthErrorCode.INTERNAL_ERROR);\n      break;\n    case ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION:\n      _assert(response.mfaInfo, authModular, AuthErrorCode.INTERNAL_ERROR);\n    // fall through\n    default:\n      _assert(response.email, authModular, AuthErrorCode.INTERNAL_ERROR);\n  }\n\n  // The multi-factor info for revert second factor addition\n  let multiFactorInfo: MultiFactorInfoImpl | null = null;\n  if (response.mfaInfo) {\n    multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(\n      _castAuth(authModular),\n      response.mfaInfo\n    );\n  }\n\n  return {\n    data: {\n      email:\n        (response.requestType === ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL\n          ? response.newEmail\n          : response.email) || null,\n      previousEmail:\n        (response.requestType === ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL\n          ? response.email\n          : response.newEmail) || null,\n      multiFactorInfo\n    },\n    operation\n  };\n}\n\n/**\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\n *\n * @returns the user's email address if valid.\n *\n * @param auth - The {@link Auth} instance.\n * @param code - A verification code sent to the user.\n *\n * @public\n */\nexport async function verifyPasswordResetCode(\n  auth: Auth,\n  code: string\n): Promise<string> {\n  const { data } = await checkActionCode(getModularInstance(auth), code);\n  // Email should always be present since a code was sent to it\n  return data.email!;\n}\n\n/**\n * Creates a new user account associated with the specified email address and password.\n *\n * @remarks\n * On successful creation of the user account, this user will also be signed in to your application.\n *\n * User account creation can fail if the account already exists or the password is invalid.\n *\n * This method is not supported on {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * Note: The email address acts as a unique identifier for the user and enables an email-based\n * password reset. This function will create a new user account and set the initial user password.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param password - The user's chosen password.\n *\n * @public\n */\nexport async function createUserWithEmailAndPassword(\n  auth: Auth,\n  email: string,\n  password: string\n): Promise<UserCredential> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  const request: SignUpRequest = {\n    returnSecureToken: true,\n    email,\n    password,\n    clientType: RecaptchaClientType.WEB\n  };\n  const signUpResponse: Promise<IdTokenResponse> = handleRecaptchaFlow(\n    authInternal,\n    request,\n    RecaptchaActionName.SIGN_UP_PASSWORD,\n    signUp,\n    RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER\n  );\n  const response = await signUpResponse.catch(error => {\n    if (\n      error.code === `auth/${AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS}`\n    ) {\n      void recachePasswordPolicy(auth);\n    }\n\n    throw error;\n  });\n\n  const userCredential = await UserCredentialImpl._fromIdTokenResponse(\n    authInternal,\n    OperationType.SIGN_IN,\n    response\n  );\n  await authInternal._updateCurrentUser(userCredential.user);\n\n  return userCredential;\n}\n\n/**\n * Asynchronously signs in using an email and password.\n *\n * @remarks\n * Fails with an error if the email address and password do not match. When\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled, this method fails with \"auth/invalid-credential\" in case of an invalid\n * email/password.\n *\n * This method is not supported on {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * Note: The user's password is NOT the password used to access the user's email account. The\n * email address serves as a unique identifier for the user, and the password is used to access\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\n *\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The users email address.\n * @param password - The users password.\n *\n * @public\n */\nexport function signInWithEmailAndPassword(\n  auth: Auth,\n  email: string,\n  password: string\n): Promise<UserCredential> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  return signInWithCredential(\n    getModularInstance(auth),\n    EmailAuthProvider.credential(email, password)\n  ).catch(async error => {\n    if (\n      error.code === `auth/${AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS}`\n    ) {\n      void recachePasswordPolicy(auth);\n    }\n\n    throw error;\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  UserCredential\n} from '../../model/public_types';\n\nimport * as api from '../../api/authentication/email_and_password';\nimport { ActionCodeURL } from '../action_code_url';\nimport { EmailAuthProvider } from '../providers/email';\nimport { _getCurrentUrl } from '../util/location';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { signInWithCredential } from './credential';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { getModularInstance } from '@firebase/util';\nimport { _castAuth } from '../auth/auth_impl';\nimport { handleRecaptchaFlow } from '../../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport {\n  RecaptchaActionName,\n  RecaptchaClientType,\n  RecaptchaAuthProvider\n} from '../../api';\nimport { _isFirebaseServerApp } from '@firebase/app';\nimport { _serverAppCurrentUserOperationNotSupportedError } from '../../core/util/assert';\n\n/**\n * Sends a sign-in email link to the user with the specified email.\n *\n * @remarks\n * The sign-in operation has to always be completed in the app unlike other out of band email\n * actions (password reset and email verifications). This is because, at the end of the flow,\n * the user is expected to be signed in and their Auth state persisted within the app.\n *\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\n * address and the email link supplied in the email sent to the user.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n * @param authInternal - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendSignInLinkToEmail(\n  auth: Auth,\n  email: string,\n  actionCodeSettings: ActionCodeSettings\n): Promise<void> {\n  const authInternal = _castAuth(auth);\n  const request: api.EmailSignInRequest = {\n    requestType: ActionCodeOperation.EMAIL_SIGNIN,\n    email,\n    clientType: RecaptchaClientType.WEB\n  };\n  function setActionCodeSettings(\n    request: api.EmailSignInRequest,\n    actionCodeSettings: ActionCodeSettings\n  ): void {\n    _assert(\n      actionCodeSettings.handleCodeInApp,\n      authInternal,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    if (actionCodeSettings) {\n      _setActionCodeSettingsOnRequest(\n        authInternal,\n        request,\n        actionCodeSettings\n      );\n    }\n  }\n  setActionCodeSettings(request, actionCodeSettings);\n  await handleRecaptchaFlow(\n    authInternal,\n    request,\n    RecaptchaActionName.GET_OOB_CODE,\n    api.sendSignInLinkToEmail,\n    RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER\n  );\n}\n\n/**\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\n *\n * @param auth - The {@link Auth} instance.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nexport function isSignInWithEmailLink(auth: Auth, emailLink: string): boolean {\n  const actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n  return actionCodeUrl?.operation === ActionCodeOperation.EMAIL_SIGNIN;\n}\n\n/**\n * Asynchronously signs in using an email and sign-in email link.\n *\n * @remarks\n * If no link is passed, the link is inferred from the current URL.\n *\n * Fails with an error if the email address is invalid or OTP in email link expires.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\n * // Obtain emailLink from the user.\n * if(isSignInWithEmailLink(auth, emailLink)) {\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\n * }\n * ```\n *\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n * @param emailLink - The link sent to the user's email address.\n *\n * @public\n */\nexport async function signInWithEmailLink(\n  auth: Auth,\n  email: string,\n  emailLink?: string\n): Promise<UserCredential> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const authModular = getModularInstance(auth);\n  const credential = EmailAuthProvider.credentialWithLink(\n    email,\n    emailLink || _getCurrentUrl()\n  );\n  // Check if the tenant ID in the email link matches the tenant ID on Auth\n  // instance.\n  _assert(\n    credential._tenantId === (authModular.tenantId || null),\n    authModular,\n    AuthErrorCode.TENANT_ID_MISMATCH\n  );\n  return signInWithCredential(authModular, credential);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { Auth } from '../../model/public_types';\n\nexport interface CreateAuthUriRequest {\n  identifier: string;\n  continueUri: string;\n  tenantId?: string;\n}\n\nexport interface CreateAuthUriResponse {\n  signinMethods: string[];\n}\n\nexport async function createAuthUri(\n  auth: Auth,\n  request: CreateAuthUriRequest\n): Promise<CreateAuthUriResponse> {\n  return _performApiRequest<CreateAuthUriRequest, CreateAuthUriResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.CREATE_AUTH_URI,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ActionCodeOperation,\n  ActionCodeSettings,\n  Auth,\n  User\n} from '../../model/public_types';\n\nimport {\n  createAuthUri,\n  CreateAuthUriRequest\n} from '../../api/authentication/create_auth_uri';\nimport * as api from '../../api/authentication/email_and_password';\nimport { UserInternal } from '../../model/user';\nimport { _getCurrentUrl, _isHttpOrHttps } from '../util/location';\nimport { _setActionCodeSettingsOnRequest } from './action_code_settings';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Gets the list of possible sign in methods for the given email address. This method returns an\n * empty list when\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled, irrespective of the number of authentication methods available for the given email.\n *\n * @remarks\n * This is useful to differentiate methods of sign-in for the same provider, eg.\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\n * {@link SignInMethod}.EMAIL_PASSWORD and\n * {@link SignInMethod}.EMAIL_LINK.\n *\n * @param auth - The {@link Auth} instance.\n * @param email - The user's email address.\n *\n * Deprecated. Migrating off of this method is recommended as a security best-practice.\n * Learn more in the Identity Platform documentation for\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.\n * @public\n */\nexport async function fetchSignInMethodsForEmail(\n  auth: Auth,\n  email: string\n): Promise<string[]> {\n  // createAuthUri returns an error if continue URI is not http or https.\n  // For environments like Cordova, Chrome extensions, native frameworks, file\n  // systems, etc, use http://localhost as continue URL.\n  const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n  const request: CreateAuthUriRequest = {\n    identifier: email,\n    continueUri\n  };\n\n  const { signinMethods } = await createAuthUri(\n    getModularInstance(auth),\n    request\n  );\n\n  return signinMethods || [];\n}\n\n/**\n * Sends a verification email to a user.\n *\n * @remarks\n * The verification process is completed by calling {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await sendEmailVerification(user, actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function sendEmailVerification(\n  user: User,\n  actionCodeSettings?: ActionCodeSettings | null\n): Promise<void> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await user.getIdToken();\n  const request: api.VerifyEmailRequest = {\n    requestType: ActionCodeOperation.VERIFY_EMAIL,\n    idToken\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(\n      userInternal.auth,\n      request,\n      actionCodeSettings\n    );\n  }\n\n  const { email } = await api.sendEmailVerification(userInternal.auth, request);\n\n  if (email !== user.email) {\n    await user.reload();\n  }\n}\n\n/**\n * Sends a verification email to a new email address.\n *\n * @remarks\n * The user's email will be updated to the new one after being verified.\n *\n * If you have a custom email action handler, you can complete the verification process by calling\n * {@link applyActionCode}.\n *\n * @example\n * ```javascript\n * const actionCodeSettings = {\n *   url: 'https://www.example.com/?email=user@example.com',\n *   iOS: {\n *      bundleId: 'com.example.ios'\n *   },\n *   android: {\n *     packageName: 'com.example.android',\n *     installApp: true,\n *     minimumVersion: '12'\n *   },\n *   handleCodeInApp: true\n * };\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\n * // Obtain code from the user.\n * await applyActionCode(auth, code);\n * ```\n *\n * @param user - The user.\n * @param newEmail - The new email address to be verified before update.\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\n *\n * @public\n */\nexport async function verifyBeforeUpdateEmail(\n  user: User,\n  newEmail: string,\n  actionCodeSettings?: ActionCodeSettings | null\n): Promise<void> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await user.getIdToken();\n  const request: api.VerifyAndChangeEmailRequest = {\n    requestType: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n    idToken,\n    newEmail\n  };\n  if (actionCodeSettings) {\n    _setActionCodeSettingsOnRequest(\n      userInternal.auth,\n      request,\n      actionCodeSettings\n    );\n  }\n\n  const { email } = await api.verifyAndChangeEmail(userInternal.auth, request);\n\n  if (email !== user.email) {\n    // If the local copy of the email on user is outdated, reload the\n    // user.\n    await user.reload();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Endpoint, HttpMethod, _performApiRequest } from '../index';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { Auth } from '../../model/public_types';\n\nexport interface UpdateProfileRequest {\n  idToken: string;\n  displayName?: string | null;\n  photoUrl?: string | null;\n  returnSecureToken: boolean;\n}\n\nexport interface UpdateProfileResponse extends IdTokenResponse {\n  displayName?: string | null;\n  photoUrl?: string | null;\n}\n\nexport async function updateProfile(\n  auth: Auth,\n  request: UpdateProfileRequest\n): Promise<UpdateProfileResponse> {\n  return _performApiRequest<UpdateProfileRequest, UpdateProfileResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.SET_ACCOUNT_INFO,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../../model/public_types';\n\nimport {\n  updateEmailPassword as apiUpdateEmailPassword,\n  UpdateEmailPasswordRequest\n} from '../../api/account_management/email_and_password';\nimport { updateProfile as apiUpdateProfile } from '../../api/account_management/profile';\nimport { UserInternal } from '../../model/user';\nimport { _logoutIfInvalidated } from './invalidation';\nimport { getModularInstance } from '@firebase/util';\nimport { ProviderId } from '../../model/enums';\nimport { _isFirebaseServerApp } from '@firebase/app';\nimport { _serverAppCurrentUserOperationNotSupportedError } from '../../core/util/assert';\n\n/**\n * Updates a user's profile data.\n *\n * @param user - The user.\n * @param profile - The profile's `displayName` and `photoURL` to update.\n *\n * @public\n */\nexport async function updateProfile(\n  user: User,\n  {\n    displayName,\n    photoURL: photoUrl\n  }: { displayName?: string | null; photoURL?: string | null }\n): Promise<void> {\n  if (displayName === undefined && photoUrl === undefined) {\n    return;\n  }\n\n  const userInternal = getModularInstance(user) as UserInternal;\n  const idToken = await userInternal.getIdToken();\n  const profileRequest = {\n    idToken,\n    displayName,\n    photoUrl,\n    returnSecureToken: true\n  };\n  const response = await _logoutIfInvalidated(\n    userInternal,\n    apiUpdateProfile(userInternal.auth, profileRequest)\n  );\n\n  userInternal.displayName = response.displayName || null;\n  userInternal.photoURL = response.photoUrl || null;\n\n  // Update the password provider as well\n  const passwordProvider = userInternal.providerData.find(\n    ({ providerId }) => providerId === ProviderId.PASSWORD\n  );\n  if (passwordProvider) {\n    passwordProvider.displayName = userInternal.displayName;\n    passwordProvider.photoURL = userInternal.photoURL;\n  }\n\n  await userInternal._updateTokensIfNecessary(response);\n}\n\n/**\n * Updates the user's email address.\n *\n * @remarks\n * An email will be sent to the original email address (if it was set) that allows to revoke the\n * email address change, in order to protect them from account hijacking.\n *\n * This method is not supported on any {@link User} signed in by {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newEmail - The new email address.\n *\n * Throws \"auth/operation-not-allowed\" error when\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\n * is enabled.\n * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\n *\n * @public\n */\nexport function updateEmail(user: User, newEmail: string): Promise<void> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(userInternal.auth)\n    );\n  }\n  return updateEmailOrPassword(userInternal, newEmail, null);\n}\n\n/**\n * Updates the user's password.\n *\n * @remarks\n * Important: this is a security sensitive operation that requires the user to have recently signed\n * in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n * @param newPassword - The new password.\n *\n * @public\n */\nexport function updatePassword(user: User, newPassword: string): Promise<void> {\n  return updateEmailOrPassword(\n    getModularInstance(user) as UserInternal,\n    null,\n    newPassword\n  );\n}\n\nasync function updateEmailOrPassword(\n  user: UserInternal,\n  email: string | null,\n  password: string | null\n): Promise<void> {\n  const { auth } = user;\n  const idToken = await user.getIdToken();\n  const request: UpdateEmailPasswordRequest = {\n    idToken,\n    returnSecureToken: true\n  };\n\n  if (email) {\n    request.email = email;\n  }\n\n  if (password) {\n    request.password = password;\n  }\n\n  const response = await _logoutIfInvalidated(\n    user,\n    apiUpdateEmailPassword(auth, request)\n  );\n  await user._updateTokensIfNecessary(response, /* reload */ true);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AdditionalUserInfo, UserCredential } from '../../model/public_types';\nimport { IdTokenResponse, IdTokenResponseKind } from '../../model/id_token';\nimport { _parseToken } from './id_token_result';\nimport { UserCredentialInternal } from '../../model/user';\nimport { ProviderId } from '../../model/enums';\n\n/**\n * Parse the `AdditionalUserInfo` from the ID token response.\n *\n */\nexport function _fromIdTokenResponse(\n  idTokenResponse?: IdTokenResponse\n): AdditionalUserInfo | null {\n  if (!idTokenResponse) {\n    return null;\n  }\n  const { providerId } = idTokenResponse;\n  const profile = idTokenResponse.rawUserInfo\n    ? JSON.parse(idTokenResponse.rawUserInfo)\n    : {};\n  const isNewUser =\n    idTokenResponse.isNewUser ||\n    idTokenResponse.kind === IdTokenResponseKind.SignupNewUser;\n  if (!providerId && idTokenResponse?.idToken) {\n    const signInProvider = _parseToken(idTokenResponse.idToken)?.firebase?.[\n      'sign_in_provider'\n    ];\n    if (signInProvider) {\n      const filteredProviderId =\n        signInProvider !== ProviderId.ANONYMOUS &&\n        signInProvider !== ProviderId.CUSTOM\n          ? (signInProvider as ProviderId)\n          : null;\n      // Uses generic class in accordance with the legacy SDK.\n      return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n    }\n  }\n  if (!providerId) {\n    return null;\n  }\n  switch (providerId) {\n    case ProviderId.FACEBOOK:\n      return new FacebookAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.GITHUB:\n      return new GithubAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.GOOGLE:\n      return new GoogleAdditionalUserInfo(isNewUser, profile);\n    case ProviderId.TWITTER:\n      return new TwitterAdditionalUserInfo(\n        isNewUser,\n        profile,\n        idTokenResponse.screenName || null\n      );\n    case ProviderId.CUSTOM:\n    case ProviderId.ANONYMOUS:\n      return new GenericAdditionalUserInfo(isNewUser, null);\n    default:\n      return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n  }\n}\n\nclass GenericAdditionalUserInfo implements AdditionalUserInfo {\n  constructor(\n    readonly isNewUser: boolean,\n    readonly providerId: ProviderId | string | null,\n    readonly profile: Record<string, unknown> = {}\n  ) {}\n}\n\nclass FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {\n  constructor(\n    isNewUser: boolean,\n    providerId: ProviderId,\n    profile: Record<string, unknown>,\n    readonly username: string | null\n  ) {\n    super(isNewUser, providerId, profile);\n  }\n}\n\nclass FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(isNewUser, ProviderId.FACEBOOK, profile);\n  }\n}\n\nclass GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(\n      isNewUser,\n      ProviderId.GITHUB,\n      profile,\n      typeof profile?.login === 'string' ? profile?.login : null\n    );\n  }\n}\n\nclass GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {\n  constructor(isNewUser: boolean, profile: Record<string, unknown>) {\n    super(isNewUser, ProviderId.GOOGLE, profile);\n  }\n}\n\nclass TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {\n  constructor(\n    isNewUser: boolean,\n    profile: Record<string, unknown>,\n    screenName: string | null\n  ) {\n    super(isNewUser, ProviderId.TWITTER, profile, screenName);\n  }\n}\n\n/**\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\n *\n * @param userCredential - The user credential.\n *\n * @public\n */\nexport function getAdditionalUserInfo(\n  userCredential: UserCredential\n): AdditionalUserInfo | null {\n  const { user, _tokenResponse } = userCredential as UserCredentialInternal;\n  if (user.isAnonymous && !_tokenResponse) {\n    // Handle the special case where signInAnonymously() gets called twice.\n    // No network call is made so there's nothing to actually fill this in\n    return {\n      providerId: null,\n      isNewUser: false,\n      profile: null\n    };\n  }\n\n  return _fromIdTokenResponse(_tokenResponse);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance } from '@firebase/util';\nimport {\n  Auth,\n  NextOrObserver,\n  Persistence,\n  User,\n  CompleteFn,\n  ErrorFn,\n  Unsubscribe,\n  PasswordValidationStatus\n} from '../model/public_types';\nimport { _initializeRecaptchaConfig } from '../platform_browser/recaptcha/recaptcha_enterprise_verifier';\nimport { _castAuth } from '../core/auth/auth_impl';\n\nexport {\n  debugErrorMap,\n  prodErrorMap,\n  AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY as AuthErrorCodes\n} from './errors';\n\n// Non-optional auth methods.\n/**\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\n * `Auth` session and applies this type of persistence for future sign-in requests, including\n * sign-in with redirect requests.\n *\n * @remarks\n * This makes it easy for a user signing in to specify whether their session should be\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\n * that are shared by other users or have sensitive data.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * setPersistence(auth, browserSessionPersistence);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param persistence - The {@link Persistence} to use.\n * @returns A `Promise` that resolves once the persistence change has completed\n *\n * @public\n */\nexport function setPersistence(\n  auth: Auth,\n  persistence: Persistence\n): Promise<void> {\n  return getModularInstance(auth).setPersistence(persistence);\n}\n\n/**\n * Loads the reCAPTCHA configuration into the `Auth` instance.\n *\n * @remarks\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\n * verification flow should be triggered for each auth provider, into the\n * current Auth session.\n *\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\n * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\n * verification, the SDK will transparently load the reCAPTCHA config and restart the\n * auth flows.\n *\n * Thus, by calling this optional method, you will reduce the latency of future auth flows.\n * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * initializeRecaptchaConfig(auth);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function initializeRecaptchaConfig(auth: Auth): Promise<void> {\n  return _initializeRecaptchaConfig(auth);\n}\n\n/**\n * Validates the password against the password policy configured for the project or tenant.\n *\n * @remarks\n * If no tenant ID is set on the `Auth` instance, then this method will use the password\n * policy configured for the project. Otherwise, this method will use the policy configured\n * for the tenant. If a password policy has not been configured, then the default policy\n * configured for all projects will be used.\n *\n * If an auth flow fails because a submitted password does not meet the password policy\n * requirements and this method has previously been called, then this method will use the\n * most recent policy available when called again.\n *\n * @example\n * ```javascript\n * validatePassword(auth, 'some-password');\n * ```\n *\n * @param auth The {@link Auth} instance.\n * @param password The password to validate.\n *\n * @public\n */\nexport async function validatePassword(\n  auth: Auth,\n  password: string\n): Promise<PasswordValidationStatus> {\n  const authInternal = _castAuth(auth);\n  return authInternal.validatePassword(password);\n}\n\n/**\n * Adds an observer for changes to the signed-in user's ID token.\n *\n * @remarks\n * This includes sign-in, sign-out, and token refresh events.\n * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onIdTokenChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onIdTokenChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Adds a blocking callback that runs before an auth state change\n * sets a new user.\n *\n * @param auth - The {@link Auth} instance.\n * @param callback - callback triggered before new user value is set.\n *   If this throws, it blocks the user from being set.\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\n *   callback throws, allowing you to undo any side effects.\n */\nexport function beforeAuthStateChanged(\n  auth: Auth,\n  callback: (user: User | null) => void | Promise<void>,\n  onAbort?: () => void\n): Unsubscribe {\n  return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);\n}\n/**\n * Adds an observer for changes to the user's sign-in state.\n *\n * @remarks\n * To keep the old behavior, see {@link onIdTokenChanged}.\n *\n * @param auth - The {@link Auth} instance.\n * @param nextOrObserver - callback triggered on change.\n * @param error - Deprecated. This callback is never triggered. Errors\n * on signing in/out can be caught in promises returned from\n * sign-in/sign-out functions.\n * @param completed - Deprecated. This callback is never triggered.\n *\n * @public\n */\nexport function onAuthStateChanged(\n  auth: Auth,\n  nextOrObserver: NextOrObserver<User>,\n  error?: ErrorFn,\n  completed?: CompleteFn\n): Unsubscribe {\n  return getModularInstance(auth).onAuthStateChanged(\n    nextOrObserver,\n    error,\n    completed\n  );\n}\n/**\n * Sets the current language to the default device/browser preference.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function useDeviceLanguage(auth: Auth): void {\n  getModularInstance(auth).useDeviceLanguage();\n}\n/**\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\n * {@link Auth} instance.\n *\n * @remarks\n * A new instance copy of the user provided will be made and set as currentUser.\n *\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\n * like other sign in methods.\n *\n * The operation fails with an error if the user to be updated belongs to a different Firebase\n * project.\n *\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n * @param user - The new {@link User}.\n *\n * @public\n */\nexport function updateCurrentUser(\n  auth: Auth,\n  user: User | null\n): Promise<void> {\n  return getModularInstance(auth).updateCurrentUser(user);\n}\n/**\n * Signs out the current user.\n *\n * @remarks\n * This method is not supported by {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @param auth - The {@link Auth} instance.\n *\n * @public\n */\nexport function signOut(auth: Auth): Promise<void> {\n  return getModularInstance(auth).signOut();\n}\n\n/**\n * Revokes the given access token. Currently only supports Apple OAuth access tokens.\n *\n * @param auth - The {@link Auth} instance.\n * @param token - The Apple OAuth access token.\n *\n * @public\n */\nexport function revokeAccessToken(auth: Auth, token: string): Promise<void> {\n  const authInternal = _castAuth(auth);\n  return authInternal.revokeAccessToken(token);\n}\n\nexport { initializeAuth } from './auth/initialize';\nexport { connectAuthEmulator } from './auth/emulator';\n\n// credentials\nexport { AuthCredential } from './credentials';\nexport { EmailAuthCredential } from './credentials/email';\nexport { OAuthCredential } from './credentials/oauth';\nexport { PhoneAuthCredential } from './credentials/phone';\n\n// persistence\nexport { inMemoryPersistence } from './persistence/in_memory';\n\n// providers\nexport { EmailAuthProvider } from './providers/email';\nexport { FacebookAuthProvider } from './providers/facebook';\nexport { CustomParameters } from './providers/federated';\nexport { GoogleAuthProvider } from './providers/google';\nexport { GithubAuthProvider } from './providers/github';\nexport { OAuthProvider, OAuthCredentialOptions } from './providers/oauth';\nexport { SAMLAuthProvider } from './providers/saml';\nexport { TwitterAuthProvider } from './providers/twitter';\n\n// strategies\nexport { signInAnonymously } from './strategies/anonymous';\nexport {\n  signInWithCredential,\n  linkWithCredential,\n  reauthenticateWithCredential\n} from './strategies/credential';\nexport { signInWithCustomToken } from './strategies/custom_token';\nexport {\n  sendPasswordResetEmail,\n  confirmPasswordReset,\n  applyActionCode,\n  checkActionCode,\n  verifyPasswordResetCode,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword\n} from './strategies/email_and_password';\nexport {\n  sendSignInLinkToEmail,\n  isSignInWithEmailLink,\n  signInWithEmailLink\n} from './strategies/email_link';\nexport {\n  fetchSignInMethodsForEmail,\n  sendEmailVerification,\n  verifyBeforeUpdateEmail\n} from './strategies/email';\n\n// core\nexport { ActionCodeURL, parseActionCodeURL } from './action_code_url';\n\n// user\nexport {\n  updateProfile,\n  updateEmail,\n  updatePassword\n} from './user/account_info';\nexport { getIdToken, getIdTokenResult } from './user/id_token_result';\nexport { unlink } from './user/link_unlink';\nexport { getAdditionalUserInfo } from './user/additional_user_info';\n\n// Non-optional user methods.\nexport { reload } from './user/reload';\n/**\n * Deletes and signs out the user.\n *\n * @remarks\n * Important: this is a security-sensitive operation that requires the user to have recently\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\n * {@link reauthenticateWithCredential}.\n *\n * @param user - The user.\n *\n * @public\n */\nexport async function deleteUser(user: User): Promise<void> {\n  return getModularInstance(user).delete();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserInternal } from '../model/user';\nimport { MultiFactorSession } from '../model/public_types';\n\nexport const enum MultiFactorSessionType {\n  ENROLL = 'enroll',\n  SIGN_IN = 'signin'\n}\n\ninterface SerializedMultiFactorSession {\n  multiFactorSession: {\n    idToken?: string;\n    pendingCredential?: string;\n  };\n}\n\nexport class MultiFactorSessionImpl implements MultiFactorSession {\n  private constructor(\n    readonly type: MultiFactorSessionType,\n    readonly credential: string,\n    readonly user?: UserInternal\n  ) {}\n\n  static _fromIdtoken(\n    idToken: string,\n    user?: UserInternal\n  ): MultiFactorSessionImpl {\n    return new MultiFactorSessionImpl(\n      MultiFactorSessionType.ENROLL,\n      idToken,\n      user\n    );\n  }\n\n  static _fromMfaPendingCredential(\n    mfaPendingCredential: string\n  ): MultiFactorSessionImpl {\n    return new MultiFactorSessionImpl(\n      MultiFactorSessionType.SIGN_IN,\n      mfaPendingCredential\n    );\n  }\n\n  toJSON(): SerializedMultiFactorSession {\n    const key =\n      this.type === MultiFactorSessionType.ENROLL\n        ? 'idToken'\n        : 'pendingCredential';\n    return {\n      multiFactorSession: {\n        [key]: this.credential\n      }\n    };\n  }\n\n  static fromJSON(\n    obj: Partial<SerializedMultiFactorSession>\n  ): MultiFactorSessionImpl | null {\n    if (obj?.multiFactorSession) {\n      if (obj.multiFactorSession?.pendingCredential) {\n        return MultiFactorSessionImpl._fromMfaPendingCredential(\n          obj.multiFactorSession.pendingCredential\n        );\n      } else if (obj.multiFactorSession?.idToken) {\n        return MultiFactorSessionImpl._fromIdtoken(\n          obj.multiFactorSession.idToken\n        );\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  MultiFactorResolver,\n  UserCredential,\n  MultiFactorError\n} from '../model/public_types';\n\nimport { _castAuth } from '../core/auth/auth_impl';\nimport { AuthErrorCode } from '../core/errors';\nimport { UserCredentialImpl } from '../core/user/user_credential_impl';\nimport { _assert, _fail } from '../core/util/assert';\nimport { UserCredentialInternal } from '../model/user';\nimport { MultiFactorAssertionImpl } from './mfa_assertion';\nimport { MultiFactorError as MultiFactorErrorInternal } from './mfa_error';\nimport { MultiFactorInfoImpl } from './mfa_info';\nimport { MultiFactorSessionImpl } from './mfa_session';\nimport { getModularInstance } from '@firebase/util';\nimport { OperationType } from '../model/enums';\n\nexport class MultiFactorResolverImpl implements MultiFactorResolver {\n  private constructor(\n    readonly session: MultiFactorSessionImpl,\n    readonly hints: MultiFactorInfoImpl[],\n    private readonly signInResolver: (\n      assertion: MultiFactorAssertionImpl\n    ) => Promise<UserCredentialInternal>\n  ) {}\n\n  /** @internal */\n  static _fromError(\n    authExtern: Auth,\n    error: MultiFactorErrorInternal\n  ): MultiFactorResolverImpl {\n    const auth = _castAuth(authExtern);\n    const serverResponse = error.customData._serverResponse;\n    const hints = (serverResponse.mfaInfo || []).map(enrollment =>\n      MultiFactorInfoImpl._fromServerResponse(auth, enrollment)\n    );\n\n    _assert(\n      serverResponse.mfaPendingCredential,\n      auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const session = MultiFactorSessionImpl._fromMfaPendingCredential(\n      serverResponse.mfaPendingCredential\n    );\n\n    return new MultiFactorResolverImpl(\n      session,\n      hints,\n      async (\n        assertion: MultiFactorAssertionImpl\n      ): Promise<UserCredentialInternal> => {\n        const mfaResponse = await assertion._process(auth, session);\n        // Clear out the unneeded fields from the old login response\n        delete serverResponse.mfaInfo;\n        delete serverResponse.mfaPendingCredential;\n\n        // Use in the new token & refresh token in the old response\n        const idTokenResponse = {\n          ...serverResponse,\n          idToken: mfaResponse.idToken,\n          refreshToken: mfaResponse.refreshToken\n        };\n\n        // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n        switch (error.operationType) {\n          case OperationType.SIGN_IN:\n            const userCredential =\n              await UserCredentialImpl._fromIdTokenResponse(\n                auth,\n                error.operationType,\n                idTokenResponse\n              );\n            await auth._updateCurrentUser(userCredential.user);\n            return userCredential;\n          case OperationType.REAUTHENTICATE:\n            _assert(error.user, auth, AuthErrorCode.INTERNAL_ERROR);\n            return UserCredentialImpl._forOperation(\n              error.user,\n              error.operationType,\n              idTokenResponse\n            );\n          default:\n            _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n        }\n      }\n    );\n  }\n\n  async resolveSignIn(\n    assertionExtern: MultiFactorAssertionImpl\n  ): Promise<UserCredential> {\n    const assertion = assertionExtern as MultiFactorAssertionImpl;\n    return this.signInResolver(assertion);\n  }\n}\n\n/**\n * Provides a {@link MultiFactorResolver} suitable for completion of a\n * multi-factor flow.\n *\n * @param auth - The {@link Auth} instance.\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\n * reauthentication operation.\n *\n * @public\n */\nexport function getMultiFactorResolver(\n  auth: Auth,\n  error: MultiFactorError\n): MultiFactorResolver {\n  const authModular = getModularInstance(auth);\n  const errorInternal = error as MultiFactorErrorInternal;\n  _assert(\n    error.customData.operationType,\n    authModular,\n    AuthErrorCode.ARGUMENT_ERROR\n  );\n  _assert(\n    errorInternal.customData._serverResponse?.mfaPendingCredential,\n    authModular,\n    AuthErrorCode.ARGUMENT_ERROR\n  );\n\n  return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary,\n  _performApiRequest\n} from '../index';\nimport { SignInWithPhoneNumberRequest } from '../authentication/sms';\nimport { FinalizeMfaResponse } from '../authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\n\n/**\n * MFA Info as returned by the API.\n */\ninterface BaseMfaEnrollment {\n  mfaEnrollmentId: string;\n  enrolledAt: number;\n  displayName?: string;\n}\n\n/**\n * An MFA provided by SMS verification.\n */\nexport interface PhoneMfaEnrollment extends BaseMfaEnrollment {\n  phoneInfo: string;\n}\n\n/**\n * An MFA provided by TOTP (Time-based One Time Password).\n */\nexport interface TotpMfaEnrollment extends BaseMfaEnrollment {}\n\n/**\n * MfaEnrollment can be any subtype of BaseMfaEnrollment, currently only PhoneMfaEnrollment and TotpMfaEnrollment are supported.\n */\nexport type MfaEnrollment = PhoneMfaEnrollment | TotpMfaEnrollment;\n\nexport interface StartPhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneEnrollmentInfo: {\n    phoneNumber: string;\n    // reCAPTCHA v2 token\n    recaptchaToken?: string;\n    // reCAPTCHA Enterprise token\n    captchaResponse?: string;\n    clientType?: RecaptchaClientType;\n    recaptchaVersion?: RecaptchaVersion;\n  };\n  tenantId?: string;\n}\n\nexport interface StartPhoneMfaEnrollmentResponse {\n  phoneSessionInfo: {\n    sessionInfo: string;\n  };\n}\n\nexport function startEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: StartPhoneMfaEnrollmentRequest\n): Promise<StartPhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    StartPhoneMfaEnrollmentRequest,\n    StartPhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface FinalizePhoneMfaEnrollmentRequest {\n  idToken: string;\n  phoneVerificationInfo: SignInWithPhoneNumberRequest;\n  displayName?: string | null;\n  tenantId?: string;\n}\n\nexport interface FinalizePhoneMfaEnrollmentResponse\n  extends FinalizeMfaResponse {}\n\nexport function finalizeEnrollPhoneMfa(\n  auth: AuthInternal,\n  request: FinalizePhoneMfaEnrollmentRequest\n): Promise<FinalizePhoneMfaEnrollmentResponse> {\n  return _performApiRequest<\n    FinalizePhoneMfaEnrollmentRequest,\n    FinalizePhoneMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\nexport interface StartTotpMfaEnrollmentRequest {\n  idToken: string;\n  totpEnrollmentInfo: {};\n  tenantId?: string;\n}\n\nexport interface StartTotpMfaEnrollmentResponse {\n  totpSessionInfo: {\n    sharedSecretKey: string;\n    verificationCodeLength: number;\n    hashingAlgorithm: string;\n    periodSec: number;\n    sessionInfo: string;\n    finalizeEnrollmentTime: number;\n  };\n}\n\nexport function startEnrollTotpMfa(\n  auth: AuthInternal,\n  request: StartTotpMfaEnrollmentRequest\n): Promise<StartTotpMfaEnrollmentResponse> {\n  return _performApiRequest<\n    StartTotpMfaEnrollmentRequest,\n    StartTotpMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface TotpVerificationInfo {\n  sessionInfo: string;\n  verificationCode: string;\n}\nexport interface FinalizeTotpMfaEnrollmentRequest {\n  idToken: string;\n  totpVerificationInfo: TotpVerificationInfo;\n  displayName?: string | null;\n  tenantId?: string;\n}\n\nexport interface FinalizeTotpMfaEnrollmentResponse\n  extends FinalizeMfaResponse {}\n\nexport function finalizeEnrollTotpMfa(\n  auth: AuthInternal,\n  request: FinalizeTotpMfaEnrollmentRequest\n): Promise<FinalizeTotpMfaEnrollmentResponse> {\n  return _performApiRequest<\n    FinalizeTotpMfaEnrollmentRequest,\n    FinalizeTotpMfaEnrollmentResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_ENROLLMENT,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface WithdrawMfaRequest {\n  idToken: string;\n  mfaEnrollmentId: string;\n  tenantId?: string;\n}\n\nexport interface WithdrawMfaResponse extends FinalizeMfaResponse {}\n\nexport function withdrawMfa(\n  auth: AuthInternal,\n  request: WithdrawMfaRequest\n): Promise<WithdrawMfaResponse> {\n  return _performApiRequest<WithdrawMfaRequest, WithdrawMfaResponse>(\n    auth,\n    HttpMethod.POST,\n    Endpoint.WITHDRAW_MFA,\n    _addTidIfNecessary(auth, request)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  MultiFactorAssertion,\n  MultiFactorInfo,\n  MultiFactorSession,\n  MultiFactorUser,\n  User\n} from '../model/public_types';\n\nimport { withdrawMfa } from '../api/account_management/mfa';\nimport { _logoutIfInvalidated } from '../core/user/invalidation';\nimport { UserInternal } from '../model/user';\nimport { MultiFactorAssertionImpl } from './mfa_assertion';\nimport { MultiFactorInfoImpl } from './mfa_info';\nimport { MultiFactorSessionImpl } from './mfa_session';\nimport { getModularInstance } from '@firebase/util';\n\nexport class MultiFactorUserImpl implements MultiFactorUser {\n  enrolledFactors: MultiFactorInfo[] = [];\n\n  private constructor(readonly user: UserInternal) {\n    user._onReload(userInfo => {\n      if (userInfo.mfaInfo) {\n        this.enrolledFactors = userInfo.mfaInfo.map(enrollment =>\n          MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment)\n        );\n      }\n    });\n  }\n\n  static _fromUser(user: UserInternal): MultiFactorUserImpl {\n    return new MultiFactorUserImpl(user);\n  }\n\n  async getSession(): Promise<MultiFactorSession> {\n    return MultiFactorSessionImpl._fromIdtoken(\n      await this.user.getIdToken(),\n      this.user\n    );\n  }\n\n  async enroll(\n    assertionExtern: MultiFactorAssertion,\n    displayName?: string | null\n  ): Promise<void> {\n    const assertion = assertionExtern as MultiFactorAssertionImpl;\n    const session = (await this.getSession()) as MultiFactorSessionImpl;\n    const finalizeMfaResponse = await _logoutIfInvalidated(\n      this.user,\n      assertion._process(this.user.auth, session, displayName)\n    );\n    // New tokens will be issued after enrollment of the new second factors.\n    // They need to be updated on the user.\n    await this.user._updateTokensIfNecessary(finalizeMfaResponse);\n    // The user needs to be reloaded to get the new multi-factor information\n    // from server. USER_RELOADED event will be triggered and `enrolledFactors`\n    // will be updated.\n    return this.user.reload();\n  }\n\n  async unenroll(infoOrUid: MultiFactorInfo | string): Promise<void> {\n    const mfaEnrollmentId =\n      typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n    const idToken = await this.user.getIdToken();\n    try {\n      const idTokenResponse = await _logoutIfInvalidated(\n        this.user,\n        withdrawMfa(this.user.auth, {\n          idToken,\n          mfaEnrollmentId\n        })\n      );\n      // Remove the second factor from the user's list.\n      this.enrolledFactors = this.enrolledFactors.filter(\n        ({ uid }) => uid !== mfaEnrollmentId\n      );\n      // Depending on whether the backend decided to revoke the user's session,\n      // the tokenResponse may be empty. If the tokens were not updated (and they\n      // are now invalid), reloading the user will discover this and invalidate\n      // the user's state accordingly.\n      await this.user._updateTokensIfNecessary(idTokenResponse);\n      await this.user.reload();\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n\nconst multiFactorUserCache = new WeakMap<User, MultiFactorUser>();\n\n/**\n * The {@link MultiFactorUser} corresponding to the user.\n *\n * @remarks\n * This is used to access all multi-factor properties and operations related to the user.\n *\n * @param user - The user.\n *\n * @public\n */\nexport function multiFactor(user: User): MultiFactorUser {\n  const userModular = getModularInstance(user);\n  if (!multiFactorUserCache.has(userModular)) {\n    multiFactorUserCache.set(\n      userModular,\n      MultiFactorUserImpl._fromUser(userModular as UserInternal)\n    );\n  }\n  return multiFactorUserCache.get(userModular)!;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Persistence } from '../../model/public_types';\n\nexport const enum PersistenceType {\n  SESSION = 'SESSION',\n  LOCAL = 'LOCAL',\n  NONE = 'NONE'\n}\n\nexport type PersistedBlob = Record<string, unknown>;\n\nexport interface Instantiator<T> {\n  (blob: PersistedBlob): T;\n}\n\nexport type PersistenceValue = PersistedBlob | string;\n\nexport const STORAGE_AVAILABLE_KEY = '__sak';\n\nexport interface StorageEventListener {\n  (value: PersistenceValue | null): void;\n}\n\nexport interface PersistenceInternal extends Persistence {\n  type: PersistenceType;\n  _isAvailable(): Promise<boolean>;\n  _set(key: string, value: PersistenceValue): Promise<void>;\n  _get<T extends PersistenceValue>(key: string): Promise<T | null>;\n  _remove(key: string): Promise<void>;\n  _addListener(key: string, listener: StorageEventListener): void;\n  _removeListener(key: string, listener: StorageEventListener): void;\n  // Should this persistence allow migration up the chosen hierarchy?\n  _shouldAllowMigration?: boolean;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PersistenceValue,\n  STORAGE_AVAILABLE_KEY,\n  PersistenceType\n} from '../../core/persistence';\n\n// There are two different browser persistence types: local and session.\n// Both have the same implementation but use a different underlying storage\n// object.\n\nexport abstract class BrowserPersistenceClass {\n  protected constructor(\n    protected readonly storageRetriever: () => Storage,\n    readonly type: PersistenceType\n  ) {}\n\n  _isAvailable(): Promise<boolean> {\n    try {\n      if (!this.storage) {\n        return Promise.resolve(false);\n      }\n      this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');\n      this.storage.removeItem(STORAGE_AVAILABLE_KEY);\n      return Promise.resolve(true);\n    } catch {\n      return Promise.resolve(false);\n    }\n  }\n\n  _set(key: string, value: PersistenceValue): Promise<void> {\n    this.storage.setItem(key, JSON.stringify(value));\n    return Promise.resolve();\n  }\n\n  _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const json = this.storage.getItem(key);\n    return Promise.resolve(json ? JSON.parse(json) : null);\n  }\n\n  _remove(key: string): Promise<void> {\n    this.storage.removeItem(key);\n    return Promise.resolve();\n  }\n\n  protected get storage(): Storage {\n    return this.storageRetriever();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport { _isMobileBrowser, _isIE10 } from '../../core/util/browser';\nimport {\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener\n} from '../../core/persistence';\nimport { BrowserPersistenceClass } from './browser';\n\n// The polling period in case events are not supported\nexport const _POLLING_INTERVAL_MS = 1000;\n\n// The IE 10 localStorage cross tab synchronization delay in milliseconds\nconst IE10_LOCAL_STORAGE_SYNC_DELAY = 10;\n\nclass BrowserLocalPersistence\n  extends BrowserPersistenceClass\n  implements InternalPersistence\n{\n  static type: 'LOCAL' = 'LOCAL';\n\n  constructor() {\n    super(() => window.localStorage, PersistenceType.LOCAL);\n  }\n\n  private readonly boundEventHandler = (\n    event: StorageEvent,\n    poll?: boolean\n  ): void => this.onStorageEvent(event, poll);\n  private readonly listeners: Record<string, Set<StorageEventListener>> = {};\n  private readonly localCache: Record<string, string | null> = {};\n  // setTimeout return value is platform specific\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private pollTimer: any | null = null;\n\n  // Whether to use polling instead of depending on window events\n  private readonly fallbackToPolling = _isMobileBrowser();\n  readonly _shouldAllowMigration = true;\n\n  private forAllChangedKeys(\n    cb: (key: string, oldValue: string | null, newValue: string | null) => void\n  ): void {\n    // Check all keys with listeners on them.\n    for (const key of Object.keys(this.listeners)) {\n      // Get value from localStorage.\n      const newValue = this.storage.getItem(key);\n      const oldValue = this.localCache[key];\n      // If local map value does not match, trigger listener with storage event.\n      // Differentiate this simulated event from the real storage event.\n      if (newValue !== oldValue) {\n        cb(key, oldValue, newValue);\n      }\n    }\n  }\n\n  private onStorageEvent(event: StorageEvent, poll = false): void {\n    // Key would be null in some situations, like when localStorage is cleared\n    if (!event.key) {\n      this.forAllChangedKeys(\n        (key: string, _oldValue: string | null, newValue: string | null) => {\n          this.notifyListeners(key, newValue);\n        }\n      );\n      return;\n    }\n\n    const key = event.key;\n\n    // Check the mechanism how this event was detected.\n    // The first event will dictate the mechanism to be used.\n    if (poll) {\n      // Environment detects storage changes via polling.\n      // Remove storage event listener to prevent possible event duplication.\n      this.detachListener();\n    } else {\n      // Environment detects storage changes via storage event listener.\n      // Remove polling listener to prevent possible event duplication.\n      this.stopPolling();\n    }\n\n    const triggerListeners = (): void => {\n      // Keep local map up to date in case storage event is triggered before\n      // poll.\n      const storedValue = this.storage.getItem(key);\n      if (!poll && this.localCache[key] === storedValue) {\n        // Real storage event which has already been detected, do nothing.\n        // This seems to trigger in some IE browsers for some reason.\n        return;\n      }\n      this.notifyListeners(key, storedValue);\n    };\n\n    const storedValue = this.storage.getItem(key);\n    if (\n      _isIE10() &&\n      storedValue !== event.newValue &&\n      event.newValue !== event.oldValue\n    ) {\n      // IE 10 has this weird bug where a storage event would trigger with the\n      // correct key, oldValue and newValue but localStorage.getItem(key) does\n      // not yield the updated value until a few milliseconds. This ensures\n      // this recovers from that situation.\n      setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);\n    } else {\n      triggerListeners();\n    }\n  }\n\n  private notifyListeners(key: string, value: string | null): void {\n    this.localCache[key] = value;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(value ? JSON.parse(value) : value);\n      }\n    }\n  }\n\n  private startPolling(): void {\n    this.stopPolling();\n\n    this.pollTimer = setInterval(() => {\n      this.forAllChangedKeys(\n        (key: string, oldValue: string | null, newValue: string | null) => {\n          this.onStorageEvent(\n            new StorageEvent('storage', {\n              key,\n              oldValue,\n              newValue\n            }),\n            /* poll */ true\n          );\n        }\n      );\n    }, _POLLING_INTERVAL_MS);\n  }\n\n  private stopPolling(): void {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n\n  private attachListener(): void {\n    window.addEventListener('storage', this.boundEventHandler);\n  }\n\n  private detachListener(): void {\n    window.removeEventListener('storage', this.boundEventHandler);\n  }\n\n  _addListener(key: string, listener: StorageEventListener): void {\n    if (Object.keys(this.listeners).length === 0) {\n      // Whether browser can detect storage event when it had already been pushed to the background.\n      // This may happen in some mobile browsers. A localStorage change in the foreground window\n      // will not be detected in the background window via the storage event.\n      // This was detected in iOS 7.x mobile browsers\n      if (this.fallbackToPolling) {\n        this.startPolling();\n      } else {\n        this.attachListener();\n      }\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      this.localCache[key] = this.storage.getItem(key);\n    }\n    this.listeners[key].add(listener);\n  }\n\n  _removeListener(key: string, listener: StorageEventListener): void {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n\n    if (Object.keys(this.listeners).length === 0) {\n      this.detachListener();\n      this.stopPolling();\n    }\n  }\n\n  // Update local cache on base operations:\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    await super._set(key, value);\n    this.localCache[key] = JSON.stringify(value);\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const value = await super._get<T>(key);\n    this.localCache[key] = JSON.stringify(value);\n    return value;\n  }\n\n  async _remove(key: string): Promise<void> {\n    await super._remove(key);\n    delete this.localCache[key];\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`\n * for the underlying storage.\n *\n * @public\n */\nexport const browserLocalPersistence: Persistence = BrowserLocalPersistence;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\n\nimport {\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  StorageEventListener\n} from '../../core/persistence';\nimport { BrowserPersistenceClass } from './browser';\n\nclass BrowserSessionPersistence\n  extends BrowserPersistenceClass\n  implements InternalPersistence\n{\n  static type: 'SESSION' = 'SESSION';\n\n  constructor() {\n    super(() => window.sessionStorage, PersistenceType.SESSION);\n  }\n\n  _addListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n\n  _removeListener(_key: string, _listener: StorageEventListener): void {\n    // Listeners are not supported for session storage since it cannot be shared across windows\n    return;\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`\n * for the underlying storage.\n *\n * @public\n */\nexport const browserSessionPersistence: Persistence = BrowserSessionPersistence;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** TODO: remove this once tslib has a polyfill for Promise.allSettled */\ninterface PromiseFulfilledResult<T> {\n  fulfilled: true;\n  value: T;\n}\n\ninterface PromiseRejectedResult {\n  fulfilled: false;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason: any;\n}\n\nexport type PromiseSettledResult<T> =\n  | PromiseFulfilledResult<T>\n  | PromiseRejectedResult;\n\n/**\n * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.\n *\n * @param promises - Array of promises to wait on.\n */\nexport function _allSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<Array<PromiseSettledResult<T>>> {\n  return Promise.all(\n    promises.map(async promise => {\n      try {\n        const value = await promise;\n        return {\n          fulfilled: true,\n          value\n        } as PromiseFulfilledResult<T>;\n      } catch (reason) {\n        return {\n          fulfilled: false,\n          reason\n        } as PromiseRejectedResult;\n      }\n    })\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ReceiverHandler,\n  _EventType,\n  _ReceiverResponse,\n  SenderMessageEvent,\n  _Status,\n  _SenderRequest\n} from './index';\nimport { _allSettled } from './promise';\n\n/**\n * Interface class for receiving messages.\n *\n */\nexport class Receiver {\n  private static readonly receivers: Receiver[] = [];\n  private readonly boundEventHandler: EventListener;\n\n  private readonly handlersMap: {\n    // TypeScript doesn't have existential types :(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [eventType: string]: Set<ReceiverHandler<any, any>>;\n  } = {};\n\n  constructor(private readonly eventTarget: EventTarget) {\n    this.boundEventHandler = this.handleEvent.bind(this);\n  }\n\n  /**\n   * Obtain an instance of a Receiver for a given event target, if none exists it will be created.\n   *\n   * @param eventTarget - An event target (such as window or self) through which the underlying\n   * messages will be received.\n   */\n  static _getInstance(eventTarget: EventTarget): Receiver {\n    // The results are stored in an array since objects can't be keys for other\n    // objects. In addition, setting a unique property on an event target as a\n    // hash map key may not be allowed due to CORS restrictions.\n    const existingInstance = this.receivers.find(receiver =>\n      receiver.isListeningto(eventTarget)\n    );\n    if (existingInstance) {\n      return existingInstance;\n    }\n    const newInstance = new Receiver(eventTarget);\n    this.receivers.push(newInstance);\n    return newInstance;\n  }\n\n  private isListeningto(eventTarget: EventTarget): boolean {\n    return this.eventTarget === eventTarget;\n  }\n\n  /**\n   * Fans out a MessageEvent to the appropriate listeners.\n   *\n   * @remarks\n   * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have\n   * finished processing.\n   *\n   * @param event - The MessageEvent.\n   *\n   */\n  private async handleEvent<\n    T extends _ReceiverResponse,\n    S extends _SenderRequest\n  >(event: Event): Promise<void> {\n    const messageEvent = event as MessageEvent<SenderMessageEvent<S>>;\n    const { eventId, eventType, data } = messageEvent.data;\n\n    const handlers: Set<ReceiverHandler<T, S>> | undefined =\n      this.handlersMap[eventType];\n    if (!handlers?.size) {\n      return;\n    }\n\n    messageEvent.ports[0].postMessage({\n      status: _Status.ACK,\n      eventId,\n      eventType\n    });\n\n    const promises = Array.from(handlers).map(async handler =>\n      handler(messageEvent.origin, data)\n    );\n    const response = await _allSettled(promises);\n    messageEvent.ports[0].postMessage({\n      status: _Status.DONE,\n      eventId,\n      eventType,\n      response\n    });\n  }\n\n  /**\n   * Subscribe an event handler for a particular event.\n   *\n   * @param eventType - Event name to subscribe to.\n   * @param eventHandler - The event handler which should receive the events.\n   *\n   */\n  _subscribe<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    eventHandler: ReceiverHandler<T, S>\n  ): void {\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.addEventListener('message', this.boundEventHandler);\n    }\n\n    if (!this.handlersMap[eventType]) {\n      this.handlersMap[eventType] = new Set();\n    }\n\n    this.handlersMap[eventType].add(eventHandler);\n  }\n\n  /**\n   * Unsubscribe an event handler from a particular event.\n   *\n   * @param eventType - Event name to unsubscribe from.\n   * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.\n   *\n   */\n  _unsubscribe<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    eventHandler?: ReceiverHandler<T, S>\n  ): void {\n    if (this.handlersMap[eventType] && eventHandler) {\n      this.handlersMap[eventType].delete(eventHandler);\n    }\n    if (!eventHandler || this.handlersMap[eventType].size === 0) {\n      delete this.handlersMap[eventType];\n    }\n\n    if (Object.keys(this.handlersMap).length === 0) {\n      this.eventTarget.removeEventListener('message', this.boundEventHandler);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function _generateEventId(prefix = '', digits = 10): string {\n  let random = '';\n  for (let i = 0; i < digits; i++) {\n    random += Math.floor(Math.random() * 10);\n  }\n  return prefix + random;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _generateEventId } from '../../core/util/event_id';\nimport {\n  _SenderRequest,\n  _EventType,\n  ReceiverMessageEvent,\n  _MessageError,\n  SenderMessageEvent,\n  _Status,\n  _ReceiverMessageResponse,\n  _ReceiverResponse,\n  _TimeoutDuration\n} from './index';\n\ninterface MessageHandler {\n  messageChannel: MessageChannel;\n  onMessage: EventListenerOrEventListenerObject;\n}\n\n/**\n * Interface for sending messages and waiting for a completion response.\n *\n */\nexport class Sender {\n  private readonly handlers = new Set<MessageHandler>();\n\n  constructor(private readonly target: ServiceWorker) {}\n\n  /**\n   * Unsubscribe the handler and remove it from our tracking Set.\n   *\n   * @param handler - The handler to unsubscribe.\n   */\n  private removeMessageHandler(handler: MessageHandler): void {\n    if (handler.messageChannel) {\n      handler.messageChannel.port1.removeEventListener(\n        'message',\n        handler.onMessage\n      );\n      handler.messageChannel.port1.close();\n    }\n    this.handlers.delete(handler);\n  }\n\n  /**\n   * Send a message to the Receiver located at {@link target}.\n   *\n   * @remarks\n   * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the\n   * receiver has had a chance to fully process the event.\n   *\n   * @param eventType - Type of event to send.\n   * @param data - The payload of the event.\n   * @param timeout - Timeout for waiting on an ACK from the receiver.\n   *\n   * @returns An array of settled promises from all the handlers that were listening on the receiver.\n   */\n  async _send<T extends _ReceiverResponse, S extends _SenderRequest>(\n    eventType: _EventType,\n    data: S,\n    timeout = _TimeoutDuration.ACK\n  ): Promise<_ReceiverMessageResponse<T>> {\n    const messageChannel =\n      typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;\n    if (!messageChannel) {\n      throw new Error(_MessageError.CONNECTION_UNAVAILABLE);\n    }\n    // Node timers and browser timers return fundamentally different types.\n    // We don't actually care what the value is but TS won't accept unknown and\n    // we can't cast properly in both environments.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let completionTimer: any;\n    let handler: MessageHandler;\n    return new Promise<_ReceiverMessageResponse<T>>((resolve, reject) => {\n      const eventId = _generateEventId('', 20);\n      messageChannel.port1.start();\n      const ackTimer = setTimeout(() => {\n        reject(new Error(_MessageError.UNSUPPORTED_EVENT));\n      }, timeout);\n      handler = {\n        messageChannel,\n        onMessage(event: Event): void {\n          const messageEvent = event as MessageEvent<ReceiverMessageEvent<T>>;\n          if (messageEvent.data.eventId !== eventId) {\n            return;\n          }\n          switch (messageEvent.data.status) {\n            case _Status.ACK:\n              // The receiver should ACK first.\n              clearTimeout(ackTimer);\n              completionTimer = setTimeout(() => {\n                reject(new Error(_MessageError.TIMEOUT));\n              }, _TimeoutDuration.COMPLETION);\n              break;\n            case _Status.DONE:\n              // Once the receiver's handlers are finished we will get the results.\n              clearTimeout(completionTimer);\n              resolve(messageEvent.data.response);\n              break;\n            default:\n              clearTimeout(ackTimer);\n              clearTimeout(completionTimer);\n              reject(new Error(_MessageError.INVALID_RESPONSE));\n              break;\n          }\n        }\n      };\n      this.handlers.add(handler);\n      messageChannel.port1.addEventListener('message', handler.onMessage);\n      this.target.postMessage(\n        {\n          eventType,\n          eventId,\n          data\n        } as SenderMessageEvent<S>,\n        [messageChannel.port2]\n      );\n    }).finally(() => {\n      if (handler) {\n        this.removeMessageHandler(handler);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Recaptcha, GreCAPTCHATopLevel } from './recaptcha/recaptcha';\n\n/**\n * A specialized window type that melds the normal window type plus the\n * various bits we need. The three different blocks that are &'d together\n * cant be defined in the same block together.\n */\nexport type AuthWindow = {\n  // Standard window types\n  [T in keyof Window]: Window[T];\n} & {\n  // Any known / named properties we want to add\n  grecaptcha?: Recaptcha | GreCAPTCHATopLevel;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  ___jsl?: Record<string, any>;\n  gapi?: typeof gapi;\n} & {\n  // A final catch-all for callbacks (which will have random names) that\n  // we will stick on the window.\n  [callback: string]: (...args: unknown[]) => void;\n};\n\n/**\n * Lazy accessor for window, since the compat layer won't tree shake this out,\n * we need to make sure not to mess with window unless we have to\n */\nexport function _window(): AuthWindow {\n  return window as unknown as AuthWindow;\n}\n\nexport function _setWindowLocation(url: string): void {\n  _window().location.href = url;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _window } from '../auth_window';\n\nexport function _isWorker(): boolean {\n  return (\n    typeof _window()['WorkerGlobalScope'] !== 'undefined' &&\n    typeof _window()['importScripts'] === 'function'\n  );\n}\n\nexport async function _getActiveServiceWorker(): Promise<ServiceWorker | null> {\n  if (!navigator?.serviceWorker) {\n    return null;\n  }\n  try {\n    const registration = await navigator.serviceWorker.ready;\n    return registration.active;\n  } catch {\n    return null;\n  }\n}\n\nexport function _getServiceWorkerController(): ServiceWorker | null {\n  return navigator?.serviceWorker?.controller || null;\n}\n\nexport function _getWorkerGlobalScope(): ServiceWorker | null {\n  return _isWorker() ? (self as unknown as ServiceWorker) : null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Persistence } from '../../model/public_types';\nimport {\n  PersistedBlob,\n  PersistenceInternal as InternalPersistence,\n  PersistenceType,\n  PersistenceValue,\n  StorageEventListener,\n  STORAGE_AVAILABLE_KEY\n} from '../../core/persistence/';\nimport {\n  _EventType,\n  _PingResponse,\n  KeyChangedResponse,\n  KeyChangedRequest,\n  PingRequest,\n  _TimeoutDuration\n} from '../messagechannel/index';\nimport { Receiver } from '../messagechannel/receiver';\nimport { Sender } from '../messagechannel/sender';\nimport {\n  _isWorker,\n  _getActiveServiceWorker,\n  _getServiceWorkerController,\n  _getWorkerGlobalScope\n} from '../util/worker';\n\nexport const DB_NAME = 'firebaseLocalStorageDb';\nconst DB_VERSION = 1;\nconst DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';\nconst DB_DATA_KEYPATH = 'fbase_key';\n\ninterface DBObject {\n  [DB_DATA_KEYPATH]: string;\n  value: PersistedBlob;\n}\n\n/**\n * Promise wrapper for IDBRequest\n *\n * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6\n *\n */\nclass DBPromise<T> {\n  constructor(private readonly request: IDBRequest) {}\n\n  toPromise(): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      this.request.addEventListener('success', () => {\n        resolve(this.request.result);\n      });\n      this.request.addEventListener('error', () => {\n        reject(this.request.error);\n      });\n    });\n  }\n}\n\nfunction getObjectStore(db: IDBDatabase, isReadWrite: boolean): IDBObjectStore {\n  return db\n    .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')\n    .objectStore(DB_OBJECTSTORE_NAME);\n}\n\nexport async function _clearDatabase(db: IDBDatabase): Promise<void> {\n  const objectStore = getObjectStore(db, true);\n  return new DBPromise<void>(objectStore.clear()).toPromise();\n}\n\nexport function _deleteDatabase(): Promise<void> {\n  const request = indexedDB.deleteDatabase(DB_NAME);\n  return new DBPromise<void>(request).toPromise();\n}\n\nexport function _openDatabase(): Promise<IDBDatabase> {\n  const request = indexedDB.open(DB_NAME, DB_VERSION);\n  return new Promise((resolve, reject) => {\n    request.addEventListener('error', () => {\n      reject(request.error);\n    });\n\n    request.addEventListener('upgradeneeded', () => {\n      const db = request.result;\n\n      try {\n        db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });\n      } catch (e) {\n        reject(e);\n      }\n    });\n\n    request.addEventListener('success', async () => {\n      const db: IDBDatabase = request.result;\n      // Strange bug that occurs in Firefox when multiple tabs are opened at the\n      // same time. The only way to recover seems to be deleting the database\n      // and re-initializing it.\n      // https://github.com/firebase/firebase-js-sdk/issues/634\n\n      if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {\n        // Need to close the database or else you get a `blocked` event\n        db.close();\n        await _deleteDatabase();\n        resolve(await _openDatabase());\n      } else {\n        resolve(db);\n      }\n    });\n  });\n}\n\nexport async function _putObject(\n  db: IDBDatabase,\n  key: string,\n  value: PersistenceValue | string\n): Promise<void> {\n  const request = getObjectStore(db, true).put({\n    [DB_DATA_KEYPATH]: key,\n    value\n  });\n  return new DBPromise<void>(request).toPromise();\n}\n\nasync function getObject(\n  db: IDBDatabase,\n  key: string\n): Promise<PersistedBlob | null> {\n  const request = getObjectStore(db, false).get(key);\n  const data = await new DBPromise<DBObject | undefined>(request).toPromise();\n  return data === undefined ? null : data.value;\n}\n\nexport function _deleteObject(db: IDBDatabase, key: string): Promise<void> {\n  const request = getObjectStore(db, true).delete(key);\n  return new DBPromise<void>(request).toPromise();\n}\n\nexport const _POLLING_INTERVAL_MS = 800;\nexport const _TRANSACTION_RETRY_COUNT = 3;\n\nclass IndexedDBLocalPersistence implements InternalPersistence {\n  static type: 'LOCAL' = 'LOCAL';\n\n  type = PersistenceType.LOCAL;\n  db?: IDBDatabase;\n  readonly _shouldAllowMigration = true;\n\n  private readonly listeners: Record<string, Set<StorageEventListener>> = {};\n  private readonly localCache: Record<string, PersistenceValue | null> = {};\n  // setTimeout return value is platform specific\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private pollTimer: any | null = null;\n  private pendingWrites = 0;\n\n  private receiver: Receiver | null = null;\n  private sender: Sender | null = null;\n  private serviceWorkerReceiverAvailable = false;\n  private activeServiceWorker: ServiceWorker | null = null;\n  // Visible for testing only\n  readonly _workerInitializationPromise: Promise<void>;\n\n  constructor() {\n    // Fire & forget the service worker registration as it may never resolve\n    this._workerInitializationPromise =\n      this.initializeServiceWorkerMessaging().then(\n        () => {},\n        () => {}\n      );\n  }\n\n  async _openDb(): Promise<IDBDatabase> {\n    if (this.db) {\n      return this.db;\n    }\n    this.db = await _openDatabase();\n    return this.db;\n  }\n\n  async _withRetries<T>(op: (db: IDBDatabase) => Promise<T>): Promise<T> {\n    let numAttempts = 0;\n\n    while (true) {\n      try {\n        const db = await this._openDb();\n        return await op(db);\n      } catch (e) {\n        if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {\n          throw e;\n        }\n        if (this.db) {\n          this.db.close();\n          this.db = undefined;\n        }\n        // TODO: consider adding exponential backoff\n      }\n    }\n  }\n\n  /**\n   * IndexedDB events do not propagate from the main window to the worker context.  We rely on a\n   * postMessage interface to send these events to the worker ourselves.\n   */\n  private async initializeServiceWorkerMessaging(): Promise<void> {\n    return _isWorker() ? this.initializeReceiver() : this.initializeSender();\n  }\n\n  /**\n   * As the worker we should listen to events from the main window.\n   */\n  private async initializeReceiver(): Promise<void> {\n    this.receiver = Receiver._getInstance(_getWorkerGlobalScope()!);\n    // Refresh from persistence if we receive a KeyChanged message.\n    this.receiver._subscribe(\n      _EventType.KEY_CHANGED,\n      async (_origin: string, data: KeyChangedRequest) => {\n        const keys = await this._poll();\n        return {\n          keyProcessed: keys.includes(data.key)\n        };\n      }\n    );\n    // Let the sender know that we are listening so they give us more timeout.\n    this.receiver._subscribe(\n      _EventType.PING,\n      async (_origin: string, _data: PingRequest) => {\n        return [_EventType.KEY_CHANGED];\n      }\n    );\n  }\n\n  /**\n   * As the main window, we should let the worker know when keys change (set and remove).\n   *\n   * @remarks\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}\n   * may not resolve.\n   */\n  private async initializeSender(): Promise<void> {\n    // Check to see if there's an active service worker.\n    this.activeServiceWorker = await _getActiveServiceWorker();\n    if (!this.activeServiceWorker) {\n      return;\n    }\n    this.sender = new Sender(this.activeServiceWorker);\n    // Ping the service worker to check what events they can handle.\n    const results = await this.sender._send<_PingResponse, PingRequest>(\n      _EventType.PING,\n      {},\n      _TimeoutDuration.LONG_ACK\n    );\n    if (!results) {\n      return;\n    }\n    if (\n      results[0]?.fulfilled &&\n      results[0]?.value.includes(_EventType.KEY_CHANGED)\n    ) {\n      this.serviceWorkerReceiverAvailable = true;\n    }\n  }\n\n  /**\n   * Let the worker know about a changed key, the exact key doesn't technically matter since the\n   * worker will just trigger a full sync anyway.\n   *\n   * @remarks\n   * For now, we only support one service worker per page.\n   *\n   * @param key - Storage key which changed.\n   */\n  private async notifyServiceWorker(key: string): Promise<void> {\n    if (\n      !this.sender ||\n      !this.activeServiceWorker ||\n      _getServiceWorkerController() !== this.activeServiceWorker\n    ) {\n      return;\n    }\n    try {\n      await this.sender._send<KeyChangedResponse, KeyChangedRequest>(\n        _EventType.KEY_CHANGED,\n        { key },\n        // Use long timeout if receiver has previously responded to a ping from us.\n        this.serviceWorkerReceiverAvailable\n          ? _TimeoutDuration.LONG_ACK\n          : _TimeoutDuration.ACK\n      );\n    } catch {\n      // This is a best effort approach. Ignore errors.\n    }\n  }\n\n  async _isAvailable(): Promise<boolean> {\n    try {\n      if (!indexedDB) {\n        return false;\n      }\n      const db = await _openDatabase();\n      await _putObject(db, STORAGE_AVAILABLE_KEY, '1');\n      await _deleteObject(db, STORAGE_AVAILABLE_KEY);\n      return true;\n    } catch {}\n    return false;\n  }\n\n  private async _withPendingWrite(write: () => Promise<void>): Promise<void> {\n    this.pendingWrites++;\n    try {\n      await write();\n    } finally {\n      this.pendingWrites--;\n    }\n  }\n\n  async _set(key: string, value: PersistenceValue): Promise<void> {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db: IDBDatabase) => _putObject(db, key, value));\n      this.localCache[key] = value;\n      return this.notifyServiceWorker(key);\n    });\n  }\n\n  async _get<T extends PersistenceValue>(key: string): Promise<T | null> {\n    const obj = (await this._withRetries((db: IDBDatabase) =>\n      getObject(db, key)\n    )) as T;\n    this.localCache[key] = obj;\n    return obj;\n  }\n\n  async _remove(key: string): Promise<void> {\n    return this._withPendingWrite(async () => {\n      await this._withRetries((db: IDBDatabase) => _deleteObject(db, key));\n      delete this.localCache[key];\n      return this.notifyServiceWorker(key);\n    });\n  }\n\n  private async _poll(): Promise<string[]> {\n    // TODO: check if we need to fallback if getAll is not supported\n    const result = await this._withRetries((db: IDBDatabase) => {\n      const getAllRequest = getObjectStore(db, false).getAll();\n      return new DBPromise<DBObject[] | null>(getAllRequest).toPromise();\n    });\n\n    if (!result) {\n      return [];\n    }\n\n    // If we have pending writes in progress abort, we'll get picked up on the next poll\n    if (this.pendingWrites !== 0) {\n      return [];\n    }\n\n    const keys = [];\n    const keysInResult = new Set();\n    if (result.length !== 0) {\n      for (const { fbase_key: key, value } of result) {\n        keysInResult.add(key);\n        if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {\n          this.notifyListeners(key, value as PersistenceValue);\n          keys.push(key);\n        }\n      }\n    }\n\n    for (const localKey of Object.keys(this.localCache)) {\n      if (this.localCache[localKey] && !keysInResult.has(localKey)) {\n        // Deleted\n        this.notifyListeners(localKey, null);\n        keys.push(localKey);\n      }\n    }\n    return keys;\n  }\n\n  private notifyListeners(\n    key: string,\n    newValue: PersistenceValue | null\n  ): void {\n    this.localCache[key] = newValue;\n    const listeners = this.listeners[key];\n    if (listeners) {\n      for (const listener of Array.from(listeners)) {\n        listener(newValue);\n      }\n    }\n  }\n\n  private startPolling(): void {\n    this.stopPolling();\n\n    this.pollTimer = setInterval(\n      async () => this._poll(),\n      _POLLING_INTERVAL_MS\n    );\n  }\n\n  private stopPolling(): void {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n\n  _addListener(key: string, listener: StorageEventListener): void {\n    if (Object.keys(this.listeners).length === 0) {\n      this.startPolling();\n    }\n    if (!this.listeners[key]) {\n      this.listeners[key] = new Set();\n      // Populate the cache to avoid spuriously triggering on first poll.\n      void this._get(key); // This can happen in the background async and we can return immediately.\n    }\n    this.listeners[key].add(listener);\n  }\n\n  _removeListener(key: string, listener: StorageEventListener): void {\n    if (this.listeners[key]) {\n      this.listeners[key].delete(listener);\n\n      if (this.listeners[key].size === 0) {\n        delete this.listeners[key];\n      }\n    }\n\n    if (Object.keys(this.listeners).length === 0) {\n      this.stopPolling();\n    }\n  }\n}\n\n/**\n * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`\n * for the underlying storage.\n *\n * @public\n */\nexport const indexedDBLocalPersistence: Persistence = IndexedDBLocalPersistence;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _performApiRequest,\n  Endpoint,\n  HttpMethod,\n  RecaptchaClientType,\n  RecaptchaVersion,\n  _addTidIfNecessary\n} from '../index';\nimport { Auth } from '../../model/public_types';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { MfaEnrollment } from '../account_management/mfa';\nimport { SignInWithIdpResponse } from './idp';\nimport {\n  SignInWithPhoneNumberRequest,\n  SignInWithPhoneNumberResponse\n} from './sms';\n\nexport interface FinalizeMfaResponse {\n  idToken: string;\n  refreshToken: string;\n}\n\n/**\n * @internal\n */\nexport interface IdTokenMfaResponse extends IdTokenResponse {\n  mfaPendingCredential?: string;\n  mfaInfo?: MfaEnrollment[];\n}\n\nexport interface StartPhoneMfaSignInRequest {\n  mfaPendingCredential: string;\n  mfaEnrollmentId: string;\n  phoneSignInInfo: {\n    // reCAPTCHA v2 token\n    recaptchaToken?: string;\n    // reCAPTCHA Enterprise token\n    captchaResponse?: string;\n    clientType?: RecaptchaClientType;\n    recaptchaVersion?: RecaptchaVersion;\n  };\n  tenantId?: string;\n}\n\nexport interface StartPhoneMfaSignInResponse {\n  phoneResponseInfo: {\n    sessionInfo: string;\n  };\n}\n\nexport function startSignInPhoneMfa(\n  auth: Auth,\n  request: StartPhoneMfaSignInRequest\n): Promise<StartPhoneMfaSignInResponse> {\n  return _performApiRequest<\n    StartPhoneMfaSignInRequest,\n    StartPhoneMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.START_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport interface FinalizePhoneMfaSignInRequest {\n  mfaPendingCredential: string;\n  phoneVerificationInfo: SignInWithPhoneNumberRequest;\n  tenantId?: string;\n}\n\n// TOTP MFA Sign in only has a finalize phase. Phone MFA has a start phase to initiate sending an\n// SMS and a finalize phase to complete sign in. With TOTP, the user already has the OTP in the\n// TOTP/Authenticator app.\nexport interface FinalizeTotpMfaSignInRequest {\n  mfaPendingCredential: string;\n  totpVerificationInfo: { verificationCode: string };\n  tenantId?: string;\n  mfaEnrollmentId: string;\n}\n\nexport interface FinalizePhoneMfaSignInResponse extends FinalizeMfaResponse {}\n\nexport interface FinalizeTotpMfaSignInResponse extends FinalizeMfaResponse {}\n\nexport function finalizeSignInPhoneMfa(\n  auth: Auth,\n  request: FinalizePhoneMfaSignInRequest\n): Promise<FinalizePhoneMfaSignInResponse> {\n  return _performApiRequest<\n    FinalizePhoneMfaSignInRequest,\n    FinalizePhoneMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\nexport function finalizeSignInTotpMfa(\n  auth: Auth,\n  request: FinalizeTotpMfaSignInRequest\n): Promise<FinalizeTotpMfaSignInResponse> {\n  return _performApiRequest<\n    FinalizeTotpMfaSignInRequest,\n    FinalizeTotpMfaSignInResponse\n  >(\n    auth,\n    HttpMethod.POST,\n    Endpoint.FINALIZE_MFA_SIGN_IN,\n    _addTidIfNecessary(auth, request)\n  );\n}\n\n/**\n * @internal\n */\nexport type PhoneOrOauthTokenResponse =\n  | SignInWithPhoneNumberResponse\n  | SignInWithIdpResponse\n  | IdTokenResponse;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { querystring } from '@firebase/util';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert, _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as jsHelpers from '../load_js';\nimport { Recaptcha, isV2 } from './recaptcha';\nimport { MockReCaptcha } from './recaptcha_mock';\n\n// ReCaptcha will load using the same callback, so the callback function needs\n// to be kept around\nexport const _JSLOAD_CALLBACK = jsHelpers._generateCallbackName('rcb');\nconst NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);\n\n/**\n * We need to mark this interface as internal explicitly to exclude it in the public typings, because\n * it references AuthInternal which has a circular dependency with UserInternal.\n *\n * @internal\n */\nexport interface ReCaptchaLoader {\n  load(auth: AuthInternal, hl?: string): Promise<Recaptcha>;\n  clearedOneInstance(): void;\n}\n\n/**\n * Loader for the GReCaptcha library. There should only ever be one of this.\n */\nexport class ReCaptchaLoaderImpl implements ReCaptchaLoader {\n  private hostLanguage = '';\n  private counter = 0;\n  /**\n   * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise\n   * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but\n   * `window.grecaptcha.render()` will not. Another load will add it.\n   */\n  private readonly librarySeparatelyLoaded = !!_window().grecaptcha?.render;\n\n  load(auth: AuthInternal, hl = ''): Promise<Recaptcha> {\n    _assert(isHostLanguageValid(hl), auth, AuthErrorCode.ARGUMENT_ERROR);\n\n    if (this.shouldResolveImmediately(hl) && isV2(_window().grecaptcha)) {\n      return Promise.resolve(_window().grecaptcha! as Recaptcha);\n    }\n    return new Promise<Recaptcha>((resolve, reject) => {\n      const networkTimeout = _window().setTimeout(() => {\n        reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n      }, NETWORK_TIMEOUT_DELAY.get());\n\n      _window()[_JSLOAD_CALLBACK] = () => {\n        _window().clearTimeout(networkTimeout);\n        delete _window()[_JSLOAD_CALLBACK];\n\n        const recaptcha = _window().grecaptcha as Recaptcha;\n\n        if (!recaptcha || !isV2(recaptcha)) {\n          reject(_createError(auth, AuthErrorCode.INTERNAL_ERROR));\n          return;\n        }\n\n        // Wrap the recaptcha render function so that we know if the developer has\n        // called it separately\n        const render = recaptcha.render;\n        recaptcha.render = (container, params) => {\n          const widgetId = render(container, params);\n          this.counter++;\n          return widgetId;\n        };\n\n        this.hostLanguage = hl;\n        resolve(recaptcha);\n      };\n\n      const url = `${jsHelpers._recaptchaV2ScriptUrl()}?${querystring({\n        onload: _JSLOAD_CALLBACK,\n        render: 'explicit',\n        hl\n      })}`;\n\n      jsHelpers._loadJS(url).catch(() => {\n        clearTimeout(networkTimeout);\n        reject(_createError(auth, AuthErrorCode.INTERNAL_ERROR));\n      });\n    });\n  }\n\n  clearedOneInstance(): void {\n    this.counter--;\n  }\n\n  private shouldResolveImmediately(hl: string): boolean {\n    // We can resolve immediately if:\n    //   • grecaptcha is already defined AND (\n    //     1. the requested language codes are the same OR\n    //     2. there exists already a ReCaptcha on the page\n    //     3. the library was already loaded by the app\n    // In cases (2) and (3), we _can't_ reload as it would break the recaptchas\n    // that are already in the page\n    return (\n      !!_window().grecaptcha?.render &&\n      (hl === this.hostLanguage ||\n        this.counter > 0 ||\n        this.librarySeparatelyLoaded)\n    );\n  }\n}\n\nfunction isHostLanguageValid(hl: string): boolean {\n  return hl.length <= 6 && /^\\s*[a-zA-Z0-9\\-]*\\s*$/.test(hl);\n}\n\nexport class MockReCaptchaLoaderImpl implements ReCaptchaLoader {\n  async load(auth: AuthInternal): Promise<Recaptcha> {\n    return new MockReCaptcha(auth);\n  }\n\n  clearedOneInstance(): void {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Auth, RecaptchaParameters } from '../../model/public_types';\nimport { getRecaptchaParams } from '../../api/authentication/recaptcha';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport { _isHttpOrHttps } from '../../core/util/location';\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport { _isWorker } from '../util/worker';\nimport { Recaptcha } from './recaptcha';\nimport {\n  MockReCaptchaLoaderImpl,\n  ReCaptchaLoader,\n  ReCaptchaLoaderImpl\n} from './recaptcha_loader';\n\nexport const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';\n\nconst DEFAULT_PARAMS: RecaptchaParameters = {\n  theme: 'light',\n  type: 'image'\n};\n\ntype TokenCallback = (token: string) => void;\n\n/**\n * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.\n *\n * @remarks\n * `RecaptchaVerifier` does not work in a Node.js environment.\n *\n * @public\n */\nexport class RecaptchaVerifier implements ApplicationVerifierInternal {\n  /**\n   * The application verifier type.\n   *\n   * @remarks\n   * For a reCAPTCHA verifier, this is 'recaptcha'.\n   */\n  readonly type = RECAPTCHA_VERIFIER_TYPE;\n  private destroyed = false;\n  private widgetId: number | null = null;\n  private readonly container: HTMLElement;\n  private readonly isInvisible: boolean;\n  private readonly tokenChangeListeners = new Set<TokenCallback>();\n  private renderPromise: Promise<number> | null = null;\n  private readonly auth: AuthInternal;\n\n  /** @internal */\n  readonly _recaptchaLoader: ReCaptchaLoader;\n  private recaptcha: Recaptcha | null = null;\n\n  /**\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\n   *\n   * @param containerOrId - The reCAPTCHA container parameter.\n   *\n   * @remarks\n   * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a\n   * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to\n   * an element ID. The corresponding element must also must be in the DOM at the time of\n   * initialization.\n   *\n   * @param parameters - The optional reCAPTCHA parameters.\n   *\n   * @remarks\n   * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for\n   * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will\n   * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value\n   * 'invisible'.\n   */\n  constructor(\n    authExtern: Auth,\n    containerOrId: HTMLElement | string,\n    private readonly parameters: RecaptchaParameters = {\n      ...DEFAULT_PARAMS\n    }\n  ) {\n    this.auth = _castAuth(authExtern);\n    this.isInvisible = this.parameters.size === 'invisible';\n    _assert(\n      typeof document !== 'undefined',\n      this.auth,\n      AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    const container =\n      typeof containerOrId === 'string'\n        ? document.getElementById(containerOrId)\n        : containerOrId;\n    _assert(container, this.auth, AuthErrorCode.ARGUMENT_ERROR);\n\n    this.container = container;\n    this.parameters.callback = this.makeTokenCallback(this.parameters.callback);\n\n    this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting\n      ? new MockReCaptchaLoaderImpl()\n      : new ReCaptchaLoaderImpl();\n\n    this.validateStartingState();\n    // TODO: Figure out if sdk version is needed\n  }\n\n  /**\n   * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.\n   *\n   * @returns A Promise for the reCAPTCHA token.\n   */\n  async verify(): Promise<string> {\n    this.assertNotDestroyed();\n    const id = await this.render();\n    const recaptcha = this.getAssertedRecaptcha();\n\n    const response = recaptcha.getResponse(id);\n    if (response) {\n      return response;\n    }\n\n    return new Promise<string>(resolve => {\n      const tokenChange = (token: string): void => {\n        if (!token) {\n          return; // Ignore token expirations.\n        }\n        this.tokenChangeListeners.delete(tokenChange);\n        resolve(token);\n      };\n\n      this.tokenChangeListeners.add(tokenChange);\n      if (this.isInvisible) {\n        recaptcha.execute(id);\n      }\n    });\n  }\n\n  /**\n   * Renders the reCAPTCHA widget on the page.\n   *\n   * @returns A Promise that resolves with the reCAPTCHA widget ID.\n   */\n  render(): Promise<number> {\n    try {\n      this.assertNotDestroyed();\n    } catch (e) {\n      // This method returns a promise. Since it's not async (we want to return the\n      // _same_ promise if rendering is still occurring), the API surface should\n      // reject with the error rather than just throw\n      return Promise.reject(e);\n    }\n\n    if (this.renderPromise) {\n      return this.renderPromise;\n    }\n\n    this.renderPromise = this.makeRenderPromise().catch(e => {\n      this.renderPromise = null;\n      throw e;\n    });\n\n    return this.renderPromise;\n  }\n\n  /** @internal */\n  _reset(): void {\n    this.assertNotDestroyed();\n    if (this.widgetId !== null) {\n      this.getAssertedRecaptcha().reset(this.widgetId);\n    }\n  }\n\n  /**\n   * Clears the reCAPTCHA widget from the page and destroys the instance.\n   */\n  clear(): void {\n    this.assertNotDestroyed();\n    this.destroyed = true;\n    this._recaptchaLoader.clearedOneInstance();\n    if (!this.isInvisible) {\n      this.container.childNodes.forEach(node => {\n        this.container.removeChild(node);\n      });\n    }\n  }\n\n  private validateStartingState(): void {\n    _assert(!this.parameters.sitekey, this.auth, AuthErrorCode.ARGUMENT_ERROR);\n    _assert(\n      this.isInvisible || !this.container.hasChildNodes(),\n      this.auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    _assert(\n      typeof document !== 'undefined',\n      this.auth,\n      AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n  }\n\n  private makeTokenCallback(\n    existing: TokenCallback | string | undefined\n  ): TokenCallback {\n    return token => {\n      this.tokenChangeListeners.forEach(listener => listener(token));\n      if (typeof existing === 'function') {\n        existing(token);\n      } else if (typeof existing === 'string') {\n        const globalFunc = _window()[existing];\n        if (typeof globalFunc === 'function') {\n          globalFunc(token);\n        }\n      }\n    };\n  }\n\n  private assertNotDestroyed(): void {\n    _assert(!this.destroyed, this.auth, AuthErrorCode.INTERNAL_ERROR);\n  }\n\n  private async makeRenderPromise(): Promise<number> {\n    await this.init();\n    if (!this.widgetId) {\n      let container = this.container;\n      if (!this.isInvisible) {\n        const guaranteedEmpty = document.createElement('div');\n        container.appendChild(guaranteedEmpty);\n        container = guaranteedEmpty;\n      }\n\n      this.widgetId = this.getAssertedRecaptcha().render(\n        container,\n        this.parameters\n      );\n    }\n\n    return this.widgetId;\n  }\n\n  private async init(): Promise<void> {\n    _assert(\n      _isHttpOrHttps() && !_isWorker(),\n      this.auth,\n      AuthErrorCode.INTERNAL_ERROR\n    );\n\n    await domReady();\n    this.recaptcha = await this._recaptchaLoader.load(\n      this.auth,\n      this.auth.languageCode || undefined\n    );\n\n    const siteKey = await getRecaptchaParams(this.auth);\n    _assert(siteKey, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    this.parameters.sitekey = siteKey;\n  }\n\n  private getAssertedRecaptcha(): Recaptcha {\n    _assert(this.recaptcha, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return this.recaptcha;\n  }\n}\n\nfunction domReady(): Promise<void> {\n  let resolver: (() => void) | null = null;\n  return new Promise<void>(resolve => {\n    if (document.readyState === 'complete') {\n      resolve();\n      return;\n    }\n\n    // Document not ready, wait for load before resolving.\n    // Save resolver, so we can remove listener in case it was externally\n    // cancelled.\n    resolver = () => resolve();\n    window.addEventListener('load', resolver);\n  }).catch(e => {\n    if (resolver) {\n      window.removeEventListener('load', resolver);\n    }\n\n    throw e;\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApplicationVerifier,\n  Auth,\n  ConfirmationResult,\n  PhoneInfoOptions,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport {\n  startEnrollPhoneMfa,\n  StartPhoneMfaEnrollmentRequest,\n  StartPhoneMfaEnrollmentResponse\n} from '../../api/account_management/mfa';\nimport {\n  startSignInPhoneMfa,\n  StartPhoneMfaSignInRequest,\n  StartPhoneMfaSignInResponse\n} from '../../api/authentication/mfa';\nimport {\n  sendPhoneVerificationCode,\n  SendPhoneVerificationCodeRequest,\n  SendPhoneVerificationCodeResponse\n} from '../../api/authentication/sms';\nimport {\n  RecaptchaActionName,\n  RecaptchaClientType,\n  RecaptchaAuthProvider\n} from '../../api';\nimport { ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assertLinkedStatus, _link } from '../../core/user/link_unlink';\nimport {\n  _assert,\n  _serverAppCurrentUserOperationNotSupportedError\n} from '../../core/util/assert';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  linkWithCredential,\n  reauthenticateWithCredential,\n  signInWithCredential\n} from '../../core/strategies/credential';\nimport {\n  MultiFactorSessionImpl,\n  MultiFactorSessionType\n} from '../../mfa/mfa_session';\nimport { UserInternal } from '../../model/user';\nimport { RECAPTCHA_VERIFIER_TYPE } from '../recaptcha/recaptcha_verifier';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { getModularInstance } from '@firebase/util';\nimport { ProviderId } from '../../model/enums';\nimport {\n  FAKE_TOKEN,\n  handleRecaptchaFlow,\n  _initializeRecaptchaConfig\n} from '../recaptcha/recaptcha_enterprise_verifier';\nimport { _isFirebaseServerApp } from '@firebase/app';\n\ninterface OnConfirmationCallback {\n  (credential: PhoneAuthCredential): Promise<UserCredential>;\n}\n\nclass ConfirmationResultImpl implements ConfirmationResult {\n  constructor(\n    readonly verificationId: string,\n    private readonly onConfirmation: OnConfirmationCallback\n  ) {}\n\n  confirm(verificationCode: string): Promise<UserCredential> {\n    const authCredential = PhoneAuthCredential._fromVerification(\n      this.verificationId,\n      verificationCode\n    );\n    return this.onConfirmation(authCredential);\n  }\n}\n\n/**\n * Asynchronously signs in using a phone number.\n *\n * @remarks\n * This method sends a code via SMS to the given\n * phone number, and returns a {@link ConfirmationResult}. After the user\n * provides the code sent to their phone, call {@link ConfirmationResult.confirm}\n * with the code to sign the user in.\n *\n * For abuse prevention, this method requires a {@link ApplicationVerifier}.\n * This SDK includes an implementation based on reCAPTCHA v2, {@link RecaptchaVerifier}.\n * This function can work on other platforms that do not support the\n * {@link RecaptchaVerifier} (like React Native), but you need to use a\n * third-party {@link ApplicationVerifier} implementation.\n *\n * If you've enabled project-level reCAPTCHA Enterprise bot protection in\n * Enforce mode, you can omit the {@link ApplicationVerifier}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n * // Obtain a verificationCode from the user.\n * const credential = await confirmationResult.confirm(verificationCode);\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function signInWithPhoneNumber(\n  auth: Auth,\n  phoneNumber: string,\n  appVerifier?: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  const verificationId = await _verifyPhoneNumber(\n    authInternal,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    signInWithCredential(authInternal, cred)\n  );\n}\n\n/**\n * Links the user account with the given phone number.\n *\n * @remarks\n * This method does not work in a Node.js environment.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function linkWithPhoneNumber(\n  user: User,\n  phoneNumber: string,\n  appVerifier?: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  await _assertLinkedStatus(false, userInternal, ProviderId.PHONE);\n  const verificationId = await _verifyPhoneNumber(\n    userInternal.auth,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    linkWithCredential(userInternal, cred)\n  );\n}\n\n/**\n * Re-authenticates a user using a fresh phone credential.\n *\n * @remarks\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.\n *\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @param user - The user.\n * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).\n * @param appVerifier - The {@link ApplicationVerifier}.\n *\n * @public\n */\nexport async function reauthenticateWithPhoneNumber(\n  user: User,\n  phoneNumber: string,\n  appVerifier?: ApplicationVerifier\n): Promise<ConfirmationResult> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(userInternal.auth)\n    );\n  }\n  const verificationId = await _verifyPhoneNumber(\n    userInternal.auth,\n    phoneNumber,\n    getModularInstance(appVerifier as ApplicationVerifierInternal)\n  );\n  return new ConfirmationResultImpl(verificationId, cred =>\n    reauthenticateWithCredential(userInternal, cred)\n  );\n}\n\ntype PhoneApiCaller<TRequest, TResponse> = (\n  auth: AuthInternal,\n  request: TRequest\n) => Promise<TResponse>;\n\n/**\n * Returns a verification ID to be used in conjunction with the SMS code that is sent.\n *\n */\nexport async function _verifyPhoneNumber(\n  auth: AuthInternal,\n  options: PhoneInfoOptions | string,\n  verifier?: ApplicationVerifierInternal\n): Promise<string> {\n  if (!auth._getRecaptchaConfig()) {\n    try {\n      await _initializeRecaptchaConfig(auth);\n    } catch (error) {\n      // If an error occurs while fetching the config, there is no way to know the enablement state\n      // of Phone provider, so we proceed with recaptcha V2 verification.\n      // The error is likely \"recaptchaKey undefined\", as reCAPTCHA Enterprise is not\n      // enabled for any provider.\n      console.log(\n        'Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.'\n      );\n    }\n  }\n\n  try {\n    let phoneInfoOptions: PhoneInfoOptions;\n\n    if (typeof options === 'string') {\n      phoneInfoOptions = {\n        phoneNumber: options\n      };\n    } else {\n      phoneInfoOptions = options;\n    }\n\n    if ('session' in phoneInfoOptions) {\n      const session = phoneInfoOptions.session as MultiFactorSessionImpl;\n\n      if ('phoneNumber' in phoneInfoOptions) {\n        _assert(\n          session.type === MultiFactorSessionType.ENROLL,\n          auth,\n          AuthErrorCode.INTERNAL_ERROR\n        );\n\n        const startPhoneMfaEnrollmentRequest: StartPhoneMfaEnrollmentRequest = {\n          idToken: session.credential,\n          phoneEnrollmentInfo: {\n            phoneNumber: phoneInfoOptions.phoneNumber,\n            clientType: RecaptchaClientType.WEB\n          }\n        };\n\n        const startEnrollPhoneMfaActionCallback: PhoneApiCaller<\n          StartPhoneMfaEnrollmentRequest,\n          StartPhoneMfaEnrollmentResponse\n        > = async (\n          authInstance: AuthInternal,\n          request: StartPhoneMfaEnrollmentRequest\n        ) => {\n          // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n          if (request.phoneEnrollmentInfo.captchaResponse === FAKE_TOKEN) {\n            _assert(\n              verifier?.type === RECAPTCHA_VERIFIER_TYPE,\n              authInstance,\n              AuthErrorCode.ARGUMENT_ERROR\n            );\n\n            const requestWithRecaptchaV2 = await injectRecaptchaV2Token(\n              authInstance,\n              request,\n              verifier\n            );\n            return startEnrollPhoneMfa(authInstance, requestWithRecaptchaV2);\n          }\n          return startEnrollPhoneMfa(authInstance, request);\n        };\n\n        const startPhoneMfaEnrollmentResponse: Promise<StartPhoneMfaEnrollmentResponse> =\n          handleRecaptchaFlow(\n            auth,\n            startPhoneMfaEnrollmentRequest,\n            RecaptchaActionName.MFA_SMS_ENROLLMENT,\n            startEnrollPhoneMfaActionCallback,\n            RecaptchaAuthProvider.PHONE_PROVIDER\n          );\n\n        const response = await startPhoneMfaEnrollmentResponse.catch(error => {\n          return Promise.reject(error);\n        });\n\n        return response.phoneSessionInfo.sessionInfo;\n      } else {\n        _assert(\n          session.type === MultiFactorSessionType.SIGN_IN,\n          auth,\n          AuthErrorCode.INTERNAL_ERROR\n        );\n        const mfaEnrollmentId =\n          phoneInfoOptions.multiFactorHint?.uid ||\n          phoneInfoOptions.multiFactorUid;\n        _assert(mfaEnrollmentId, auth, AuthErrorCode.MISSING_MFA_INFO);\n\n        const startPhoneMfaSignInRequest: StartPhoneMfaSignInRequest = {\n          mfaPendingCredential: session.credential,\n          mfaEnrollmentId,\n          phoneSignInInfo: {\n            clientType: RecaptchaClientType.WEB\n          }\n        };\n\n        const startSignInPhoneMfaActionCallback: PhoneApiCaller<\n          StartPhoneMfaSignInRequest,\n          StartPhoneMfaSignInResponse\n        > = async (\n          authInstance: AuthInternal,\n          request: StartPhoneMfaSignInRequest\n        ) => {\n          // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n          if (request.phoneSignInInfo.captchaResponse === FAKE_TOKEN) {\n            _assert(\n              verifier?.type === RECAPTCHA_VERIFIER_TYPE,\n              authInstance,\n              AuthErrorCode.ARGUMENT_ERROR\n            );\n\n            const requestWithRecaptchaV2 = await injectRecaptchaV2Token(\n              authInstance,\n              request,\n              verifier\n            );\n            return startSignInPhoneMfa(authInstance, requestWithRecaptchaV2);\n          }\n          return startSignInPhoneMfa(authInstance, request);\n        };\n\n        const startPhoneMfaSignInResponse: Promise<StartPhoneMfaSignInResponse> =\n          handleRecaptchaFlow(\n            auth,\n            startPhoneMfaSignInRequest,\n            RecaptchaActionName.MFA_SMS_SIGNIN,\n            startSignInPhoneMfaActionCallback,\n            RecaptchaAuthProvider.PHONE_PROVIDER\n          );\n\n        const response = await startPhoneMfaSignInResponse.catch(error => {\n          return Promise.reject(error);\n        });\n\n        return response.phoneResponseInfo.sessionInfo;\n      }\n    } else {\n      const sendPhoneVerificationCodeRequest: SendPhoneVerificationCodeRequest =\n        {\n          phoneNumber: phoneInfoOptions.phoneNumber,\n          clientType: RecaptchaClientType.WEB\n        };\n\n      const sendPhoneVerificationCodeActionCallback: PhoneApiCaller<\n        SendPhoneVerificationCodeRequest,\n        SendPhoneVerificationCodeResponse\n      > = async (\n        authInstance: AuthInternal,\n        request: SendPhoneVerificationCodeRequest\n      ) => {\n        // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.\n        if (request.captchaResponse === FAKE_TOKEN) {\n          _assert(\n            verifier?.type === RECAPTCHA_VERIFIER_TYPE,\n            authInstance,\n            AuthErrorCode.ARGUMENT_ERROR\n          );\n\n          const requestWithRecaptchaV2 = await injectRecaptchaV2Token(\n            authInstance,\n            request,\n            verifier\n          );\n          return sendPhoneVerificationCode(\n            authInstance,\n            requestWithRecaptchaV2\n          );\n        }\n        return sendPhoneVerificationCode(authInstance, request);\n      };\n\n      const sendPhoneVerificationCodeResponse: Promise<SendPhoneVerificationCodeResponse> =\n        handleRecaptchaFlow(\n          auth,\n          sendPhoneVerificationCodeRequest,\n          RecaptchaActionName.SEND_VERIFICATION_CODE,\n          sendPhoneVerificationCodeActionCallback,\n          RecaptchaAuthProvider.PHONE_PROVIDER\n        );\n\n      const response = await sendPhoneVerificationCodeResponse.catch(error => {\n        return Promise.reject(error);\n      });\n\n      return response.sessionInfo;\n    }\n  } finally {\n    verifier?._reset();\n  }\n}\n\n/**\n * Updates the user's phone number.\n *\n * @remarks\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * await updatePhoneNumber(user, phoneCredential);\n * ```\n *\n * @param user - The user.\n * @param credential - A credential authenticating the new phone number.\n *\n * @public\n */\nexport async function updatePhoneNumber(\n  user: User,\n  credential: PhoneAuthCredential\n): Promise<void> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(userInternal.auth)\n    );\n  }\n  await _link(userInternal, credential);\n}\n\n// Helper function that fetches and injects a reCAPTCHA v2 token into the request.\nexport async function injectRecaptchaV2Token<T>(\n  auth: AuthInternal,\n  request: T,\n  recaptchaV2Verifier: ApplicationVerifierInternal\n): Promise<T> {\n  _assert(\n    recaptchaV2Verifier.type === RECAPTCHA_VERIFIER_TYPE,\n    auth,\n    AuthErrorCode.ARGUMENT_ERROR\n  );\n\n  const recaptchaV2Token = await recaptchaV2Verifier.verify();\n\n  _assert(\n    typeof recaptchaV2Token === 'string',\n    auth,\n    AuthErrorCode.ARGUMENT_ERROR\n  );\n\n  const newRequest = { ...request };\n\n  if ('phoneEnrollmentInfo' in newRequest) {\n    const phoneNumber = (\n      newRequest as unknown as StartPhoneMfaEnrollmentRequest\n    ).phoneEnrollmentInfo.phoneNumber;\n    const captchaResponse = (\n      newRequest as unknown as StartPhoneMfaEnrollmentRequest\n    ).phoneEnrollmentInfo.captchaResponse;\n    const clientType = (newRequest as unknown as StartPhoneMfaEnrollmentRequest)\n      .phoneEnrollmentInfo.clientType;\n    const recaptchaVersion = (\n      newRequest as unknown as StartPhoneMfaEnrollmentRequest\n    ).phoneEnrollmentInfo.recaptchaVersion;\n\n    Object.assign(newRequest, {\n      'phoneEnrollmentInfo': {\n        phoneNumber,\n        recaptchaToken: recaptchaV2Token,\n        captchaResponse,\n        clientType,\n        recaptchaVersion\n      }\n    });\n\n    return newRequest;\n  } else if ('phoneSignInInfo' in newRequest) {\n    const captchaResponse = (\n      newRequest as unknown as StartPhoneMfaSignInRequest\n    ).phoneSignInInfo.captchaResponse;\n    const clientType = (newRequest as unknown as StartPhoneMfaSignInRequest)\n      .phoneSignInInfo.clientType;\n    const recaptchaVersion = (\n      newRequest as unknown as StartPhoneMfaSignInRequest\n    ).phoneSignInInfo.recaptchaVersion;\n\n    Object.assign(newRequest, {\n      'phoneSignInInfo': {\n        recaptchaToken: recaptchaV2Token,\n        captchaResponse,\n        clientType,\n        recaptchaVersion\n      }\n    });\n\n    return newRequest;\n  } else {\n    Object.assign(newRequest, { 'recaptchaToken': recaptchaV2Token });\n    return newRequest;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  PhoneInfoOptions,\n  ApplicationVerifier,\n  UserCredential\n} from '../../model/public_types';\n\nimport { SignInWithPhoneNumberResponse } from '../../api/authentication/sms';\nimport { ApplicationVerifierInternal as ApplicationVerifierInternal } from '../../model/application_verifier';\nimport { AuthInternal as AuthInternal } from '../../model/auth';\nimport { UserCredentialInternal as UserCredentialInternal } from '../../model/user';\nimport { PhoneAuthCredential } from '../../core/credentials/phone';\nimport { _verifyPhoneNumber } from '../strategies/phone';\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthCredential } from '../../core';\nimport { FirebaseError, getModularInstance } from '@firebase/util';\nimport { TaggedWithTokenResponse } from '../../model/id_token';\nimport { ProviderId, SignInMethod } from '../../model/enums';\n\n/**\n * Provider for generating an {@link PhoneAuthCredential}.\n *\n * @remarks\n * `PhoneAuthProvider` does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // 'recaptcha-container' is the ID of an element in the DOM.\n * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');\n * const provider = new PhoneAuthProvider(auth);\n * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);\n * // Obtain the verificationCode from the user.\n * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n * const userCredential = await signInWithCredential(auth, phoneCredential);\n * ```\n *\n * @public\n */\nexport class PhoneAuthProvider {\n  /** Always set to {@link ProviderId}.PHONE. */\n  static readonly PROVIDER_ID: 'phone' = ProviderId.PHONE;\n  /** Always set to {@link SignInMethod}.PHONE. */\n  static readonly PHONE_SIGN_IN_METHOD: 'phone' = SignInMethod.PHONE;\n\n  /** Always set to {@link ProviderId}.PHONE. */\n  readonly providerId = PhoneAuthProvider.PROVIDER_ID;\n  private readonly auth: AuthInternal;\n\n  /**\n   * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.\n   *\n   */\n  constructor(auth: Auth) {\n    this.auth = _castAuth(auth);\n  }\n\n  /**\n   *\n   * Starts a phone number authentication flow by sending a verification code to the given phone\n   * number.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = await signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in\n   * E.164 format (e.g. +16505550101).\n   * @param applicationVerifier - An {@link ApplicationVerifier}, which prevents\n   * requests from unauthorized clients. This SDK includes an implementation\n   * based on reCAPTCHA v2, {@link RecaptchaVerifier}. If you've enabled\n   * reCAPTCHA Enterprise bot protection in Enforce mode, this parameter is\n   * optional; in all other configurations, the parameter is required.\n   *\n   * @returns A Promise for a verification ID that can be passed to\n   * {@link PhoneAuthProvider.credential} to identify this flow.\n   */\n  verifyPhoneNumber(\n    phoneOptions: PhoneInfoOptions | string,\n    applicationVerifier?: ApplicationVerifier\n  ): Promise<string> {\n    return _verifyPhoneNumber(\n      this.auth,\n      phoneOptions,\n      getModularInstance(applicationVerifier as ApplicationVerifierInternal)\n    );\n  }\n\n  /**\n   * Creates a phone auth credential, given the verification ID from\n   * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's\n   * mobile device.\n   *\n   * @example\n   * ```javascript\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);\n   * const userCredential = signInWithCredential(auth, authCredential);\n   * ```\n   *\n   * @example\n   * An alternative flow is provided using the `signInWithPhoneNumber` method.\n   * ```javascript\n   * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);\n   * // Obtain verificationCode from the user.\n   * const userCredential = await confirmationResult.confirm(verificationCode);\n   * ```\n   *\n   * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.\n   * @param verificationCode - The verification code sent to the user's mobile device.\n   *\n   * @returns The auth provider credential.\n   */\n  static credential(\n    verificationId: string,\n    verificationCode: string\n  ): PhoneAuthCredential {\n    return PhoneAuthCredential._fromVerification(\n      verificationId,\n      verificationCode\n    );\n  }\n\n  /**\n   * Generates an {@link AuthCredential} from a {@link UserCredential}.\n   * @param userCredential - The user credential.\n   */\n  static credentialFromResult(\n    userCredential: UserCredential\n  ): AuthCredential | null {\n    const credential = userCredential as UserCredentialInternal;\n    return PhoneAuthProvider.credentialFromTaggedObject(credential);\n  }\n\n  /**\n   * Returns an {@link AuthCredential} when passed an error.\n   *\n   * @remarks\n   *\n   * This method works for errors like\n   * `auth/account-exists-with-different-credentials`. This is useful for\n   * recovering when attempting to set a user's phone number but the number\n   * in question is already tied to another account. For example, the following\n   * code tries to update the current user's phone number, and if that\n   * fails, links the user with the account associated with that number:\n   *\n   * ```js\n   * const provider = new PhoneAuthProvider(auth);\n   * const verificationId = await provider.verifyPhoneNumber(number, verifier);\n   * try {\n   *   const code = ''; // Prompt the user for the verification code\n   *   await updatePhoneNumber(\n   *       auth.currentUser,\n   *       PhoneAuthProvider.credential(verificationId, code));\n   * } catch (e) {\n   *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {\n   *     const cred = PhoneAuthProvider.credentialFromError(e);\n   *     await linkWithCredential(auth.currentUser, cred);\n   *   }\n   * }\n   *\n   * // At this point, auth.currentUser.phoneNumber === number.\n   * ```\n   *\n   * @param error - The error to generate a credential from.\n   */\n  static credentialFromError(error: FirebaseError): AuthCredential | null {\n    return PhoneAuthProvider.credentialFromTaggedObject(\n      (error.customData || {}) as TaggedWithTokenResponse\n    );\n  }\n\n  private static credentialFromTaggedObject({\n    _tokenResponse: tokenResponse\n  }: TaggedWithTokenResponse): AuthCredential | null {\n    if (!tokenResponse) {\n      return null;\n    }\n    const { phoneNumber, temporaryProof } =\n      tokenResponse as SignInWithPhoneNumberResponse;\n    if (phoneNumber && temporaryProof) {\n      return PhoneAuthCredential._fromTokenResponse(\n        phoneNumber,\n        temporaryProof\n      );\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PopupRedirectResolver } from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport { PopupRedirectResolverInternal } from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from './assert';\nimport { _getInstance } from './instantiator';\n\n/**\n * Chooses a popup/redirect resolver to use. This prefers the override (which\n * is directly passed in), and falls back to the property set on the auth\n * object. If neither are available, this function errors w/ an argument error.\n */\nexport function _withDefaultResolver(\n  auth: AuthInternal,\n  resolverOverride: PopupRedirectResolver | undefined\n): PopupRedirectResolverInternal {\n  if (resolverOverride) {\n    return _getInstance(resolverOverride);\n  }\n\n  _assert(auth._popupRedirectResolver, auth, AuthErrorCode.ARGUMENT_ERROR);\n\n  return auth._popupRedirectResolver;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  signInWithIdp,\n  SignInWithIdpRequest\n} from '../../api/authentication/idp';\nimport { PhoneOrOauthTokenResponse } from '../../api/authentication/mfa';\nimport { AuthInternal } from '../../model/auth';\nimport { IdTokenResponse } from '../../model/id_token';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthCredential } from '../credentials';\nimport { _link as _linkUser } from '../user/link_unlink';\nimport { _reauthenticate } from '../user/reauthenticate';\nimport { _assert } from '../util/assert';\nimport { _signInWithCredential } from './credential';\nimport { AuthErrorCode } from '../errors';\nimport { ProviderId } from '../../model/enums';\n\nexport interface IdpTaskParams {\n  auth: AuthInternal;\n  requestUri: string;\n  sessionId?: string;\n  tenantId?: string;\n  postBody?: string;\n  pendingToken?: string;\n  user?: UserInternal;\n  bypassAuthState?: boolean;\n}\n\nexport type IdpTask = (\n  params: IdpTaskParams\n) => Promise<UserCredentialInternal>;\n\nclass IdpCredential extends AuthCredential {\n  constructor(readonly params: IdpTaskParams) {\n    super(ProviderId.CUSTOM, ProviderId.CUSTOM);\n  }\n\n  _getIdTokenResponse(auth: AuthInternal): Promise<PhoneOrOauthTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n\n  _linkToIdToken(\n    auth: AuthInternal,\n    idToken: string\n  ): Promise<IdTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest(idToken));\n  }\n\n  _getReauthenticationResolver(auth: AuthInternal): Promise<IdTokenResponse> {\n    return signInWithIdp(auth, this._buildIdpRequest());\n  }\n\n  private _buildIdpRequest(idToken?: string): SignInWithIdpRequest {\n    const request: SignInWithIdpRequest = {\n      requestUri: this.params.requestUri,\n      sessionId: this.params.sessionId,\n      postBody: this.params.postBody,\n      tenantId: this.params.tenantId,\n      pendingToken: this.params.pendingToken,\n      returnSecureToken: true,\n      returnIdpCredential: true\n    };\n\n    if (idToken) {\n      request.idToken = idToken;\n    }\n\n    return request;\n  }\n}\n\nexport function _signIn(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  return _signInWithCredential(\n    params.auth,\n    new IdpCredential(params),\n    params.bypassAuthState\n  ) as Promise<UserCredentialInternal>;\n}\n\nexport function _reauth(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  const { auth, user } = params;\n  _assert(user, auth, AuthErrorCode.INTERNAL_ERROR);\n  return _reauthenticate(\n    user,\n    new IdpCredential(params),\n    params.bypassAuthState\n  );\n}\n\nexport async function _link(\n  params: IdpTaskParams\n): Promise<UserCredentialInternal> {\n  const { auth, user } = params;\n  _assert(user, auth, AuthErrorCode.INTERNAL_ERROR);\n  return _linkUser(user, new IdpCredential(params), params.bypassAuthState);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport {\n  AuthEvent,\n  AuthEventConsumer,\n  AuthEventType,\n  EventManager,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserInternal, UserCredentialInternal } from '../../model/user';\nimport { AuthErrorCode } from '../errors';\nimport { debugAssert, _fail } from '../util/assert';\nimport {\n  _link,\n  _reauth,\n  _signIn,\n  IdpTask,\n  IdpTaskParams\n} from '../strategies/idp';\nimport { AuthInternal } from '../../model/auth';\n\ninterface PendingPromise {\n  resolve: (cred: UserCredentialInternal | null) => void;\n  reject: (error: Error) => void;\n}\n\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n */\nexport abstract class AbstractPopupRedirectOperation\n  implements AuthEventConsumer\n{\n  private pendingPromise: PendingPromise | null = null;\n  private eventManager: EventManager | null = null;\n  readonly filter: AuthEventType[];\n\n  abstract eventId: string | null;\n\n  constructor(\n    protected readonly auth: AuthInternal,\n    filter: AuthEventType | AuthEventType[],\n    protected readonly resolver: PopupRedirectResolverInternal,\n    protected user?: UserInternal,\n    protected readonly bypassAuthState = false\n  ) {\n    this.filter = Array.isArray(filter) ? filter : [filter];\n  }\n\n  abstract onExecution(): Promise<void>;\n\n  execute(): Promise<UserCredentialInternal | null> {\n    return new Promise<UserCredentialInternal | null>(\n      async (resolve, reject) => {\n        this.pendingPromise = { resolve, reject };\n\n        try {\n          this.eventManager = await this.resolver._initialize(this.auth);\n          await this.onExecution();\n          this.eventManager.registerConsumer(this);\n        } catch (e) {\n          this.reject(e as Error);\n        }\n      }\n    );\n  }\n\n  async onAuthEvent(event: AuthEvent): Promise<void> {\n    const { urlResponse, sessionId, postBody, tenantId, error, type } = event;\n    if (error) {\n      this.reject(error);\n      return;\n    }\n\n    const params: IdpTaskParams = {\n      auth: this.auth,\n      requestUri: urlResponse!,\n      sessionId: sessionId!,\n      tenantId: tenantId || undefined,\n      postBody: postBody || undefined,\n      user: this.user,\n      bypassAuthState: this.bypassAuthState\n    };\n\n    try {\n      this.resolve(await this.getIdpTask(type)(params));\n    } catch (e) {\n      this.reject(e as Error);\n    }\n  }\n\n  onError(error: FirebaseError): void {\n    this.reject(error);\n  }\n\n  private getIdpTask(type: AuthEventType): IdpTask {\n    switch (type) {\n      case AuthEventType.SIGN_IN_VIA_POPUP:\n      case AuthEventType.SIGN_IN_VIA_REDIRECT:\n        return _signIn;\n      case AuthEventType.LINK_VIA_POPUP:\n      case AuthEventType.LINK_VIA_REDIRECT:\n        return _link;\n      case AuthEventType.REAUTH_VIA_POPUP:\n      case AuthEventType.REAUTH_VIA_REDIRECT:\n        return _reauth;\n      default:\n        _fail(this.auth, AuthErrorCode.INTERNAL_ERROR);\n    }\n  }\n\n  protected resolve(cred: UserCredentialInternal | null): void {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.resolve(cred);\n    this.unregisterAndCleanUp();\n  }\n\n  protected reject(error: Error): void {\n    debugAssert(this.pendingPromise, 'Pending promise was never set');\n    this.pendingPromise.reject(error);\n    this.unregisterAndCleanUp();\n  }\n\n  private unregisterAndCleanUp(): void {\n    if (this.eventManager) {\n      this.eventManager.unregisterConsumer(this);\n    }\n\n    this.pendingPromise = null;\n    this.cleanUp();\n  }\n\n  abstract cleanUp(): void;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  AuthProvider,\n  PopupRedirectResolver,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { AuthErrorCode } from '../../core/errors';\nimport {\n  _assert,\n  debugAssert,\n  _createError,\n  _assertInstanceOf\n} from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { _generateEventId } from '../../core/util/event_id';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport { _withDefaultResolver } from '../../core/util/resolver';\nimport { AuthPopup } from '../util/popup';\nimport { AbstractPopupRedirectOperation } from '../../core/strategies/abstract_popup_redirect_operation';\nimport { FederatedAuthProvider } from '../../core/providers/federated';\nimport { getModularInstance } from '@firebase/util';\nimport { _isFirebaseServerApp } from '@firebase/app';\n\n/*\n * The event timeout is the same on mobile and desktop, no need for Delay. Set this to 8s since\n * blocking functions can take upto 7s to complete sign in, as documented in:\n * https://cloud.google.com/identity-platform/docs/blocking-functions#understanding_blocking_functions\n * https://firebase.google.com/docs/auth/extend-with-blocking-functions#understanding_blocking_functions\n */\nexport const enum _Timeout {\n  AUTH_EVENT = 8000\n}\nexport const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);\n\n/**\n * Authenticates a Firebase client using a popup-based OAuth authentication flow.\n *\n * @remarks\n * If succeeds, returns the signed in user along with the provider's credential. If sign in was\n * unsuccessful, returns an error object containing additional information about the error.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n *\n * // The signed-in user info.\n * const user = result.user;\n * // This gives you a Facebook Access Token.\n * const credential = provider.credentialFromResult(auth, result);\n * const token = credential.accessToken;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function signInWithPopup(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _createError(auth, AuthErrorCode.OPERATION_NOT_SUPPORTED)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  const action = new PopupOperation(\n    authInternal,\n    AuthEventType.SIGN_IN_VIA_POPUP,\n    provider,\n    resolverInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based\n * OAuth flow.\n *\n * @remarks\n * If the reauthentication is successful, the returned result will contain the user and the\n * provider's credential.\n *\n * This method does not work in a Node.js environment or on any {@link User} signed in by\n * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a popup.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithPopup(auth, provider);\n * // Reauthenticate using a popup.\n * await reauthenticateWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function reauthenticateWithPopup(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(\n      _createError(userInternal.auth, AuthErrorCode.OPERATION_NOT_SUPPORTED)\n    );\n  }\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  const action = new PopupOperation(\n    userInternal.auth,\n    AuthEventType.REAUTH_VIA_POPUP,\n    provider,\n    resolverInternal,\n    userInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Links the authenticated provider to the user account using a pop-up based OAuth flow.\n *\n * @remarks\n * If the linking is successful, the returned result will contain the user and the provider's credential.\n *\n * This method does not work in a Node.js environment.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a popup.\n * const provider = new FacebookAuthProvider();\n * await linkWithPopup(result.user, provider);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function linkWithPopup(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n\n  const action = new PopupOperation(\n    userInternal.auth,\n    AuthEventType.LINK_VIA_POPUP,\n    provider,\n    resolverInternal,\n    userInternal\n  );\n  return action.executeNotNull();\n}\n\n/**\n * Popup event manager. Handles the popup's entire lifecycle; listens to auth\n * events\n *\n */\nclass PopupOperation extends AbstractPopupRedirectOperation {\n  // Only one popup is ever shown at once. The lifecycle of the current popup\n  // can be managed / cancelled by the constructor.\n  private static currentPopupAction: PopupOperation | null = null;\n  private authWindow: AuthPopup | null = null;\n  private pollId: number | null = null;\n\n  constructor(\n    auth: AuthInternal,\n    filter: AuthEventType,\n    private readonly provider: AuthProvider,\n    resolver: PopupRedirectResolverInternal,\n    user?: UserInternal\n  ) {\n    super(auth, filter, resolver, user);\n    if (PopupOperation.currentPopupAction) {\n      PopupOperation.currentPopupAction.cancel();\n    }\n\n    PopupOperation.currentPopupAction = this;\n  }\n\n  async executeNotNull(): Promise<UserCredential> {\n    const result = await this.execute();\n    _assert(result, this.auth, AuthErrorCode.INTERNAL_ERROR);\n    return result;\n  }\n\n  async onExecution(): Promise<void> {\n    debugAssert(\n      this.filter.length === 1,\n      'Popup operations only handle one event'\n    );\n    const eventId = _generateEventId();\n    this.authWindow = await this.resolver._openPopup(\n      this.auth,\n      this.provider,\n      this.filter[0], // There's always one, see constructor\n      eventId\n    );\n    this.authWindow.associatedEvent = eventId;\n\n    // Check for web storage support and origin validation _after_ the popup is\n    // loaded. These operations are slow (~1 second or so) Rather than\n    // waiting on them before opening the window, optimistically open the popup\n    // and check for storage support at the same time. If storage support is\n    // not available, this will cause the whole thing to reject properly. It\n    // will also close the popup, but since the promise has already rejected,\n    // the popup closed by user poll will reject into the void.\n    this.resolver._originValidation(this.auth).catch(e => {\n      this.reject(e);\n    });\n\n    this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {\n      if (!isSupported) {\n        this.reject(\n          _createError(this.auth, AuthErrorCode.WEB_STORAGE_UNSUPPORTED)\n        );\n      }\n    });\n\n    // Handle user closure. Notice this does *not* use await\n    this.pollUserCancellation();\n  }\n\n  get eventId(): string | null {\n    return this.authWindow?.associatedEvent || null;\n  }\n\n  cancel(): void {\n    this.reject(_createError(this.auth, AuthErrorCode.EXPIRED_POPUP_REQUEST));\n  }\n\n  cleanUp(): void {\n    if (this.authWindow) {\n      this.authWindow.close();\n    }\n\n    if (this.pollId) {\n      window.clearTimeout(this.pollId);\n    }\n\n    this.authWindow = null;\n    this.pollId = null;\n    PopupOperation.currentPopupAction = null;\n  }\n\n  private pollUserCancellation(): void {\n    const poll = (): void => {\n      if (this.authWindow?.window?.closed) {\n        // Make sure that there is sufficient time for whatever action to\n        // complete. The window could have closed but the sign in network\n        // call could still be in flight. This is specifically true for\n        // Firefox or if the opener is in an iframe, in which case the oauth\n        // helper closes the popup.\n        this.pollId = window.setTimeout(() => {\n          this.pollId = null;\n          this.reject(\n            _createError(this.auth, AuthErrorCode.POPUP_CLOSED_BY_USER)\n          );\n        }, _Timeout.AUTH_EVENT);\n        return;\n      }\n\n      this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());\n    };\n\n    poll();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthInternal } from '../../model/auth';\nimport {\n  AuthEvent,\n  AuthEventType,\n  PopupRedirectResolverInternal\n} from '../../model/popup_redirect';\nimport { UserCredentialInternal } from '../../model/user';\nimport { PersistenceInternal } from '../persistence';\nimport { _persistenceKeyName } from '../persistence/persistence_user_manager';\nimport { _getInstance } from '../util/instantiator';\nimport { AbstractPopupRedirectOperation } from './abstract_popup_redirect_operation';\n\nconst PENDING_REDIRECT_KEY = 'pendingRedirect';\n\n// We only get one redirect outcome for any one auth, so just store it\n// in here.\nconst redirectOutcomeMap: Map<\n  string,\n  () => Promise<UserCredentialInternal | null>\n> = new Map();\n\nexport class RedirectAction extends AbstractPopupRedirectOperation {\n  eventId = null;\n\n  constructor(\n    auth: AuthInternal,\n    resolver: PopupRedirectResolverInternal,\n    bypassAuthState = false\n  ) {\n    super(\n      auth,\n      [\n        AuthEventType.SIGN_IN_VIA_REDIRECT,\n        AuthEventType.LINK_VIA_REDIRECT,\n        AuthEventType.REAUTH_VIA_REDIRECT,\n        AuthEventType.UNKNOWN\n      ],\n      resolver,\n      undefined,\n      bypassAuthState\n    );\n  }\n\n  /**\n   * Override the execute function; if we already have a redirect result, then\n   * just return it.\n   */\n  async execute(): Promise<UserCredentialInternal | null> {\n    let readyOutcome = redirectOutcomeMap.get(this.auth._key());\n    if (!readyOutcome) {\n      try {\n        const hasPendingRedirect = await _getAndClearPendingRedirectStatus(\n          this.resolver,\n          this.auth\n        );\n        const result = hasPendingRedirect ? await super.execute() : null;\n        readyOutcome = () => Promise.resolve(result);\n      } catch (e) {\n        readyOutcome = () => Promise.reject(e);\n      }\n\n      redirectOutcomeMap.set(this.auth._key(), readyOutcome);\n    }\n\n    // If we're not bypassing auth state, the ready outcome should be set to\n    // null.\n    if (!this.bypassAuthState) {\n      redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));\n    }\n\n    return readyOutcome();\n  }\n\n  async onAuthEvent(event: AuthEvent): Promise<void> {\n    if (event.type === AuthEventType.SIGN_IN_VIA_REDIRECT) {\n      return super.onAuthEvent(event);\n    } else if (event.type === AuthEventType.UNKNOWN) {\n      // This is a sentinel value indicating there's no pending redirect\n      this.resolve(null);\n      return;\n    }\n\n    if (event.eventId) {\n      const user = await this.auth._redirectUserForId(event.eventId);\n      if (user) {\n        this.user = user;\n        return super.onAuthEvent(event);\n      } else {\n        this.resolve(null);\n      }\n    }\n  }\n\n  async onExecution(): Promise<void> {}\n\n  cleanUp(): void {}\n}\n\nexport async function _getAndClearPendingRedirectStatus(\n  resolver: PopupRedirectResolverInternal,\n  auth: AuthInternal\n): Promise<boolean> {\n  const key = pendingRedirectKey(auth);\n  const persistence = resolverPersistence(resolver);\n  if (!(await persistence._isAvailable())) {\n    return false;\n  }\n  const hasPendingRedirect = (await persistence._get(key)) === 'true';\n  await persistence._remove(key);\n  return hasPendingRedirect;\n}\n\nexport async function _setPendingRedirectStatus(\n  resolver: PopupRedirectResolverInternal,\n  auth: AuthInternal\n): Promise<void> {\n  return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');\n}\n\nexport function _clearRedirectOutcomes(): void {\n  redirectOutcomeMap.clear();\n}\n\nexport function _overrideRedirectResult(\n  auth: AuthInternal,\n  result: () => Promise<UserCredentialInternal | null>\n): void {\n  redirectOutcomeMap.set(auth._key(), result);\n}\n\nfunction resolverPersistence(\n  resolver: PopupRedirectResolverInternal\n): PersistenceInternal {\n  return _getInstance(resolver._redirectPersistence);\n}\n\nfunction pendingRedirectKey(auth: AuthInternal): string {\n  return _persistenceKeyName(\n    PENDING_REDIRECT_KEY,\n    auth.config.apiKey,\n    auth.name\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Auth,\n  AuthProvider,\n  PopupRedirectResolver,\n  User,\n  UserCredential\n} from '../../model/public_types';\n\nimport { _castAuth } from '../../core/auth/auth_impl';\nimport { _assertLinkedStatus } from '../../core/user/link_unlink';\nimport {\n  _assertInstanceOf,\n  _serverAppCurrentUserOperationNotSupportedError\n} from '../../core/util/assert';\nimport { _generateEventId } from '../../core/util/event_id';\nimport { AuthEventType } from '../../model/popup_redirect';\nimport { UserInternal } from '../../model/user';\nimport { _withDefaultResolver } from '../../core/util/resolver';\nimport {\n  RedirectAction,\n  _setPendingRedirectStatus\n} from '../../core/strategies/redirect';\nimport { FederatedAuthProvider } from '../../core/providers/federated';\nimport { getModularInstance } from '@firebase/util';\nimport { _isFirebaseServerApp } from '@firebase/app';\n\n/**\n * Authenticates a Firebase client using a full-page redirect flow.\n *\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link signInWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function signInWithRedirect(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _signInWithRedirect(auth, provider, resolver) as Promise<never>;\n}\n\nexport async function _signInWithRedirect(\n  auth: Auth,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  _assertInstanceOf(auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await authInternal._initializationPromise;\n  const resolverInternal = _withDefaultResolver(authInternal, resolver);\n  await _setPendingRedirectStatus(resolverInternal, authInternal);\n\n  return resolverInternal._openRedirect(\n    authInternal,\n    provider,\n    AuthEventType.SIGN_IN_VIA_REDIRECT\n  );\n}\n\n/**\n * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link reauthenticateWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * const result = await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * // Reauthenticate using a redirect.\n * await reauthenticateWithRedirect(result.user, provider);\n * // This will again trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function reauthenticateWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _reauthenticateWithRedirect(\n    user,\n    provider,\n    resolver\n  ) as Promise<never>;\n}\nexport async function _reauthenticateWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  if (_isFirebaseServerApp(userInternal.auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(userInternal.auth)\n    );\n  }\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(\n    userInternal.auth,\n    provider,\n    AuthEventType.REAUTH_VIA_REDIRECT,\n    eventId\n  );\n}\n\n/**\n * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.\n * @remarks\n * To handle the results and errors for this operation, refer to {@link getRedirectResult}.\n * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices\n * | best practices} when using {@link linkWithRedirect}.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances\n * created with a {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using some other provider.\n * const result = await signInWithEmailAndPassword(auth, email, password);\n * // Link using a redirect.\n * const provider = new FacebookAuthProvider();\n * await linkWithRedirect(result.user, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * ```\n *\n * @param user - The user.\n * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.\n * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport function linkWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<never> {\n  return _linkWithRedirect(user, provider, resolver) as Promise<never>;\n}\nexport async function _linkWithRedirect(\n  user: User,\n  provider: AuthProvider,\n  resolver?: PopupRedirectResolver\n): Promise<void | never> {\n  const userInternal = getModularInstance(user) as UserInternal;\n  _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);\n  // Wait for auth initialization to complete, this will process pending redirects and clear the\n  // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new\n  // redirect and creating a PENDING_REDIRECT_KEY entry.\n  await userInternal.auth._initializationPromise;\n  // Allow the resolver to error before persisting the redirect user\n  const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);\n  await _assertLinkedStatus(false, userInternal, provider.providerId);\n  await _setPendingRedirectStatus(resolverInternal, userInternal.auth);\n\n  const eventId = await prepareUserForRedirect(userInternal);\n  return resolverInternal._openRedirect(\n    userInternal.auth,\n    provider,\n    AuthEventType.LINK_VIA_REDIRECT,\n    eventId\n  );\n}\n\n/**\n * Returns a {@link UserCredential} from the redirect-based sign-in flow.\n *\n * @remarks\n * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an\n * error. If no redirect operation was called, returns `null`.\n *\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\n * {@link @firebase/app#FirebaseServerApp}.\n *\n * @example\n * ```javascript\n * // Sign in using a redirect.\n * const provider = new FacebookAuthProvider();\n * // You can add additional scopes to the provider:\n * provider.addScope('user_birthday');\n * // Start a sign in process for an unauthenticated user.\n * await signInWithRedirect(auth, provider);\n * // This will trigger a full page redirect away from your app\n *\n * // After returning from the redirect when your app initializes you can obtain the result\n * const result = await getRedirectResult(auth);\n * if (result) {\n *   // This is the signed-in user\n *   const user = result.user;\n *   // This gives you a Facebook Access Token.\n *   const credential = provider.credentialFromResult(auth, result);\n *   const token = credential.accessToken;\n * }\n * // As this API can be used for sign-in, linking and reauthentication,\n * // check the operationType to determine what triggered this redirect\n * // operation.\n * const operationType = result.operationType;\n * ```\n *\n * @param auth - The {@link Auth} instance.\n * @param resolver - An instance of {@link PopupRedirectResolver}, optional\n * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.\n *\n * @public\n */\nexport async function getRedirectResult(\n  auth: Auth,\n  resolver?: PopupRedirectResolver\n): Promise<UserCredential | null> {\n  await _castAuth(auth)._initializationPromise;\n  return _getRedirectResult(auth, resolver, false);\n}\n\nexport async function _getRedirectResult(\n  auth: Auth,\n  resolverExtern?: PopupRedirectResolver,\n  bypassAuthState = false\n): Promise<UserCredential | null> {\n  if (_isFirebaseServerApp(auth.app)) {\n    return Promise.reject(\n      _serverAppCurrentUserOperationNotSupportedError(auth)\n    );\n  }\n  const authInternal = _castAuth(auth);\n  const resolver = _withDefaultResolver(authInternal, resolverExtern);\n  const action = new RedirectAction(authInternal, resolver, bypassAuthState);\n  const result = await action.execute();\n\n  if (result && !bypassAuthState) {\n    delete result.user._redirectEventId;\n    await authInternal._persistUserIfCurrent(result.user as UserInternal);\n    await authInternal._setRedirectUser(null, resolverExtern);\n  }\n\n  return result;\n}\n\nasync function prepareUserForRedirect(user: UserInternal): Promise<string> {\n  const eventId = _generateEventId(`${user.uid}:::`);\n  user._redirectEventId = eventId;\n  await user.auth._setRedirectUser(user);\n  await user.auth._persistUserIfCurrent(user);\n  return eventId;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthEvent,\n  AuthEventConsumer,\n  AuthEventType,\n  EventManager\n} from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { AuthInternal } from '../../model/auth';\nimport { _createError } from '../util/assert';\n\n// The amount of time to store the UIDs of seen events; this is\n// set to 10 min by default\nconst EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;\n\nexport class AuthEventManager implements EventManager {\n  private readonly cachedEventUids: Set<string> = new Set();\n  private readonly consumers: Set<AuthEventConsumer> = new Set();\n  protected queuedRedirectEvent: AuthEvent | null = null;\n  protected hasHandledPotentialRedirect = false;\n  private lastProcessedEventTime = Date.now();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  registerConsumer(authEventConsumer: AuthEventConsumer): void {\n    this.consumers.add(authEventConsumer);\n\n    if (\n      this.queuedRedirectEvent &&\n      this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)\n    ) {\n      this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);\n      this.saveEventToCache(this.queuedRedirectEvent);\n      this.queuedRedirectEvent = null;\n    }\n  }\n\n  unregisterConsumer(authEventConsumer: AuthEventConsumer): void {\n    this.consumers.delete(authEventConsumer);\n  }\n\n  onEvent(event: AuthEvent): boolean {\n    // Check if the event has already been handled\n    if (this.hasEventBeenHandled(event)) {\n      return false;\n    }\n\n    let handled = false;\n    this.consumers.forEach(consumer => {\n      if (this.isEventForConsumer(event, consumer)) {\n        handled = true;\n        this.sendToConsumer(event, consumer);\n        this.saveEventToCache(event);\n      }\n    });\n\n    if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {\n      // If we've already seen a redirect before, or this is a popup event,\n      // bail now\n      return handled;\n    }\n\n    this.hasHandledPotentialRedirect = true;\n\n    // If the redirect wasn't handled, hang on to it\n    if (!handled) {\n      this.queuedRedirectEvent = event;\n      handled = true;\n    }\n\n    return handled;\n  }\n\n  private sendToConsumer(event: AuthEvent, consumer: AuthEventConsumer): void {\n    if (event.error && !isNullRedirectEvent(event)) {\n      const code =\n        (event.error.code?.split('auth/')[1] as AuthErrorCode) ||\n        AuthErrorCode.INTERNAL_ERROR;\n      consumer.onError(_createError(this.auth, code));\n    } else {\n      consumer.onAuthEvent(event);\n    }\n  }\n\n  private isEventForConsumer(\n    event: AuthEvent,\n    consumer: AuthEventConsumer\n  ): boolean {\n    const eventIdMatches =\n      consumer.eventId === null ||\n      (!!event.eventId && event.eventId === consumer.eventId);\n    return consumer.filter.includes(event.type) && eventIdMatches;\n  }\n\n  private hasEventBeenHandled(event: AuthEvent): boolean {\n    if (\n      Date.now() - this.lastProcessedEventTime >=\n      EVENT_DUPLICATION_CACHE_DURATION_MS\n    ) {\n      this.cachedEventUids.clear();\n    }\n\n    return this.cachedEventUids.has(eventUid(event));\n  }\n\n  private saveEventToCache(event: AuthEvent): void {\n    this.cachedEventUids.add(eventUid(event));\n    this.lastProcessedEventTime = Date.now();\n  }\n}\n\nfunction eventUid(e: AuthEvent): string {\n  return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');\n}\n\nfunction isNullRedirectEvent({ type, error }: AuthEvent): boolean {\n  return (\n    type === AuthEventType.UNKNOWN &&\n    error?.code === `auth/${AuthErrorCode.NO_AUTH_EVENT}`\n  );\n}\n\nfunction isRedirectEvent(event: AuthEvent): boolean {\n  switch (event.type) {\n    case AuthEventType.SIGN_IN_VIA_REDIRECT:\n    case AuthEventType.LINK_VIA_REDIRECT:\n    case AuthEventType.REAUTH_VIA_REDIRECT:\n      return true;\n    case AuthEventType.UNKNOWN:\n      return isNullRedirectEvent(event);\n    default:\n      return false;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _performApiRequest, Endpoint, HttpMethod } from '../index';\nimport { Auth } from '../../model/public_types';\n\nexport interface GetProjectConfigRequest {\n  androidPackageName?: string;\n  iosBundleId?: string;\n}\n\nexport interface GetProjectConfigResponse {\n  authorizedDomains: string[];\n}\n\nexport async function _getProjectConfig(\n  auth: Auth,\n  request: GetProjectConfigRequest = {}\n): Promise<GetProjectConfigResponse> {\n  return _performApiRequest<GetProjectConfigRequest, GetProjectConfigResponse>(\n    auth,\n    HttpMethod.GET,\n    Endpoint.GET_PROJECT_CONFIG,\n    request\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProjectConfig } from '../../api/project_config/get_project_config';\nimport { AuthInternal } from '../../model/auth';\nimport { AuthErrorCode } from '../errors';\nimport { _fail } from './assert';\nimport { _getCurrentUrl } from './location';\n\nconst IP_ADDRESS_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\nconst HTTP_REGEX = /^https?/;\n\nexport async function _validateOrigin(auth: AuthInternal): Promise<void> {\n  // Skip origin validation if we are in an emulated environment\n  if (auth.config.emulator) {\n    return;\n  }\n\n  const { authorizedDomains } = await _getProjectConfig(auth);\n\n  for (const domain of authorizedDomains) {\n    try {\n      if (matchDomain(domain)) {\n        return;\n      }\n    } catch {\n      // Do nothing if there's a URL error; just continue searching\n    }\n  }\n\n  // In the old SDK, this error also provides helpful messages.\n  _fail(auth, AuthErrorCode.INVALID_ORIGIN);\n}\n\nfunction matchDomain(expected: string): boolean {\n  const currentUrl = _getCurrentUrl();\n  const { protocol, hostname } = new URL(currentUrl);\n  if (expected.startsWith('chrome-extension://')) {\n    const ceUrl = new URL(expected);\n\n    if (ceUrl.hostname === '' && hostname === '') {\n      // For some reason we're not parsing chrome URLs properly\n      return (\n        protocol === 'chrome-extension:' &&\n        expected.replace('chrome-extension://', '') ===\n          currentUrl.replace('chrome-extension://', '')\n      );\n    }\n\n    return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;\n  }\n\n  if (!HTTP_REGEX.test(protocol)) {\n    return false;\n  }\n\n  if (IP_ADDRESS_REGEX.test(expected)) {\n    // The domain has to be exactly equal to the pattern, as an IP domain will\n    // only contain the IP, no extra character.\n    return hostname === expected;\n  }\n\n  // Dots in pattern should be escaped.\n  const escapedDomainPattern = expected.replace(/\\./g, '\\\\.');\n  // Non ip address domains.\n  // domain.com = *.domain.com OR domain.com\n  const re = new RegExp(\n    '^(.+\\\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$',\n    'i'\n  );\n  return re.test(hostname);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as js from '../load_js';\n\nconst NETWORK_TIMEOUT = new Delay(30000, 60000);\n\n/**\n * Reset unloaded GApi modules. If gapi.load fails due to a network error,\n * it will stop working after a retrial. This is a hack to fix this issue.\n */\nfunction resetUnloadedGapiModules(): void {\n  // Clear last failed gapi.load state to force next gapi.load to first\n  // load the failed gapi.iframes module.\n  // Get gapix.beacon context.\n  const beacon = _window().___jsl;\n  // Get current hint.\n  if (beacon?.H) {\n    // Get gapi hint.\n    for (const hint of Object.keys(beacon.H)) {\n      // Requested modules.\n      beacon.H[hint].r = beacon.H[hint].r || [];\n      // Loaded modules.\n      beacon.H[hint].L = beacon.H[hint].L || [];\n      // Set requested modules to a copy of the loaded modules.\n      beacon.H[hint].r = [...beacon.H[hint].L];\n      // Clear pending callbacks.\n      if (beacon.CP) {\n        for (let i = 0; i < beacon.CP.length; i++) {\n          // Remove all failed pending callbacks.\n          beacon.CP[i] = null;\n        }\n      }\n    }\n  }\n}\n\nfunction loadGapi(auth: AuthInternal): Promise<gapi.iframes.Context> {\n  return new Promise<gapi.iframes.Context>((resolve, reject) => {\n    // Function to run when gapi.load is ready.\n    function loadGapiIframe(): void {\n      // The developer may have tried to previously run gapi.load and failed.\n      // Run this to fix that.\n      resetUnloadedGapiModules();\n      gapi.load('gapi.iframes', {\n        callback: () => {\n          resolve(gapi.iframes.getContext());\n        },\n        ontimeout: () => {\n          // The above reset may be sufficient, but having this reset after\n          // failure ensures that if the developer calls gapi.load after the\n          // connection is re-established and before another attempt to embed\n          // the iframe, it would work and would not be broken because of our\n          // failed attempt.\n          // Timeout when gapi.iframes.Iframe not loaded.\n          resetUnloadedGapiModules();\n          reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n        },\n        timeout: NETWORK_TIMEOUT.get()\n      });\n    }\n\n    if (_window().gapi?.iframes?.Iframe) {\n      // If gapi.iframes.Iframe available, resolve.\n      resolve(gapi.iframes.getContext());\n    } else if (!!_window().gapi?.load) {\n      // Gapi loader ready, load gapi.iframes.\n      loadGapiIframe();\n    } else {\n      // Create a new iframe callback when this is called so as not to overwrite\n      // any previous defined callback. This happens if this method is called\n      // multiple times in parallel and could result in the later callback\n      // overwriting the previous one. This would end up with a iframe\n      // timeout.\n      const cbName = js._generateCallbackName('iframefcb');\n      // GApi loader not available, dynamically load platform.js.\n      _window()[cbName] = () => {\n        // GApi loader should be ready.\n        if (!!gapi.load) {\n          loadGapiIframe();\n        } else {\n          // Gapi loader failed, throw error.\n          reject(_createError(auth, AuthErrorCode.NETWORK_REQUEST_FAILED));\n        }\n      };\n      // Load GApi loader.\n      return js\n        ._loadJS(`${js._gapiScriptUrl()}?onload=${cbName}`)\n        .catch(e => reject(e));\n    }\n  }).catch(error => {\n    // Reset cached promise to allow for retrial.\n    cachedGApiLoader = null;\n    throw error;\n  });\n}\n\nlet cachedGApiLoader: Promise<gapi.iframes.Context> | null = null;\nexport function _loadGapi(auth: AuthInternal): Promise<gapi.iframes.Context> {\n  cachedGApiLoader = cachedGApiLoader || loadGapi(auth);\n  return cachedGApiLoader;\n}\n\nexport function _resetLoader(): void {\n  cachedGApiLoader = null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { querystring } from '@firebase/util';\nimport { DefaultConfig } from '../../../internal';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert, _createError } from '../../core/util/assert';\nimport { Delay } from '../../core/util/delay';\nimport { _emulatorUrl } from '../../core/util/emulator';\nimport { AuthInternal } from '../../model/auth';\nimport { _window } from '../auth_window';\nimport * as gapiLoader from './gapi';\n\nconst PING_TIMEOUT = new Delay(5000, 15000);\nconst IFRAME_PATH = '__/auth/iframe';\nconst EMULATED_IFRAME_PATH = 'emulator/auth/iframe';\n\nconst IFRAME_ATTRIBUTES = {\n  style: {\n    position: 'absolute',\n    top: '-100px',\n    width: '1px',\n    height: '1px'\n  },\n  'aria-hidden': 'true',\n  tabindex: '-1'\n};\n\n// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to\n// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.\nconst EID_FROM_APIHOST = new Map([\n  [DefaultConfig.API_HOST, 'p'], // production\n  ['staging-identitytoolkit.sandbox.googleapis.com', 's'], // staging\n  ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test\n]);\n\nfunction getIframeUrl(auth: AuthInternal): string {\n  const config = auth.config;\n  _assert(config.authDomain, auth, AuthErrorCode.MISSING_AUTH_DOMAIN);\n  const url = config.emulator\n    ? _emulatorUrl(config, EMULATED_IFRAME_PATH)\n    : `https://${auth.config.authDomain}/${IFRAME_PATH}`;\n\n  const params: Record<string, string> = {\n    apiKey: config.apiKey,\n    appName: auth.name,\n    v: SDK_VERSION\n  };\n  const eid = EID_FROM_APIHOST.get(auth.config.apiHost);\n  if (eid) {\n    params.eid = eid;\n  }\n  const frameworks = auth._getFrameworks();\n  if (frameworks.length) {\n    params.fw = frameworks.join(',');\n  }\n  return `${url}?${querystring(params).slice(1)}`;\n}\n\nexport async function _openIframe(\n  auth: AuthInternal\n): Promise<gapi.iframes.Iframe> {\n  const context = await gapiLoader._loadGapi(auth);\n  const gapi = _window().gapi;\n  _assert(gapi, auth, AuthErrorCode.INTERNAL_ERROR);\n  return context.open(\n    {\n      where: document.body,\n      url: getIframeUrl(auth),\n      messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,\n      attributes: IFRAME_ATTRIBUTES,\n      dontclear: true\n    },\n    (iframe: gapi.iframes.Iframe) =>\n      new Promise(async (resolve, reject) => {\n        await iframe.restyle({\n          // Prevent iframe from closing on mouse out.\n          setHideOnLeave: false\n        });\n\n        const networkError = _createError(\n          auth,\n          AuthErrorCode.NETWORK_REQUEST_FAILED\n        );\n        // Confirm iframe is correctly loaded.\n        // To fallback on failure, set a timeout.\n        const networkErrorTimer = _window().setTimeout(() => {\n          reject(networkError);\n        }, PING_TIMEOUT.get());\n        // Clear timer and resolve pending iframe ready promise.\n        function clearTimerAndResolve(): void {\n          _window().clearTimeout(networkErrorTimer);\n          resolve(iframe);\n        }\n        // This returns an IThenable. However the reject part does not call\n        // when the iframe is not loaded.\n        iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {\n          reject(networkError);\n        });\n      })\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getUA } from '@firebase/util';\n\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\nimport {\n  _isChromeIOS,\n  _isFirefox,\n  _isIOSStandalone\n} from '../../core/util/browser';\nimport { AuthInternal } from '../../model/auth';\n\nconst BASE_POPUP_OPTIONS = {\n  location: 'yes',\n  resizable: 'yes',\n  statusbar: 'yes',\n  toolbar: 'no'\n};\n\nconst DEFAULT_WIDTH = 500;\nconst DEFAULT_HEIGHT = 600;\nconst TARGET_BLANK = '_blank';\n\nconst FIREFOX_EMPTY_URL = 'http://localhost';\n\nexport class AuthPopup {\n  associatedEvent: string | null = null;\n\n  constructor(readonly window: Window | null) {}\n\n  close(): void {\n    if (this.window) {\n      try {\n        this.window.close();\n      } catch (e) {}\n    }\n  }\n}\n\nexport function _open(\n  auth: AuthInternal,\n  url?: string,\n  name?: string,\n  width = DEFAULT_WIDTH,\n  height = DEFAULT_HEIGHT\n): AuthPopup {\n  const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();\n  const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();\n  let target = '';\n\n  const options: { [key: string]: string } = {\n    ...BASE_POPUP_OPTIONS,\n    width: width.toString(),\n    height: height.toString(),\n    top,\n    left\n  };\n\n  // Chrome iOS 7 and 8 is returning an undefined popup win when target is\n  // specified, even though the popup is not necessarily blocked.\n  const ua = getUA().toLowerCase();\n\n  if (name) {\n    target = _isChromeIOS(ua) ? TARGET_BLANK : name;\n  }\n\n  if (_isFirefox(ua)) {\n    // Firefox complains when invalid URLs are popped out. Hacky way to bypass.\n    url = url || FIREFOX_EMPTY_URL;\n    // Firefox disables by default scrolling on popup windows, which can create\n    // issues when the user has many Google accounts, for instance.\n    options.scrollbars = 'yes';\n  }\n\n  const optionsString = Object.entries(options).reduce(\n    (accum, [key, value]) => `${accum}${key}=${value},`,\n    ''\n  );\n\n  if (_isIOSStandalone(ua) && target !== '_self') {\n    openAsNewWindowIOS(url || '', target);\n    return new AuthPopup(null);\n  }\n\n  // about:blank getting sanitized causing browsers like IE/Edge to display\n  // brief error message before redirecting to handler.\n  const newWin = window.open(url || '', target, optionsString);\n  _assert(newWin, auth, AuthErrorCode.POPUP_BLOCKED);\n\n  // Flaky on IE edge, encapsulate with a try and catch.\n  try {\n    newWin.focus();\n  } catch (e) {}\n\n  return new AuthPopup(newWin);\n}\n\nfunction openAsNewWindowIOS(url: string, target: string): void {\n  const el = document.createElement('a');\n  el.href = url;\n  el.target = target;\n  const click = document.createEvent('MouseEvent');\n  click.initMouseEvent(\n    'click',\n    true,\n    true,\n    window,\n    1,\n    0,\n    0,\n    0,\n    0,\n    false,\n    false,\n    false,\n    false,\n    1,\n    null\n  );\n  el.dispatchEvent(click);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SDK_VERSION } from '@firebase/app';\nimport { AuthProvider } from '../../model/public_types';\nimport { ApiKey, AppName, AuthInternal } from '../../model/auth';\nimport { AuthEventType } from '../../model/popup_redirect';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from './assert';\nimport { isEmpty, querystring } from '@firebase/util';\nimport { _emulatorUrl } from './emulator';\nimport { FederatedAuthProvider } from '../providers/federated';\nimport { BaseOAuthProvider } from '../providers/oauth';\n\n/**\n * URL for Authentication widget which will initiate the OAuth handshake\n *\n * @internal\n */\nconst WIDGET_PATH = '__/auth/handler';\n\n/**\n * URL for emulated environment\n *\n * @internal\n */\nconst EMULATOR_WIDGET_PATH = 'emulator/auth/handler';\n\n/**\n * Fragment name for the App Check token that gets passed to the widget\n *\n * @internal\n */\nconst FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ntype WidgetParams = {\n  apiKey: ApiKey;\n  appName: AppName;\n  authType: AuthEventType;\n  redirectUrl?: string;\n  v: string;\n  providerId?: string;\n  scopes?: string;\n  customParameters?: string;\n  eventId?: string;\n  tid?: string;\n} & { [key: string]: string | undefined };\n\nexport async function _getRedirectUrl(\n  auth: AuthInternal,\n  provider: AuthProvider,\n  authType: AuthEventType,\n  redirectUrl?: string,\n  eventId?: string,\n  additionalParams?: Record<string, string>\n): Promise<string> {\n  _assert(auth.config.authDomain, auth, AuthErrorCode.MISSING_AUTH_DOMAIN);\n  _assert(auth.config.apiKey, auth, AuthErrorCode.INVALID_API_KEY);\n\n  const params: WidgetParams = {\n    apiKey: auth.config.apiKey,\n    appName: auth.name,\n    authType,\n    redirectUrl,\n    v: SDK_VERSION,\n    eventId\n  };\n\n  if (provider instanceof FederatedAuthProvider) {\n    provider.setDefaultLanguage(auth.languageCode);\n    params.providerId = provider.providerId || '';\n    if (!isEmpty(provider.getCustomParameters())) {\n      params.customParameters = JSON.stringify(provider.getCustomParameters());\n    }\n\n    // TODO set additionalParams from the provider as well?\n    for (const [key, value] of Object.entries(additionalParams || {})) {\n      params[key] = value;\n    }\n  }\n\n  if (provider instanceof BaseOAuthProvider) {\n    const scopes = provider.getScopes().filter(scope => scope !== '');\n    if (scopes.length > 0) {\n      params.scopes = scopes.join(',');\n    }\n  }\n\n  if (auth.tenantId) {\n    params.tid = auth.tenantId;\n  }\n\n  // TODO: maybe set eid as endpointId\n  // TODO: maybe set fw as Frameworks.join(\",\")\n\n  const paramsDict = params as Record<string, string | number>;\n  for (const key of Object.keys(paramsDict)) {\n    if (paramsDict[key] === undefined) {\n      delete paramsDict[key];\n    }\n  }\n\n  // Sets the App Check token to pass to the widget\n  const appCheckToken = await auth._getAppCheckToken();\n  const appCheckTokenFragment = appCheckToken\n    ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}`\n    : '';\n\n  // Start at index 1 to skip the leading '&' in the query string\n  return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(\n    1\n  )}${appCheckTokenFragment}`;\n}\n\nfunction getHandlerBase({ config }: AuthInternal): string {\n  if (!config.emulator) {\n    return `https://${config.authDomain}/${WIDGET_PATH}`;\n  }\n\n  return _emulatorUrl(config, EMULATOR_WIDGET_PATH);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthProvider, PopupRedirectResolver } from '../model/public_types';\n\nimport { AuthEventManager } from '../core/auth/auth_event_manager';\nimport { AuthErrorCode } from '../core/errors';\nimport { _assert, debugAssert, _fail } from '../core/util/assert';\nimport { _generateEventId } from '../core/util/event_id';\nimport { _getCurrentUrl } from '../core/util/location';\nimport { _validateOrigin } from '../core/util/validate_origin';\nimport { AuthInternal } from '../model/auth';\nimport {\n  AuthEventType,\n  EventManager,\n  GapiAuthEvent,\n  GapiOutcome,\n  PopupRedirectResolverInternal\n} from '../model/popup_redirect';\nimport { _setWindowLocation } from './auth_window';\nimport { _openIframe } from './iframe/iframe';\nimport { browserSessionPersistence } from './persistence/session_storage';\nimport { _open, AuthPopup } from './util/popup';\nimport { _getRedirectResult } from './strategies/redirect';\nimport { _getRedirectUrl } from '../core/util/handler';\nimport { _isIOS, _isMobileBrowser, _isSafari } from '../core/util/browser';\nimport { _overrideRedirectResult } from '../core/strategies/redirect';\n\n/**\n * The special web storage event\n *\n */\nconst WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';\n\ninterface WebStorageSupportMessage extends gapi.iframes.Message {\n  [index: number]: Record<string, boolean>;\n}\n\ninterface ManagerOrPromise {\n  manager?: EventManager;\n  promise?: Promise<EventManager>;\n}\n\nclass BrowserPopupRedirectResolver implements PopupRedirectResolverInternal {\n  private readonly eventManagers: Record<string, ManagerOrPromise> = {};\n  private readonly iframes: Record<string, gapi.iframes.Iframe> = {};\n  private readonly originValidationPromises: Record<string, Promise<void>> = {};\n\n  readonly _redirectPersistence = browserSessionPersistence;\n\n  // Wrapping in async even though we don't await anywhere in order\n  // to make sure errors are raised as promise rejections\n  async _openPopup(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<AuthPopup> {\n    debugAssert(\n      this.eventManagers[auth._key()]?.manager,\n      '_initialize() not called before _openPopup()'\n    );\n\n    const url = await _getRedirectUrl(\n      auth,\n      provider,\n      authType,\n      _getCurrentUrl(),\n      eventId\n    );\n    return _open(auth, url, _generateEventId());\n  }\n\n  async _openRedirect(\n    auth: AuthInternal,\n    provider: AuthProvider,\n    authType: AuthEventType,\n    eventId?: string\n  ): Promise<never> {\n    await this._originValidation(auth);\n    const url = await _getRedirectUrl(\n      auth,\n      provider,\n      authType,\n      _getCurrentUrl(),\n      eventId\n    );\n    _setWindowLocation(url);\n    return new Promise(() => {});\n  }\n\n  _initialize(auth: AuthInternal): Promise<EventManager> {\n    const key = auth._key();\n    if (this.eventManagers[key]) {\n      const { manager, promise } = this.eventManagers[key];\n      if (manager) {\n        return Promise.resolve(manager);\n      } else {\n        debugAssert(promise, 'If manager is not set, promise should be');\n        return promise;\n      }\n    }\n\n    const promise = this.initAndGetManager(auth);\n    this.eventManagers[key] = { promise };\n\n    // If the promise is rejected, the key should be removed so that the\n    // operation can be retried later.\n    promise.catch(() => {\n      delete this.eventManagers[key];\n    });\n\n    return promise;\n  }\n\n  private async initAndGetManager(auth: AuthInternal): Promise<EventManager> {\n    const iframe = await _openIframe(auth);\n    const manager = new AuthEventManager(auth);\n    iframe.register<GapiAuthEvent>(\n      'authEvent',\n      (iframeEvent: GapiAuthEvent | null) => {\n        _assert(iframeEvent?.authEvent, auth, AuthErrorCode.INVALID_AUTH_EVENT);\n        // TODO: Consider splitting redirect and popup events earlier on\n\n        const handled = manager.onEvent(iframeEvent.authEvent);\n        return { status: handled ? GapiOutcome.ACK : GapiOutcome.ERROR };\n      },\n      gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER\n    );\n\n    this.eventManagers[auth._key()] = { manager };\n    this.iframes[auth._key()] = iframe;\n    return manager;\n  }\n\n  _isIframeWebStorageSupported(\n    auth: AuthInternal,\n    cb: (supported: boolean) => unknown\n  ): void {\n    const iframe = this.iframes[auth._key()];\n    iframe.send<gapi.iframes.Message, WebStorageSupportMessage>(\n      WEB_STORAGE_SUPPORT_KEY,\n      { type: WEB_STORAGE_SUPPORT_KEY },\n      result => {\n        const isSupported = result?.[0]?.[WEB_STORAGE_SUPPORT_KEY];\n        if (isSupported !== undefined) {\n          cb(!!isSupported);\n        }\n\n        _fail(auth, AuthErrorCode.INTERNAL_ERROR);\n      },\n      gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER\n    );\n  }\n\n  _originValidation(auth: AuthInternal): Promise<void> {\n    const key = auth._key();\n    if (!this.originValidationPromises[key]) {\n      this.originValidationPromises[key] = _validateOrigin(auth);\n    }\n\n    return this.originValidationPromises[key];\n  }\n\n  get _shouldInitProactively(): boolean {\n    // Mobile browsers and Safari need to optimistically initialize\n    return _isMobileBrowser() || _isSafari() || _isIOS();\n  }\n\n  _completeRedirectFn = _getRedirectResult;\n\n  _overrideRedirectResult = _overrideRedirectResult;\n}\n\n/**\n * An implementation of {@link PopupRedirectResolver} suitable for browser\n * based applications.\n *\n * @remarks\n * This method does not work in a Node.js environment.\n *\n * @public\n */\nexport const browserPopupRedirectResolver: PopupRedirectResolver =\n  BrowserPopupRedirectResolver;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FactorId, MultiFactorAssertion } from '../model/public_types';\nimport { debugFail } from '../core/util/assert';\nimport { MultiFactorSessionImpl, MultiFactorSessionType } from './mfa_session';\nimport { FinalizeMfaResponse } from '../api/authentication/mfa';\nimport { AuthInternal } from '../model/auth';\n\nexport abstract class MultiFactorAssertionImpl implements MultiFactorAssertion {\n  protected constructor(readonly factorId: FactorId) {}\n\n  _process(\n    auth: AuthInternal,\n    session: MultiFactorSessionImpl,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    switch (session.type) {\n      case MultiFactorSessionType.ENROLL:\n        return this._finalizeEnroll(auth, session.credential, displayName);\n      case MultiFactorSessionType.SIGN_IN:\n        return this._finalizeSignIn(auth, session.credential);\n      default:\n        return debugFail('unexpected MultiFactorSessionType');\n    }\n  }\n\n  abstract _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse>;\n  abstract _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  FactorId,\n  PhoneMultiFactorAssertion\n} from '../../../model/public_types';\n\nimport { MultiFactorAssertionImpl } from '../../../mfa/mfa_assertion';\nimport { AuthInternal } from '../../../model/auth';\nimport { finalizeEnrollPhoneMfa } from '../../../api/account_management/mfa';\nimport { PhoneAuthCredential } from '../../../core/credentials/phone';\nimport {\n  finalizeSignInPhoneMfa,\n  FinalizeMfaResponse\n} from '../../../api/authentication/mfa';\n\n/**\n * {@inheritdoc PhoneMultiFactorAssertion}\n *\n * @public\n */\nexport class PhoneMultiFactorAssertionImpl\n  extends MultiFactorAssertionImpl\n  implements PhoneMultiFactorAssertion\n{\n  private constructor(private readonly credential: PhoneAuthCredential) {\n    super(FactorId.PHONE);\n  }\n\n  /** @internal */\n  static _fromCredential(\n    credential: PhoneAuthCredential\n  ): PhoneMultiFactorAssertionImpl {\n    return new PhoneMultiFactorAssertionImpl(credential);\n  }\n\n  /** @internal */\n  _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    return finalizeEnrollPhoneMfa(auth, {\n      idToken,\n      displayName,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n\n  /** @internal */\n  _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse> {\n    return finalizeSignInPhoneMfa(auth, {\n      mfaPendingCredential,\n      phoneVerificationInfo: this.credential._makeVerificationRequest()\n    });\n  }\n}\n\n/**\n * Provider for generating a {@link PhoneMultiFactorAssertion}.\n *\n * @public\n */\nexport class PhoneMultiFactorGenerator {\n  private constructor() {}\n\n  /**\n   * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.\n   *\n   * @remarks\n   * This method does not work in a Node.js environment.\n   *\n   * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.\n   * @returns A {@link PhoneMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}\n   */\n  static assertion(credential: PhoneAuthCredential): PhoneMultiFactorAssertion {\n    return PhoneMultiFactorAssertionImpl._fromCredential(credential);\n  }\n\n  /**\n   * The identifier of the phone second factor: `phone`.\n   */\n  static FACTOR_ID = 'phone';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  TotpMultiFactorAssertion,\n  MultiFactorSession,\n  FactorId\n} from '../../model/public_types';\nimport { AuthInternal } from '../../model/auth';\nimport {\n  finalizeEnrollTotpMfa,\n  startEnrollTotpMfa,\n  StartTotpMfaEnrollmentResponse,\n  TotpVerificationInfo\n} from '../../api/account_management/mfa';\nimport {\n  FinalizeMfaResponse,\n  finalizeSignInTotpMfa\n} from '../../api/authentication/mfa';\nimport { MultiFactorAssertionImpl } from '../../mfa/mfa_assertion';\nimport { MultiFactorSessionImpl } from '../mfa_session';\nimport { AuthErrorCode } from '../../core/errors';\nimport { _assert } from '../../core/util/assert';\n\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * @public\n */\nexport class TotpMultiFactorGenerator {\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\n   * the TOTP (time-based one-time password) second factor.\n   * This assertion is used to complete enrollment in TOTP second factor.\n   *\n   * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorUser.enroll}.\n   */\n  static assertionForEnrollment(\n    secret: TotpSecret,\n    oneTimePassword: string\n  ): TotpMultiFactorAssertion {\n    return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n  }\n\n  /**\n   * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\n   * This assertion is used to complete signIn with TOTP as the second factor.\n   *\n   * @param enrollmentId identifies the enrolled TOTP second factor.\n   * @param oneTimePassword One-time password from TOTP App.\n   * @returns A {@link TotpMultiFactorAssertion} which can be used with\n   * {@link MultiFactorResolver.resolveSignIn}.\n   */\n  static assertionForSignIn(\n    enrollmentId: string,\n    oneTimePassword: string\n  ): TotpMultiFactorAssertion {\n    return TotpMultiFactorAssertionImpl._fromEnrollmentId(\n      enrollmentId,\n      oneTimePassword\n    );\n  }\n\n  /**\n   * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\n   * Creates a TOTP secret as part of enrolling a TOTP second factor.\n   * Used for generating a QR code URL or inputting into a TOTP app.\n   * This method uses the auth instance corresponding to the user in the multiFactorSession.\n   *\n   * @param session The {@link MultiFactorSession} that the user is part of.\n   * @returns A promise to {@link TotpSecret}.\n   */\n  static async generateSecret(\n    session: MultiFactorSession\n  ): Promise<TotpSecret> {\n    const mfaSession = session as MultiFactorSessionImpl;\n    _assert(\n      typeof mfaSession.user?.auth !== 'undefined',\n      AuthErrorCode.INTERNAL_ERROR\n    );\n    const response = await startEnrollTotpMfa(mfaSession.user.auth, {\n      idToken: mfaSession.credential,\n      totpEnrollmentInfo: {}\n    });\n    return TotpSecret._fromStartTotpMfaEnrollmentResponse(\n      response,\n      mfaSession.user.auth\n    );\n  }\n\n  /**\n   * The identifier of the TOTP second factor: `totp`.\n   */\n  static FACTOR_ID: 'totp' = FactorId.TOTP;\n}\n\nexport class TotpMultiFactorAssertionImpl\n  extends MultiFactorAssertionImpl\n  implements TotpMultiFactorAssertion\n{\n  constructor(\n    readonly otp: string,\n    readonly enrollmentId?: string,\n    readonly secret?: TotpSecret\n  ) {\n    super(FactorId.TOTP);\n  }\n\n  /** @internal */\n  static _fromSecret(\n    secret: TotpSecret,\n    otp: string\n  ): TotpMultiFactorAssertionImpl {\n    return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n  }\n\n  /** @internal */\n  static _fromEnrollmentId(\n    enrollmentId: string,\n    otp: string\n  ): TotpMultiFactorAssertionImpl {\n    return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n  }\n\n  /** @internal */\n  async _finalizeEnroll(\n    auth: AuthInternal,\n    idToken: string,\n    displayName?: string | null\n  ): Promise<FinalizeMfaResponse> {\n    _assert(\n      typeof this.secret !== 'undefined',\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    return finalizeEnrollTotpMfa(auth, {\n      idToken,\n      displayName,\n      totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n    });\n  }\n\n  /** @internal */\n  async _finalizeSignIn(\n    auth: AuthInternal,\n    mfaPendingCredential: string\n  ): Promise<FinalizeMfaResponse> {\n    _assert(\n      this.enrollmentId !== undefined && this.otp !== undefined,\n      auth,\n      AuthErrorCode.ARGUMENT_ERROR\n    );\n    const totpVerificationInfo = { verificationCode: this.otp };\n    return finalizeSignInTotpMfa(auth, {\n      mfaPendingCredential,\n      mfaEnrollmentId: this.enrollmentId,\n      totpVerificationInfo\n    });\n  }\n}\n\n/**\n * Provider for generating a {@link TotpMultiFactorAssertion}.\n *\n * Stores the shared secret key and other parameters to generate time-based OTPs.\n * Implements methods to retrieve the shared secret key and generate a QR code URL.\n * @public\n */\nexport class TotpSecret {\n  /**\n   * Shared secret key/seed used for enrolling in TOTP MFA and generating OTPs.\n   */\n  readonly secretKey: string;\n  /**\n   * Hashing algorithm used.\n   */\n  readonly hashingAlgorithm: string;\n  /**\n   * Length of the one-time passwords to be generated.\n   */\n  readonly codeLength: number;\n  /**\n   * The interval (in seconds) when the OTP codes should change.\n   */\n  readonly codeIntervalSeconds: number;\n  /**\n   * The timestamp (UTC string) by which TOTP enrollment should be completed.\n   */\n  // This can be used by callers to show a countdown of when to enter OTP code by.\n  readonly enrollmentCompletionDeadline: string;\n\n  // The public members are declared outside the constructor so the docs can be generated.\n  private constructor(\n    secretKey: string,\n    hashingAlgorithm: string,\n    codeLength: number,\n    codeIntervalSeconds: number,\n    enrollmentCompletionDeadline: string,\n    private readonly sessionInfo: string,\n    private readonly auth: AuthInternal\n  ) {\n    this.secretKey = secretKey;\n    this.hashingAlgorithm = hashingAlgorithm;\n    this.codeLength = codeLength;\n    this.codeIntervalSeconds = codeIntervalSeconds;\n    this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n  }\n\n  /** @internal */\n  static _fromStartTotpMfaEnrollmentResponse(\n    response: StartTotpMfaEnrollmentResponse,\n    auth: AuthInternal\n  ): TotpSecret {\n    return new TotpSecret(\n      response.totpSessionInfo.sharedSecretKey,\n      response.totpSessionInfo.hashingAlgorithm,\n      response.totpSessionInfo.verificationCodeLength,\n      response.totpSessionInfo.periodSec,\n      new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(),\n      response.totpSessionInfo.sessionInfo,\n      auth\n    );\n  }\n\n  /** @internal */\n  _makeTotpVerificationInfo(otp: string): TotpVerificationInfo {\n    return { sessionInfo: this.sessionInfo, verificationCode: otp };\n  }\n\n  /**\n   * Returns a QR code URL as described in\n   * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\n   * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\n   * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\n   *\n   * @param accountName the name of the account/app along with a user identifier.\n   * @param issuer issuer of the TOTP (likely the app name).\n   * @returns A QR code URL string.\n   */\n  generateQrCodeUrl(accountName?: string, issuer?: string): string {\n    let useDefaults = false;\n    if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n      useDefaults = true;\n    }\n    if (useDefaults) {\n      if (_isEmptyString(accountName)) {\n        accountName = this.auth.currentUser?.email || 'unknownuser';\n      }\n      if (_isEmptyString(issuer)) {\n        issuer = this.auth.name;\n      }\n    }\n    return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;\n  }\n}\n\n/** @internal */\nfunction _isEmptyString(input?: string): boolean {\n  return typeof input === 'undefined' || input?.length === 0;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Unsubscribe } from '@firebase/util';\nimport { FirebaseAuthInternal } from '@firebase/auth-interop-types';\n\nimport { AuthInternal } from '../../model/auth';\nimport { UserInternal } from '../../model/user';\nimport { _assert } from '../util/assert';\nimport { AuthErrorCode } from '../errors';\n\ninterface TokenListener {\n  (tok: string | null): unknown;\n}\n\nexport class AuthInterop implements FirebaseAuthInternal {\n  private readonly internalListeners: Map<TokenListener, Unsubscribe> =\n    new Map();\n\n  constructor(private readonly auth: AuthInternal) {}\n\n  getUid(): string | null {\n    this.assertAuthConfigured();\n    return this.auth.currentUser?.uid || null;\n  }\n\n  async getToken(\n    forceRefresh?: boolean\n  ): Promise<{ accessToken: string } | null> {\n    this.assertAuthConfigured();\n    await this.auth._initializationPromise;\n    if (!this.auth.currentUser) {\n      return null;\n    }\n\n    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);\n    return { accessToken };\n  }\n\n  addAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    if (this.internalListeners.has(listener)) {\n      return;\n    }\n\n    const unsubscribe = this.auth.onIdTokenChanged(user => {\n      listener(\n        (user as UserInternal | null)?.stsTokenManager.accessToken || null\n      );\n    });\n    this.internalListeners.set(listener, unsubscribe);\n    this.updateProactiveRefresh();\n  }\n\n  removeAuthTokenListener(listener: TokenListener): void {\n    this.assertAuthConfigured();\n    const unsubscribe = this.internalListeners.get(listener);\n    if (!unsubscribe) {\n      return;\n    }\n\n    this.internalListeners.delete(listener);\n    unsubscribe();\n    this.updateProactiveRefresh();\n  }\n\n  private assertAuthConfigured(): void {\n    _assert(\n      this.auth._initializationPromise,\n      AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH\n    );\n  }\n\n  private updateProactiveRefresh(): void {\n    if (this.internalListeners.size > 0) {\n      this.auth._startProactiveRefresh();\n    } else {\n      this.auth._stopProactiveRefresh();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\n\nimport {\n  initializeAuth,\n  beforeAuthStateChanged,\n  onIdTokenChanged,\n  connectAuthEmulator\n} from '..';\nimport { registerAuth } from '../core/auth/register';\nimport { ClientPlatform } from '../core/util/version';\nimport { browserLocalPersistence } from './persistence/local_storage';\nimport { browserSessionPersistence } from './persistence/session_storage';\nimport { indexedDBLocalPersistence } from './persistence/indexed_db';\nimport { browserPopupRedirectResolver } from './popup_redirect';\nimport { Auth, User } from '../model/public_types';\nimport { getDefaultEmulatorHost, getExperimentalSetting } from '@firebase/util';\nimport { _setExternalJSProvider } from './load_js';\nimport { _createError } from '../core/util/assert';\nimport { AuthErrorCode } from '../core/errors';\n\nconst DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;\nconst authIdTokenMaxAge =\n  getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;\n\nlet lastPostedIdToken: string | undefined | null = null;\n\nconst mintCookieFactory = (url: string) => async (user: User | null) => {\n  const idTokenResult = user && (await user.getIdTokenResult());\n  const idTokenAge =\n    idTokenResult &&\n    (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1_000;\n  if (idTokenAge && idTokenAge > authIdTokenMaxAge) {\n    return;\n  }\n  // Specifically trip null => undefined when logged out, to delete any existing cookie\n  const idToken = idTokenResult?.token;\n  if (lastPostedIdToken === idToken) {\n    return;\n  }\n  lastPostedIdToken = idToken;\n  await fetch(url, {\n    method: idToken ? 'POST' : 'DELETE',\n    headers: idToken\n      ? {\n          'Authorization': `Bearer ${idToken}`\n        }\n      : {}\n  });\n};\n\n/**\n * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.\n * If no instance exists, initializes an Auth instance with platform-specific default dependencies.\n *\n * @param app - The Firebase App.\n *\n * @public\n */\nexport function getAuth(app: FirebaseApp = getApp()): Auth {\n  const provider = _getProvider(app, 'auth');\n\n  if (provider.isInitialized()) {\n    return provider.getImmediate();\n  }\n\n  const auth = initializeAuth(app, {\n    popupRedirectResolver: browserPopupRedirectResolver,\n    persistence: [\n      indexedDBLocalPersistence,\n      browserLocalPersistence,\n      browserSessionPersistence\n    ]\n  });\n\n  const authTokenSyncPath = getExperimentalSetting('authTokenSyncURL');\n  // Only do the Cookie exchange in a secure context\n  if (\n    authTokenSyncPath &&\n    typeof isSecureContext === 'boolean' &&\n    isSecureContext\n  ) {\n    // Don't allow urls (XSS possibility), only paths on the same domain\n    const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);\n    if (location.origin === authTokenSyncUrl.origin) {\n      const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());\n      beforeAuthStateChanged(auth, mintCookie, () =>\n        mintCookie(auth.currentUser)\n      );\n      onIdTokenChanged(auth, user => mintCookie(user));\n    }\n  }\n\n  const authEmulatorHost = getDefaultEmulatorHost('auth');\n  if (authEmulatorHost) {\n    connectAuthEmulator(auth, `http://${authEmulatorHost}`);\n  }\n\n  return auth;\n}\n\nfunction getScriptParentElement(): HTMLDocument | HTMLHeadElement {\n  return document.getElementsByTagName('head')?.[0] ?? document;\n}\n\n_setExternalJSProvider({\n  loadJS(url: string): Promise<Event> {\n    // TODO: consider adding timeout support & cancellation\n    return new Promise((resolve, reject) => {\n      const el = document.createElement('script');\n      el.setAttribute('src', url);\n      el.onload = resolve;\n      el.onerror = e => {\n        const error = _createError(AuthErrorCode.INTERNAL_ERROR);\n        error.customData = e as unknown as Record<string, unknown>;\n        reject(error);\n      };\n      el.type = 'text/javascript';\n      el.charset = 'UTF-8';\n      getScriptParentElement().appendChild(el);\n    });\n  },\n\n  gapiScript: 'https://apis.google.com/js/api.js',\n  recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',\n  recaptchaEnterpriseScript:\n    'https://www.google.com/recaptcha/enterprise.js?render='\n});\n\nregisterAuth(ClientPlatform.BROWSER);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\n\nimport { name, version } from '../../../package.json';\nimport { AuthErrorCode } from '../errors';\nimport { _assert } from '../util/assert';\nimport { _getClientVersion, ClientPlatform } from '../util/version';\nimport { _castAuth, AuthImpl, DefaultConfig } from './auth_impl';\nimport { AuthInterop } from './firebase_internal';\nimport { ConfigInternal } from '../../model/auth';\nimport { Dependencies } from '../../model/public_types';\nimport { _initializeAuthInstance } from './initialize';\n\nexport const enum _ComponentName {\n  AUTH = 'auth',\n  AUTH_INTERNAL = 'auth-internal'\n}\n\nfunction getVersionForPlatform(\n  clientPlatform: ClientPlatform\n): string | undefined {\n  switch (clientPlatform) {\n    case ClientPlatform.NODE:\n      return 'node';\n    case ClientPlatform.REACT_NATIVE:\n      return 'rn';\n    case ClientPlatform.WORKER:\n      return 'webworker';\n    case ClientPlatform.CORDOVA:\n      return 'cordova';\n    case ClientPlatform.WEB_EXTENSION:\n      return 'web-extension';\n    default:\n      return undefined;\n  }\n}\n\n/** @internal */\nexport function registerAuth(clientPlatform: ClientPlatform): void {\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH,\n      (container, { options: deps }: { options?: Dependencies }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const heartbeatServiceProvider =\n          container.getProvider<'heartbeat'>('heartbeat');\n        const appCheckServiceProvider =\n          container.getProvider<'app-check-internal'>('app-check-internal');\n        const { apiKey, authDomain } = app.options;\n\n        _assert(\n          apiKey && !apiKey.includes(':'),\n          AuthErrorCode.INVALID_API_KEY,\n          { appName: app.name }\n        );\n\n        const config: ConfigInternal = {\n          apiKey,\n          authDomain,\n          clientPlatform,\n          apiHost: DefaultConfig.API_HOST,\n          tokenApiHost: DefaultConfig.TOKEN_API_HOST,\n          apiScheme: DefaultConfig.API_SCHEME,\n          sdkClientVersion: _getClientVersion(clientPlatform)\n        };\n\n        const authInstance = new AuthImpl(\n          app,\n          heartbeatServiceProvider,\n          appCheckServiceProvider,\n          config\n        );\n        _initializeAuthInstance(authInstance, deps);\n\n        return authInstance;\n      },\n      ComponentType.PUBLIC\n    )\n      /**\n       * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\n       * For why we do this, See go/firebase-next-auth-init\n       */\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Because all firebase products that depend on auth depend on auth-internal directly,\n       * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\n       */\n      .setInstanceCreatedCallback(\n        (container, _instanceIdentifier, _instance) => {\n          const authInternalProvider = container.getProvider(\n            _ComponentName.AUTH_INTERNAL\n          );\n          authInternalProvider.initialize();\n        }\n      )\n  );\n\n  _registerComponent(\n    new Component(\n      _ComponentName.AUTH_INTERNAL,\n      container => {\n        const auth = _castAuth(\n          container.getProvider(_ComponentName.AUTH).getImmediate()!\n        );\n        return (auth => new AuthInterop(auth))(auth);\n      },\n      ComponentType.PRIVATE\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version, getVersionForPlatform(clientPlatform));\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n"],"names":["_get","Reflect","get","bind","e","t","r","p","o","hasOwnProperty","call","getPrototypeOf","n","Object","getOwnPropertyDescriptor","arguments","length","value","apply","__rest","s","prototype","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","create","SuppressedError","FactorId","PHONE","TOTP","ProviderId","FACEBOOK","GITHUB","GOOGLE","PASSWORD","TWITTER","SignInMethod","EMAIL_LINK","EMAIL_PASSWORD","OperationType","LINK","REAUTHENTICATE","SIGN_IN","ActionCodeOperation","EMAIL_SIGNIN","PASSWORD_RESET","RECOVER_EMAIL","REVERT_SECOND_FACTOR_ADDITION","VERIFY_AND_CHANGE_EMAIL","VERIFY_EMAIL","_prodErrorMap","_defineProperty","debugErrorMap","_ref","prodErrorMap","_DEFAULT_AUTH_ERROR_FACTORY","ErrorFactory","AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY","ADMIN_ONLY_OPERATION","ARGUMENT_ERROR","APP_NOT_AUTHORIZED","APP_NOT_INSTALLED","CAPTCHA_CHECK_FAILED","CODE_EXPIRED","CORDOVA_NOT_READY","CORS_UNSUPPORTED","CREDENTIAL_ALREADY_IN_USE","CREDENTIAL_MISMATCH","CREDENTIAL_TOO_OLD_LOGIN_AGAIN","DEPENDENT_SDK_INIT_BEFORE_AUTH","DYNAMIC_LINK_NOT_ACTIVATED","EMAIL_CHANGE_NEEDS_VERIFICATION","EMAIL_EXISTS","EMULATOR_CONFIG_FAILED","EXPIRED_OOB_CODE","EXPIRED_POPUP_REQUEST","INTERNAL_ERROR","INVALID_API_KEY","INVALID_APP_CREDENTIAL","INVALID_APP_ID","INVALID_AUTH","INVALID_AUTH_EVENT","INVALID_CERT_HASH","INVALID_CODE","INVALID_CONTINUE_URI","INVALID_CORDOVA_CONFIGURATION","INVALID_CUSTOM_TOKEN","INVALID_DYNAMIC_LINK_DOMAIN","INVALID_EMAIL","INVALID_EMULATOR_SCHEME","INVALID_IDP_RESPONSE","INVALID_LOGIN_CREDENTIALS","INVALID_MESSAGE_PAYLOAD","INVALID_MFA_SESSION","INVALID_OAUTH_CLIENT_ID","INVALID_OAUTH_PROVIDER","INVALID_OOB_CODE","INVALID_ORIGIN","INVALID_PASSWORD","INVALID_PERSISTENCE","INVALID_PHONE_NUMBER","INVALID_PROVIDER_ID","INVALID_RECIPIENT_EMAIL","INVALID_SENDER","INVALID_SESSION_INFO","INVALID_TENANT_ID","MFA_INFO_NOT_FOUND","MFA_REQUIRED","MISSING_ANDROID_PACKAGE_NAME","MISSING_APP_CREDENTIAL","MISSING_AUTH_DOMAIN","MISSING_CODE","MISSING_CONTINUE_URI","MISSING_IFRAME_START","MISSING_IOS_BUNDLE_ID","MISSING_OR_INVALID_NONCE","MISSING_MFA_INFO","MISSING_MFA_SESSION","MISSING_PHONE_NUMBER","MISSING_SESSION_INFO","MODULE_DESTROYED","NEED_CONFIRMATION","NETWORK_REQUEST_FAILED","NULL_USER","NO_AUTH_EVENT","NO_SUCH_PROVIDER","OPERATION_NOT_ALLOWED","OPERATION_NOT_SUPPORTED","POPUP_BLOCKED","POPUP_CLOSED_BY_USER","PROVIDER_ALREADY_LINKED","QUOTA_EXCEEDED","REDIRECT_CANCELLED_BY_USER","REDIRECT_OPERATION_PENDING","REJECTED_CREDENTIAL","SECOND_FACTOR_ALREADY_ENROLLED","SECOND_FACTOR_LIMIT_EXCEEDED","TENANT_ID_MISMATCH","TIMEOUT","TOKEN_EXPIRED","TOO_MANY_ATTEMPTS_TRY_LATER","UNAUTHORIZED_DOMAIN","UNSUPPORTED_FIRST_FACTOR","UNSUPPORTED_PERSISTENCE","UNSUPPORTED_TENANT_OPERATION","UNVERIFIED_EMAIL","USER_CANCELLED","USER_DELETED","USER_DISABLED","USER_MISMATCH","USER_SIGNED_OUT","WEAK_PASSWORD","WEB_STORAGE_UNSUPPORTED","ALREADY_INITIALIZED","RECAPTCHA_NOT_ENABLED","MISSING_RECAPTCHA_TOKEN","INVALID_RECAPTCHA_TOKEN","INVALID_RECAPTCHA_ACTION","MISSING_CLIENT_TYPE","MISSING_RECAPTCHA_VERSION","INVALID_RECAPTCHA_VERSION","INVALID_REQ_TYPE","logClient","Logger","_logWarn","msg","logLevel","LogLevel","WARN","_len","args","Array","_key2","warn","concat","SDK_VERSION","_logError","ERROR","_len2","_key3","error","_fail","authOrCode","_len3","rest","_key4","createErrorInternal","_createError","_len4","_key5","_errorWithCustomMessage","auth","code","message","errorMap","assign","appName","name","_serverAppCurrentUserOperationNotSupportedError","_assertInstanceOf","object","instance","constructor","_len5","_key6","_authOrCode$_errorFac","fullParams","_toConsumableArray","slice","_errorFactory","_assert","assertion","_len6","_key7","debugFail","failure","Error","debugAssert","_getCurrentUrl","self","_a","location","href","_isHttpOrHttps","_getCurrentScheme","protocol","Delay","shortDelay","longDelay","_classCallCheck","this","isMobile","isMobileCordova","isReactNative","_createClass","key","navigator","onLine","isBrowserExtension","Math","min","_emulatorUrl","config","path","emulator","url","startsWith","FetchProvider","fetchImpl","headersImpl","responseImpl","_fetch","fetch","toString","globalThis","Headers","Response","SERVER_ERROR_MAP","_SERVER_ERROR_MAP","DEFAULT_API_TIMEOUT_MS","_addTidIfNecessary","request","tenantId","_performApiRequest","_x","_x2","_x3","_x4","_performApiRequest2","_asyncToGenerator","_regeneratorRuntime","mark","_callee104","method","customErrorMap","_args104","wrap","_context104","prev","next","undefined","abrupt","_performFetchWithErrorHandling","_callee103","body","params","query","headers","fetchArgs","_context103","JSON","stringify","querystring","apiKey","_getAdditionalHeaders","sent","languageCode","isCloudflareWorker","referrerPolicy","_getFinalTarget","apiHost","stop","_x5","_x6","_x7","_performFetchWithErrorHandling2","_callee105","fetchFn","networkTimeout","response","json","errorMessage","_errorMessage$split","_errorMessage$split2","serverErrorCode","serverErrorMessage","authError","_context105","_canInitEmulator","NetworkTimeout","Promise","race","promise","clearNetworkTimeout","_makeTaggedError","ok","split","_slicedToArray","toLowerCase","replace","t0","FirebaseError","String","_performSignInRequest","_x8","_x9","_x10","_x11","_performSignInRequest2","_callee106","serverResponse","_args106","_context106","_serverResponse","host","base","apiScheme","_parseEnforcementState","enforcementStateStr","_this","timer","_","reject","setTimeout","clearTimeout","errorParams","email","phoneNumber","customData","_tokenResponse","isV2","grecaptcha","getResponse","isEnterprise","enterprise","RecaptchaConfig","siteKey","recaptchaEnforcementState","recaptchaKey","providerStr","_step","_iterator","_createForOfIteratorHelper","done","provider","enforcementState","err","f","getProviderEnforcementState","isProviderEnabled","getRecaptchaParams","_x12","_getRecaptchaParams","_callee107","_context107","recaptchaSiteKey","getRecaptchaConfig","_x13","_x14","_getRecaptchaConfig","_callee108","_context108","deleteAccount","_x15","_x16","_deleteAccount","_callee109","_context109","deleteLinkedAccounts","_x17","_x18","_deleteLinkedAccounts","_callee110","_context110","getAccountInfo","_x19","_x20","_getAccountInfo","_callee111","_context111","utcTimestampToDateString","utcTimestamp","date","Date","Number","isNaN","getTime","toUTCString","getIdToken","user","forceRefresh","getModularInstance","getIdTokenResult","_x21","_getIdTokenResult","_callee112","userInternal","token","claims","firebase","signInProvider","_args112","_context112","_parseToken","exp","auth_time","iat","authTime","secondsStringToMilliseconds","issuedAtTime","expirationTime","signInSecondFactor","seconds","_token$split","_token$split2","algorithm","payload","signature","decoded","base64Decode","parse","_tokenExpiresIn","parsedToken","_logoutIfInvalidated","_x22","_x23","_logoutIfInvalidated2","_callee113","_args113","_context113","isUserInvalidated","currentUser","signOut","_ref3","ProactiveRefresh","isRunning","timerId","errorBackoff","schedule","wasError","interval","stsTokenManager","now","max","_this2","getInterval","_callee","_context","iteration","_iteration","_callee2","_context2","UserMetadata","createdAt","lastLoginAt","_initializeTime","lastSignInTime","creationTime","metadata","_reloadWithoutSaving","_x24","_reloadWithoutSaving2","_callee114","idToken","coreAccount","newProviderData","providerData","oldIsAnonymous","newIsAnonymous","isAnonymous","updates","_context114","users","_notifyReloadListener","providerUserInfo","extractProviderData","mergeProviderData","passwordHash","uid","localId","displayName","photoURL","photoUrl","emailVerified","reload","_x25","_reload","_callee115","_context115","_persistUserIfCurrent","_notifyListenersIfCurrent","original","newData","deduped","filter","some","providerId","providers","map","rawId","requestStsToken","_x26","_x27","_requestStsToken","_callee117","refreshToken","_context117","_callee116","_auth$config","tokenApiHost","_context116","accessToken","access_token","expiresIn","expires_in","refresh_token","revokeToken","_x28","_x29","_revokeToken","_callee118","_context118","StsTokenManager","updateTokensAndExpiration","_getToken","_callee3","_args3","_context3","isExpired","refresh","_x30","_refresh","_callee4","oldToken","_yield$requestStsToke","_context4","_x31","_x32","expiresInSec","toJSON","manager","assertStringOrUndefined","UserImpl","opt","proactiveRefresh","reloadUserInfo","reloadListener","_getIdToken","_callee5","_context5","getToken","_x33","userInfo","_copy","_assign","newUser","_clone","callback","_start","_stop","_updateTokensIfNecessary2","_callee6","tokensRefreshed","_args6","_context6","updateFromServerResponse","_x34","_delete2","_callee7","_context7","_isFirebaseServerApp","app","clearRefreshToken","_redirectEventId","_b","_c","_d","_e","_f","_g","_h","plainObjectTokenManager","fromJSON","isArray","_fromIdTokenResponse2","_callee8","idTokenResponse","_args8","_context8","_x35","_x36","_fromGetAccountInfoResponse2","_callee9","_context9","updateFromIdToken","_x37","_x38","_x39","instanceCache","Map","_getInstance","cls","Function","set","InMemoryPersistence","type","storage","_isAvailable2","_callee10","_context10","_set2","_callee11","_context11","_x40","_x41","_get2","_callee12","_context12","_x42","_remove2","_callee13","_context13","_x43","_key","_listener","inMemoryPersistence","_persistenceKeyName","PersistenceUserManager","persistence","userKey","_this$auth","fullUserKey","fullPersistenceKey","boundEventHandler","_onStorageEvent","_addListener","_set","_getCurrentUser","_callee14","blob","_context14","_fromJSON","_remove","_setPersistence","_callee15","newPersistence","_context15","getCurrentUser","removeCurrentUser","setCurrentUser","_x44","_removeListener","_create","_callee18","persistenceHierarchy","availablePersistences","selectedPersistence","userToMigrate","_iterator2","_step2","migrationHierarchy","_args18","_context18","all","_ref5","_callee16","_context16","_isAvailable","_x47","t1","finish","_shouldAllowMigration","_ref6","_callee17","_context17","_x48","_x45","_x46","_getBrowserName","userAgent","ua","includes","_isIEMobile","_isFirefox","_isBlackBerry","_isWebOS","_isSafari","_isChromeIOS","_isAndroid","matches","match","getUA","test","_isIOS","_isMobileBrowser","_getClientVersion","clientPlatform","reportedPlatform","frameworks","reportedFrameworks","join","AuthMiddlewareQueue","queue","onAbort","_this3","wrappedCallback","resolve","push","index","_runMiddleware","_callee19","nextUser","onAbortStack","_iterator3","_step3","beforeStateCallback","_iterator4","_step4","_context19","reverse","originalMessage","_x49","_getPasswordPolicy","_x50","_getPasswordPolicy2","_callee119","_args119","_context119","PasswordPolicyImpl","responseOptions","customStrengthOptions","minPasswordLength","maxPasswordLength","containsLowercaseCharacter","containsLowercaseLetter","containsUppercaseCharacter","containsUppercaseLetter","containsNumericCharacter","containsNonAlphanumericCharacter","allowedNonAlphanumericCharacters","forceUpgradeOnSignin","schemaVersion","password","status","isValid","passwordPolicy","validatePasswordLengthOptions","validatePasswordCharacterOptions","meetsMinPasswordLength","meetsMaxPasswordLength","passwordChar","updatePasswordCharacterOptionsStatuses","charAt","AuthImpl","heartbeatServiceProvider","appCheckServiceProvider","emulatorConfig","operations","authStateSubscription","Subscription","idTokenSubscription","beforeStateQueue","redirectUser","isProactiveRefreshEnabled","EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION","_isInitialized","_deleted","_initializationPromise","_popupRedirectResolver","_agentRecaptchaConfig","_tenantRecaptchaConfigs","_projectPasswordPolicy","_tenantPasswordPolicies","lastNotifiedUid","settings","appVerificationDisabledForTesting","clientVersion","sdkClientVersion","popupRedirectResolver","_this4","_callee20","_context20","persistenceManager","_shouldInitProactively","_initialize","initializeCurrentUser","_onStorageEvent2","_callee21","_context21","assertedPersistence","_currentUser","_updateCurrentUser","_initializeCurrentUserFromIdToken","_callee22","_context22","_fromGetAccountInfoResponse","directlySetCurrentUser","console","_x51","_initializeCurrentUser","_callee23","previouslyStoredUser","futureCurrentUser","needsTocheckMiddleware","redirectUserEventId","storedUserEventId","result","_this5","_context23","authIdToken","initializeCurrentUserFromIdToken","then","authDomain","getOrInitRedirectPersistenceManager","tryRedirectSignIn","runMiddleware","_overrideRedirectResult","reloadAndSetCurrentUserOrClear","_x52","_tryRedirectSignIn","_callee24","redirectResolver","_context24","_completeRedirectFn","_setRedirectUser","_x53","_reloadAndSetCurrentUserOrClear","_callee25","_context25","_x54","navigatorLanguage","languages","language","_getUserLanguage","_delete3","_callee26","_context26","_updateCurrentUser2","_callee27","userExtern","_context27","_x55","_updateCurrentUser3","_callee29","skipBeforeStateCallbacks","_this6","_args29","_context29","_callee28","_context28","notifyAuthListeners","_x56","_signOut","_callee30","_context30","redirectPersistenceManager","_this7","_callee31","_context31","setPersistence","_validatePassword","_callee32","_context32","_getPasswordPolicyInternal","_updatePasswordPolicy","validatePassword","_x57","_updatePasswordPolicy2","_callee33","_context33","nextOrObserver","completed","registerStateListener","pushCallback","_this8","unsubscribe","onAuthStateChanged","_revokeAccessToken","_callee34","_context34","tokenType","_x58","_setRedirectUser2","_callee35","redirectManager","_context35","_x59","_x60","_getOrInitRedirectPersistenceManager","_callee36","resolver","_context36","_redirectPersistence","_x61","_redirectUserForId2","_callee38","id","_context38","_callee37","_context37","_x62","_persistUserIfCurrent2","_callee40","_this9","_context40","_callee39","_context39","_x63","_startProactiveRefresh","_stopProactiveRefresh","currentUid","subscription","_this10","cb","isUnsubscribed","addObserver","_directlySetCurrentUser","_callee41","_context41","_x64","action","framework","sort","_getFrameworks","_getAdditionalHeaders2","_callee42","heartbeatsHeader","appCheckToken","_context42","options","appId","getImmediate","optional","getHeartbeatsHeader","_getAppCheckToken","_getAppCheckToken2","_callee43","appCheckTokenResult","_context43","_castAuth","_this11","observer","createSubscribe","externalJSProvider","loadJS","_callee44","_context44","recaptchaV2Script","recaptchaEnterpriseScript","gapiScript","_loadJS","_generateCallbackName","prefix","floor","random","_WIDGET_ID_START","MockReCaptcha","counter","_widgets","container","parameters","MockWidget","optWidgetId","delete","_execute","_callee45","_context45","execute","_x65","MockGreCAPTCHATopLevel","MockGreCAPTCHA","_siteKey","_options","_container","_parameters","containerOrId","_this12","deleted","responseToken","clickHandler","document","getElementById","isVisible","size","addEventListener","checkIfDeleted","removeEventListener","_this13","window","len","chars","allowedChars","generateRandomAlphaNumericString","_this13$params","expiredCallback","FAKE_TOKEN","RecaptchaEnterpriseVerifier","authExtern","_verify","_callee48","retrieveSiteKey","_retrieveSiteKey","retrieveRecaptchaToken","mockRecaptcha","_this14","_args48","_context48","ready","catch","_callee47","_context47","_ref12","_callee46","_context46","clientType","version","_x67","_x68","_x66","injectRecaptchaFields","_x69","_x70","_x71","_injectRecaptchaFields","_callee120","isCaptchaResp","isFakeToken","verifier","captchaResponse","newRequest","recaptchaToken","_recaptchaToken","_args120","_context120","verify","phoneEnrollmentInfo","phoneSignInInfo","handleRecaptchaFlow","_x72","_x73","_x74","_x75","_x76","_handleRecaptchaFlow","_callee123","authInstance","actionName","actionMethod","recaptchaAuthProvider","requestWithRecaptcha","_requestWithRecaptcha2","requestWithRecaptchaFields","_context123","_ref42","_callee121","_requestWithRecaptcha","_context121","log","_x293","_ref43","_callee122","_context122","_x294","_initializeRecaptchaConfig","_x77","_initializeRecaptchaConfig2","_callee124","authInternal","_context124","isAnyProviderEnabled","initializeAuth","deps","_getProvider","isInitialized","initialOptions","getOptions","deepEqual","initialize","connectAuthEmulator","disableWarnings","extractProtocol","_extractHostAndPort","authority","exec","substr","port","hostAndPort","pop","bracketedIPv6","parsePort","_hostAndPort$split","_hostAndPort$split2","extractHostAndPort","portStr","freeze","attachBanner","el","createElement","sty","style","innerText","position","width","backgroundColor","border","color","bottom","left","margin","zIndex","textAlign","classList","add","appendChild","info","readyState","emitEmulatorWarning","protocolEnd","AuthCredential","signInMethod","_auth","_idToken","resetPassword","_x78","_x79","_resetPassword","_callee125","_context125","updateEmailPassword","_x80","_x81","_updateEmailPassword","_callee126","_context126","linkEmailPassword","_x82","_x83","_linkEmailPassword","_callee127","_context127","applyActionCode$1","_x84","_x85","_applyActionCode$","_callee128","_context128","signInWithPassword","_x86","_x87","_signInWithPassword","_callee129","_context129","sendOobCode","_x88","_x89","_sendOobCode","_callee130","_context130","sendEmailVerification$1","_x90","_x91","_sendEmailVerification$","_callee131","_context131","sendPasswordResetEmail$1","_x92","_x93","_sendPasswordResetEmail$","_callee132","_context132","sendSignInLinkToEmail$1","_x94","_x95","_sendSignInLinkToEmail$","_callee133","_context133","verifyAndChangeEmail","_x96","_x97","_verifyAndChangeEmail","_callee134","_context134","signInWithEmailLink$1","_x98","_x99","_signInWithEmailLink$","_callee135","_context135","signInWithEmailLinkForLinking","_x100","_x101","_signInWithEmailLinkForLinking","_callee136","_context136","EmailAuthCredential","_AuthCredential","_inherits","_super","_createSuper","_email","_password","_this15","_tenantId","_callee49","_context49","returnSecureToken","oobCode","_x102","_getIdTokenResponse2","_callee50","_context50","_x103","_x104","_linkToIdToken2","_getIdTokenResponse","obj","_fromEmailAndPassword","_fromEmailAndCode","signInWithIdp","_x105","_x106","_signInWithIdp","_callee137","_context137","OAuthCredential","_AuthCredential2","_super2","_this16","pendingToken","secret","nonce","buildRequest","autoCreate","requestUri","postBody","cred","oauthToken","oauthTokenSecret","sendPhoneVerificationCode","_x107","_x108","_sendPhoneVerificationCode","_callee138","_context138","_signInWithPhoneNumber$","_callee139","_context139","_linkWithPhoneNumber$","_callee140","_context140","temporaryProof","VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_","_verifyPhoneNumberForExisting","_callee141","apiRequest","_context141","operation","PhoneAuthCredential","_AuthCredential3","_super3","_this17","_x109","_x110","signInWithPhoneNumber$1","_makeVerificationRequest","_x111","_x112","linkWithPhoneNumber$1","_x113","_x114","verifyPhoneNumberForExisting","_this$params","verificationId","verificationCode","sessionInfo","_json","ActionCodeURL","actionLink","searchParams","querystringDecode","extractQuerystring","mode","parseMode","continueUrl","link","doubleDeepLink","iOSDeepLink","parseDeepLink","parseActionCodeURL","parseLink","EmailAuthProvider","PROVIDER_ID","emailLink","actionCodeUrl","EMAIL_PASSWORD_SIGN_IN_METHOD","EMAIL_LINK_SIGN_IN_METHOD","FederatedAuthProvider","defaultLanguageCode","customParameters","customOAuthParameters","BaseOAuthProvider","_FederatedAuthProvide","_super4","_this18","scopes","scope","OAuthProvider","_BaseOAuthProvider","_super5","_credential","rawNonce","_fromParams","userCredential","oauthCredentialFromTaggedObject","_ref13","tokenResponse","oauthIdToken","oauthAccessToken","FacebookAuthProvider","_BaseOAuthProvider2","_super6","FACEBOOK_SIGN_IN_METHOD","credentialFromTaggedObject","_ref14","credential","GoogleAuthProvider","_BaseOAuthProvider3","_super7","_this19","addScope","GOOGLE_SIGN_IN_METHOD","_ref15","GithubAuthProvider","_BaseOAuthProvider4","_super8","GITHUB_SIGN_IN_METHOD","_ref16","SAMLAuthCredential","_AuthCredential4","_super9","_this20","SAMLAuthProvider","_FederatedAuthProvide2","_super10","samlCredentialFromTaggedObject","_ref17","TwitterAuthProvider","_BaseOAuthProvider5","_super11","TWITTER_SIGN_IN_METHOD","_ref18","signUp","_x115","_x116","_signUp","_callee142","_context142","UserCredentialImpl","operationType","_fromIdTokenResponse3","_callee51","userCred","_args51","_context51","_fromIdTokenResponse","providerIdForResponse","_x117","_x118","_x119","_forOperation2","_callee52","_context52","_updateTokensIfNecessary","_x120","_x121","_x122","signInAnonymously","_x123","_signInAnonymously","_callee143","_context143","MultiFactorError","_FirebaseError","_super12","_this21","setPrototypeOf","_assertThisInitialized","_processCredentialSavingMfaContextIfNecessary","_getReauthenticationResolver","_fromErrorAndOperation","providerDataAsNames","Set","_ref19","pid","unlink","_x124","_x125","_unlink","_callee144","_yield$deleteLinkedAc","providersLeft","_context144","_assertLinkedStatus","t2","t3","t4","deleteProvider","pd","has","_link$1","_x126","_x127","_link$","_callee145","bypassAuthState","_args145","_context145","t5","_linkToIdToken","t6","_forOperation","_x128","_x129","_x130","_assertLinkedStatus2","_callee146","expected","providerIds","_context146","_reauthenticate","_x131","_x132","_reauthenticate2","_callee147","parsed","_args147","_context147","sub","_signInWithCredential","_x133","_x134","_signInWithCredential2","_callee148","_args148","_context148","signInWithCredential","_x135","_x136","_signInWithCredential3","_callee149","_context149","linkWithCredential","_x137","_x138","_linkWithCredential","_callee150","_context150","reauthenticateWithCredential","_x139","_x140","_reauthenticateWithCredential","_callee151","_context151","signInWithCustomToken$1","_x141","_x142","_signInWithCustomToken$","_callee152","_context152","signInWithCustomToken","_x143","_x144","_signInWithCustomToken","_callee153","customToken","_context153","MultiFactorInfoImpl","factorId","mfaEnrollmentId","enrollmentTime","enrolledAt","enrollment","PhoneMultiFactorInfoImpl","_fromServerResponse","TotpMultiFactorInfoImpl","_MultiFactorInfoImpl","_super13","_this22","phoneInfo","_MultiFactorInfoImpl2","_super14","_setActionCodeSettingsOnRequest","actionCodeSettings","dynamicLinkDomain","canHandleCodeInApp","handleCodeInApp","iOS","bundleId","iOSBundleId","android","packageName","androidInstallApp","installApp","androidMinimumVersionCode","minimumVersion","androidPackageName","recachePasswordPolicy","_x145","_recachePasswordPolicy","_callee154","_context154","sendPasswordResetEmail","_x146","_x147","_x148","_sendPasswordResetEmail","_callee155","_context155","requestType","confirmPasswordReset","_x149","_x150","_x151","_confirmPasswordReset","_callee157","newPassword","_context157","_ref44","_callee156","_context156","_x295","applyActionCode","_x152","_x153","_applyActionCode","_callee158","_context158","checkActionCode","_x154","_x155","_checkActionCode","_callee159","authModular","multiFactorInfo","_context159","newEmail","mfaInfo","data","previousEmail","verifyPasswordResetCode","_x156","_x157","_verifyPasswordResetCode","_callee160","_yield$checkActionCod","_context160","createUserWithEmailAndPassword","_x158","_x159","_x160","_createUserWithEmailAndPassword","_callee161","signUpResponse","_context161","signInWithEmailAndPassword","_ref20","_callee53","_context53","_x161","sendSignInLinkToEmail","_x162","_x163","_x164","_sendSignInLinkToEmail","_callee162","setActionCodeSettings","_context162","isSignInWithEmailLink","signInWithEmailLink","_x165","_x166","_x167","_signInWithEmailLink","_callee163","_context163","credentialWithLink","createAuthUri","_x168","_x169","_createAuthUri","_callee164","_context164","fetchSignInMethodsForEmail","_x170","_x171","_fetchSignInMethodsForEmail","_callee165","continueUri","_yield$createAuthUri","signinMethods","_context165","identifier","sendEmailVerification","_x172","_x173","_sendEmailVerification","_callee166","_yield$sendEmailVerif","_context166","verifyBeforeUpdateEmail","_x174","_x175","_x176","_verifyBeforeUpdateEmail","_callee167","_yield$verifyAndChang","_context167","updateProfile$1","_x177","_x178","_updateProfile$","_callee168","_context168","updateProfile","_x179","_x180","_updateProfile","_callee169","_ref21","profileRequest","passwordProvider","_context169","find","_ref45","updateEmail","updateEmailOrPassword","updatePassword","_x181","_x182","_x183","_updateEmailOrPassword","_callee170","_context170","GenericAdditionalUserInfo","isNewUser","profile","FederatedAdditionalUserInfoWithUsername","_GenericAdditionalUse","_super15","username","_this23","FacebookAdditionalUserInfo","_GenericAdditionalUse2","_super16","GithubAdditionalUserInfo","_FederatedAdditionalU","_super17","login","GoogleAdditionalUserInfo","_GenericAdditionalUse3","_super18","TwitterAdditionalUserInfo","_FederatedAdditionalU2","_super19","screenName","getAdditionalUserInfo","rawUserInfo","kind","initializeRecaptchaConfig","_x184","_x185","_validatePassword2","_callee171","_context171","onIdTokenChanged","beforeAuthStateChanged","useDeviceLanguage","updateCurrentUser","revokeAccessToken","deleteUser","_x186","_deleteUser","_callee172","_context172","MultiFactorSessionImpl","multiFactorSession","mfaPendingCredential","pendingCredential","_fromMfaPendingCredential","_fromIdtoken","MultiFactorResolverImpl","session","hints","signInResolver","_callee54","assertionExtern","_context54","_x187","_resolveSignIn","_ref22","_callee55","mfaResponse","_context55","_process","_x188","getMultiFactorResolver","errorInternal","_fromError","startEnrollPhoneMfa","finalizeEnrollTotpMfa","MultiFactorUserImpl","_this24","enrolledFactors","_onReload","_getSession","_callee56","_context56","_enroll","_callee57","finalizeMfaResponse","_context57","getSession","_x189","_x190","_unenroll","_callee58","infoOrUid","_context58","_ref23","_x191","multiFactorUserCache","WeakMap","multiFactor","userModular","_fromUser","STORAGE_AVAILABLE_KEY","BrowserPersistenceClass","storageRetriever","setItem","removeItem","getItem","BrowserLocalPersistence","_BrowserPersistenceCl","_super20","_this25","localStorage","event","poll","onStorageEvent","listeners","localCache","pollTimer","fallbackToPolling","_i","_Object$keys","keys","newValue","oldValue","_this26","detachListener","stopPolling","triggerListeners","storedValue","notifyListeners","isIE","documentMode","forAllChangedKeys","_oldValue","_i2","_Array$from","from","listener","_this27","setInterval","StorageEvent","clearInterval","startPolling","attachListener","_callee59","_context59","_get3","_getPrototypeOf","_x192","_x193","_set3","_get4","_callee60","_context60","_x194","_remove3","_callee61","_context61","_x195","browserLocalPersistence","BrowserSessionPersistence","_BrowserPersistenceCl2","_super21","sessionStorage","browserSessionPersistence","_allSettled","promises","_ref24","_callee62","_context62","fulfilled","reason","_x196","Receiver","eventTarget","handlersMap","handleEvent","_handleEvent","_callee64","messageEvent","_messageEvent$data","eventId","eventType","handlers","_context64","ports","postMessage","_ref25","_callee63","handler","_context63","origin","_x198","_x197","eventHandler","existingInstance","receivers","receiver","isListeningto","newInstance","_generateEventId","digits","Sender","target","messageChannel","port1","onMessage","close","_send2","_callee65","timeout","completionTimer","_this28","_args65","_context65","MessageChannel","start","ackTimer","port2","finally","removeMessageHandler","_x199","_x200","_window","_setWindowLocation","_isWorker","_getActiveServiceWorker","_getActiveServiceWorker2","_callee173","registration","_context173","serviceWorker","active","_getServiceWorkerController","controller","DB_NAME","DB_OBJECTSTORE_NAME","DB_DATA_KEYPATH","DBPromise","_this29","getObjectStore","db","isReadWrite","transaction","objectStore","_deleteDatabase","indexedDB","deleteDatabase","toPromise","_openDatabase","open","createObjectStore","keyPath","_callee66","_context66","objectStoreNames","contains","_putObject","_x201","_x202","_x203","_putObject2","_callee174","_getObjectStore$put","_context174","put","getObject","_x204","_x205","_getObject","_callee175","_context175","_deleteObject","IndexedDBLocalPersistence","pendingWrites","sender","serviceWorkerReceiverAvailable","activeServiceWorker","_workerInitializationPromise","initializeServiceWorkerMessaging","_openDb2","_callee67","_context67","_withRetries2","_callee68","op","numAttempts","_context68","_openDb","_x206","_initializeServiceWorkerMessaging","_callee69","_context69","initializeReceiver","initializeSender","_initializeReceiver","_callee72","_this30","_context72","_subscribe","_ref27","_callee70","_origin","_context70","_poll","keyProcessed","_x207","_x208","_ref28","_callee71","_data","_context71","_x209","_x210","_initializeSender","_callee73","results","_context73","_send","_notifyServiceWorker","_callee74","_context74","_x211","_isAvailable3","_callee75","_context75","_withPendingWrite2","_callee76","write","_context76","_x212","_set4","_callee78","_this31","_context78","_withPendingWrite","_callee77","_context77","_withRetries","notifyServiceWorker","_x213","_x214","_get5","_callee79","_context79","_x215","_remove4","_callee81","_this32","_context81","_callee80","_context80","_x216","_poll2","_callee82","keysInResult","_iterator5","_step5","_step5$value","_i3","_Object$keys2","localKey","_context82","getAllRequest","getAll","fbase_key","_i4","_Array$from2","_this33","_callee83","_context83","indexedDBLocalPersistence","startSignInPhoneMfa","finalizeSignInTotpMfa","_JSLOAD_CALLBACK","NETWORK_TIMEOUT_DELAY","ReCaptchaLoaderImpl","hostLanguage","librarySeparatelyLoaded","render","_this34","hl","isHostLanguageValid","shouldResolveImmediately","recaptcha","widgetId","onload","MockReCaptchaLoaderImpl","_load","_callee84","_context84","_x217","RECAPTCHA_VERIFIER_TYPE","DEFAULT_PARAMS","theme","RecaptchaVerifier","destroyed","tokenChangeListeners","renderPromise","isInvisible","makeTokenCallback","_recaptchaLoader","validateStartingState","_verify2","_callee85","_this35","_context85","assertNotDestroyed","getAssertedRecaptcha","tokenChange","_this36","makeRenderPromise","reset","_this37","clearedOneInstance","childNodes","forEach","node","removeChild","sitekey","hasChildNodes","existing","_this38","globalFunc","_makeRenderPromise","_callee86","guaranteedEmpty","_context86","init","_init","_callee87","_context87","domReady","load","ConfirmationResultImpl","onConfirmation","authCredential","_fromVerification","signInWithPhoneNumber","_x218","_x219","_x220","_signInWithPhoneNumber","_callee176","appVerifier","_context176","_verifyPhoneNumber","linkWithPhoneNumber","_x221","_x222","_x223","_linkWithPhoneNumber","_callee177","_context177","reauthenticateWithPhoneNumber","_x224","_x225","_x226","_reauthenticateWithPhoneNumber","_callee178","_context178","_x227","_x228","_x229","_verifyPhoneNumber2","_callee182","phoneInfoOptions","startPhoneMfaEnrollmentRequest","startEnrollPhoneMfaActionCallback","startPhoneMfaEnrollmentResponse","startPhoneMfaSignInRequest","startSignInPhoneMfaActionCallback","startPhoneMfaSignInResponse","_response","sendPhoneVerificationCodeRequest","sendPhoneVerificationCodeActionCallback","sendPhoneVerificationCodeResponse","_response2","_context182","_ref46","_callee179","requestWithRecaptchaV2","_context179","injectRecaptchaV2Token","_x296","_x297","phoneSessionInfo","multiFactorHint","multiFactorUid","_ref47","_callee180","_context180","_x298","_x299","phoneResponseInfo","_ref48","_callee181","_context181","_x300","_x301","_reset","updatePhoneNumber","_x230","_x231","_updatePhoneNumber","_callee183","_context183","_x232","_x233","_x234","_injectRecaptchaV2Token","_callee184","recaptchaV2Verifier","recaptchaV2Token","recaptchaVersion","_captchaResponse","_clientType","_recaptchaVersion","_context184","PhoneAuthProvider","phoneOptions","applicationVerifier","_ref32","_fromTokenResponse","_withDefaultResolver","resolverOverride","PHONE_SIGN_IN_METHOD","IdpCredential","_AuthCredential5","_super22","_this39","_buildIdpRequest","sessionId","returnIdpCredential","_signIn","_reauth","_link","_x235","_link2","_callee185","_context185","AbstractPopupRedirectOperation","pendingPromise","eventManager","_this40","_ref33","_callee88","_context88","onExecution","registerConsumer","_x236","_x237","_onAuthEvent","_callee89","urlResponse","_context89","getIdpTask","_x238","unregisterAndCleanUp","unregisterConsumer","cleanUp","_POLL_WINDOW_CLOSE_TIMEOUT","signInWithPopup","_x239","_x240","_x241","_signInWithPopup","_callee186","resolverInternal","_context186","PopupOperation","executeNotNull","reauthenticateWithPopup","_x242","_x243","_x244","_reauthenticateWithPopup","_callee187","_context187","linkWithPopup","_x245","_x246","_x247","_linkWithPopup","_callee188","_context188","_AbstractPopupRedirec","_super23","_this41","authWindow","pollId","currentPopupAction","cancel","_executeNotNull","_callee90","_context90","_onExecution","_callee91","_this42","_context91","_openPopup","associatedEvent","_originValidation","_isIframeWebStorageSupported","isSupported","pollUserCancellation","_this43","closed","PENDING_REDIRECT_KEY","redirectOutcomeMap","RedirectAction","_AbstractPopupRedirec2","_super24","_this44","_execute2","_callee92","readyOutcome","_context92","_getAndClearPendingRedirectStatus","_onAuthEvent2","_callee93","_context93","_redirectUserForId","_x248","_onExecution2","_callee94","_context94","_x249","_x250","_getAndClearPendingRedirectStatus2","_callee189","hasPendingRedirect","_context189","pendingRedirectKey","resolverPersistence","_setPendingRedirectStatus","_x251","_x252","_setPendingRedirectStatus2","_callee190","_context190","signInWithRedirect","_x253","_x254","_x255","_signInWithRedirect2","_signInWithRedirect","_callee191","_context191","_openRedirect","reauthenticateWithRedirect","_x256","_x257","_x258","_reauthenticateWithRedirect2","_reauthenticateWithRedirect","_callee192","_context192","prepareUserForRedirect","linkWithRedirect","_x259","_x260","_x261","_linkWithRedirect2","_linkWithRedirect","_callee193","_context193","getRedirectResult","_x262","_x263","_getRedirectResult2","_callee194","_context194","_getRedirectResult","_x264","_x265","_getRedirectResult3","_callee195","resolverExtern","_args195","_context195","_x266","_prepareUserForRedirect","_callee196","_context196","AuthEventManager","cachedEventUids","consumers","queuedRedirectEvent","hasHandledPotentialRedirect","lastProcessedEventTime","authEventConsumer","isEventForConsumer","sendToConsumer","saveEventToCache","_this45","hasEventBeenHandled","handled","consumer","isNullRedirectEvent","isRedirectEvent","onError","onAuthEvent","eventIdMatches","clear","eventUid","v","_ref34","_getProjectConfig","_x267","_getProjectConfig2","_callee197","_args197","_context197","IP_ADDRESS_REGEX","HTTP_REGEX","_validateOrigin2","_callee198","_yield$_getProjectCon","authorizedDomains","_iterator6","_step6","domain","_context198","matchDomain","currentUrl","_URL","URL","hostname","ceUrl","escapedDomainPattern","RegExp","NETWORK_TIMEOUT","resetUnloadedGapiModules","beacon","___jsl","H","_i5","_Object$keys3","hint","L","CP","loadGapi","loadGapiIframe","gapi","iframes","getContext","ontimeout","Iframe","cbName","cachedGApiLoader","_loadGapi","PING_TIMEOUT","IFRAME_PATH","EMULATED_IFRAME_PATH","IFRAME_ATTRIBUTES","top","height","tabindex","EID_FROM_APIHOST","getIframeUrl","eid","fw","_openIframe","_x269","_openIframe2","_callee200","context","_context200","where","messageHandlersFilter","CROSS_ORIGIN_IFRAMES_FILTER","attributes","dontclear","iframe","_ref49","_callee199","networkError","networkErrorTimer","clearTimerAndResolve","_context199","restyle","setHideOnLeave","ping","_x302","_x303","BASE_POPUP_OPTIONS","resizable","statusbar","toolbar","AuthPopup","_open","screen","availHeight","availWidth","scrollbars","optionsString","entries","reduce","accum","_ref35","_ref36","standalone","_isIOSStandalone","click","createEvent","initMouseEvent","dispatchEvent","openAsNewWindowIOS","newWin","focus","WIDGET_PATH","EMULATOR_WIDGET_PATH","FIREBASE_APP_CHECK_FRAGMENT_ID","encodeURIComponent","_getRedirectUrl","_x270","_x271","_x272","_x273","_x274","_x275","_getRedirectUrl2","_callee201","authType","redirectUrl","additionalParams","_i6","_Object$entries","_Object$entries$_i","paramsDict","_i7","_Object$keys4","_key8","appCheckTokenFragment","_context201","setDefaultLanguage","isEmpty","getCustomParameters","getScopes","tid","getHandlerBase","_ref37","WEB_STORAGE_SUPPORT_KEY","BrowserPopupRedirectResolver","eventManagers","originValidationPromises","_callee95","_context95","_x276","_x277","_x278","_x279","_openPopup2","_openRedirect2","_callee96","_context96","_x280","_x281","_x282","_x283","_this46","_this$eventManagers$k","initAndGetManager","_initAndGetManager","_callee97","_context97","register","iframeEvent","authEvent","onEvent","_x284","send","_x268","_validateOrigin","browserPopupRedirectResolver","MultiFactorAssertionImpl","_finalizeEnroll","_finalizeSignIn","PhoneMultiFactorAssertionImpl","_MultiFactorAssertion","_super25","_this47","finalizeEnrollPhoneMfa","phoneVerificationInfo","finalizeSignInPhoneMfa","PhoneMultiFactorGenerator","_fromCredential","FACTOR_ID","TotpMultiFactorGenerator","oneTimePassword","TotpMultiFactorAssertionImpl","_fromSecret","enrollmentId","_fromEnrollmentId","_generateSecret","_callee98","mfaSession","_context98","totpEnrollmentInfo","TotpSecret","_fromStartTotpMfaEnrollmentResponse","_x285","_MultiFactorAssertion2","_super26","otp","_this48","_callee99","_context99","totpVerificationInfo","_makeTotpVerificationInfo","_x286","_x287","_x288","_finalizeEnroll2","_callee100","_context100","_x289","_x290","_finalizeSignIn2","secretKey","hashingAlgorithm","codeLength","codeIntervalSeconds","enrollmentCompletionDeadline","accountName","issuer","useDefaults","_isEmptyString","totpSessionInfo","sharedSecretKey","verificationCodeLength","periodSec","finalizeEnrollmentTime","input","AuthInterop","internalListeners","assertAuthConfigured","_getToken2","_callee101","_context101","_x291","updateProactiveRefresh","authIdTokenMaxAge","getExperimentalSetting","lastPostedIdToken","mintCookieFactory","_ref39","_callee102","idTokenResult","idTokenAge","_context102","_x292","getAuth","getApp","authTokenSyncPath","isSecureContext","authTokenSyncUrl","mintCookie","authEmulatorHost","getDefaultEmulatorHost","setAttribute","onerror","charset","getElementsByTagName","getScriptParentElement","_registerComponent","Component","_ref38","getProvider","_app$options","hierarchy","_updateErrorMap","_initializeWithPersistence","_initializeAuthInstance","setInstantiationMode","setInstanceCreatedCallback","_instanceIdentifier","_instance","registerVersion","getVersionForPlatform"],"sourceRoot":""}